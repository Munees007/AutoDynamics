@inject NavigationManager Navigation
@using AutoDynamics.Shared.Services
@using AutoDynamics.Shared.Pages
@using AutoDynamics.Shared.Pages.Credit
@using AutoDynamics.Shared.Pages.Product
@using AutoDynamics.Shared.Pages.Billing
@using AutoDynamics.Shared.Pages.Purchase
@using AutoDynamics.Shared.Pages.Stock
@inject ITabService TabService
@inject IMultiWindowService MultiWindowService
@* <div class="top-row ps-3 navbar navbar-dark"> *@
@*     <div class="container-fluid"> *@
@*         <a class="navbar-brand" href="">AutoDynamics</a> *@
@*     </div> *@
@* </div> *@

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column pt-3">
        @foreach (var menu in menuOBJ.Values)
        {
            <div class="nav-btn" @onclick="() => MenuClicked(menu)">
                <p class="rounded-3 user-select-none">@menu.Name</p>
                @if (menu.SubMenus.Count > 0)
                {
                    <ul style="@(menu.IsExpanded ? "display:block;" : "display:none;")">
                        @foreach (var sub in menu.SubMenus)
                        {
                            <li style="cursor:pointer;user-select:none" class="text-white rounded-3" onclick=@(()=> TabService.OpenTab(sub.Name,sub.type))>@sub.Name</li>
                        }
                    </ul>
                }
            </div>
        }
    </nav>
</div>

@code
{
    class MenuType
    {
        public string Name { get; set; }
        public string Path { get; set; }
        public bool IsExpanded { get; set; } = false;
        public Type? type { get; set; }
        public List<MenuType> SubMenus { get; set; }

        public MenuType(string name, string path,Type type = null)
        {
            Name = name;
            Path = path;
            this.type = type;
            SubMenus = new List<MenuType>();
        }
    }

    public void NavigateToPath(string path)
    {
        Navigation.NavigateTo(path);
    }
    Dictionary<int, MenuType> menuOBJ = new Dictionary<int, MenuType>
    {
        { 1, new MenuType("Customer", "#") {
            SubMenus = new List<MenuType> {
                new MenuType("Add", "/customer/add",typeof(CustomerAdd)),
                new MenuType("Manage Users", "/customer/manage",typeof(CustomerView)),
            }
        }},
        { 2, new MenuType("Vehicle", "#") {
            SubMenus = new List<MenuType> {
                new MenuType("Add", "/vehicle/add",typeof(VechicleAdd)),
                new MenuType("Manage Vehicle", "/vehicle/details",typeof(VehicleUpdate)),
                new MenuType("Vehicle Makes", "/vehicleMake",typeof(VehicleMake)),
                new MenuType("Vehicle Models", "/vehicleModel",typeof(VehicleModel)),
            }
        }},
        { 3, new MenuType("Product", "#") {
            SubMenus = new List<MenuType> {
                new MenuType("Add", "/product/add",typeof(AddProduct)),
                new MenuType("Manage Product", "/product/details",typeof(ViewProducts)),
                new MenuType("Manage Brand", "/brand/details",typeof(ViewBrand)),
            }
        }},
        { 4, new MenuType("Billing", "#") {
            SubMenus = new List<MenuType> {
                new MenuType("Add Bill", "/billing",typeof(Billing)),
                new MenuType("View Bill", "/bill/view",typeof(ListBills)),
            }
        }},
        { 5, new MenuType("Purchase", "#") {
            SubMenus = new List<MenuType> {
                new MenuType("Add Purchase", "/purchase",typeof(AddPurchase)),
                new MenuType("View Purchase", "/list/purchaseBills",typeof(ListPuchases)),
            }
        }},
        { 6, new MenuType("Stock", "") {

            SubMenus = new List<MenuType>
            {
                new MenuType("View Stock","/stock",typeof(ViewStock)),
                new MenuType("Stock Outward","/stock/outward",typeof(StockOutward)),
                new MenuType("Stock Inward","/stock/inward",typeof(StockInward))
            }

        }},
        { 7, new MenuType("Suppliers", "#") {
            SubMenus = new List<MenuType> {
                new MenuType("Add Supplier", "/supplier/add",typeof(AddSupplier)),
                new MenuType("Manage Supplier", "/supplier/manage",typeof(ManageSupplier)),
            }
        }},
        { 8, new MenuType("Services", "/services",typeof(Services)) {
        }},
        { 9, new MenuType("Credit Record", "/credit/details",typeof(ViewCredit)) {
        }},
        
    };

    void MenuClicked(MenuType menuV)
    {
        if(menuV.SubMenus.Count == 0)
        {
            TabService.OpenTab(menuV.Name,menuV.type);
			//Navigation.NavigateTo(menuV.Path);
        }
        else
        {
            var menu = menuOBJ.Values.FirstOrDefault(m => m.Name == menuV.Name);
            if (menu != null)
            {
                menu.IsExpanded = !menu.IsExpanded; // Toggle only the clicked menu
            }
            StateHasChanged();
        }
        
    }
}
