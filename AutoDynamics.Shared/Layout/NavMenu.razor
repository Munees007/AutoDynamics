@inject NavigationManager Navigation

@inject ITabService TabService
@inject IMultiWindowService MultiWindowService
@* <div class="top-row ps-3 navbar navbar-dark"> *@
@*     <div class="container-fluid"> *@
@*         <a class="navbar-brand" href="">AutoDynamics</a> *@
@*     </div> *@
@* </div> *@

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column pt-3">
        @foreach (var menu in groupMenuOBJ.Values)
        {
            @* <div class="nav-btn" @onclick="() => MenuClicked(menu)"> *@
            @*     <p class="rounded-3 user-select-none text-black">@menu.Name</p> *@
            @*     @if (menu.SubMenus.Count > 0) *@
            @*     { *@
            @*         <ul style="@(menu.IsExpanded ? "display:block;" : "display:none;")"> *@
            @*             @foreach (var sub in menu.SubMenus) *@
            @*             { *@
            @*                 <li style="cursor:pointer;user-select:none" class="text-black rounded-3" onclick=@(()=> TabService.OpenTab(sub.Name,sub.type))>@sub.Name</li> *@
            @*             } *@
            @*         </ul> *@
            @*     } *@
            @* </div> *@
            @RenderMenu(menu)
        }
    </nav>
</div>

@code
{
    string[] ignoreDuplicates = { "Add Bill", "Add Receipt", "Add Purchase", "Add Payment" };
    RenderFragment RenderMenu(MenuType menu) => @<div class="nav-btn">
        <p class="rounded-3 user-select-none text-black" @onclick="() => MenuClicked(menu)">
            @menu.Name
        </p>

        @if (menu.SubMenus != null && menu.SubMenus.Count > 0)
    {
        <ul style="@(menu.IsExpanded ? "display:block;" : "display:none;")">
            @foreach (var sub in menu.SubMenus)
        {
            @if (sub.SubMenus != null && sub.SubMenus.Count > 0)
        {
            @RenderMenu(sub)
        }
        else
        {
            <li title="@sub.Name" style="cursor:pointer;user-select:none;" class="text-black rounded-3"
                @onclick="() =>{if(ignoreDuplicates.Contains(sub.Name)){ TabService.OpenTab(sub.Name, sub.type,ignoreDuplicate:true);}else{TabService.OpenTab(sub.Name, sub.type);}}">
                <Marquee text="@sub.Name" marqueeTextTriggerLength="7"/>
            </li>

        }
        }
        </ul>
    }
    </div>
    ;

    class MenuType
    {
        public string Name { get; set; }
        public string Path { get; set; }
        public bool IsExpanded { get; set; } = false;
        public Type? type { get; set; }
        public List<MenuType> SubMenus { get; set; }

        public MenuType(string name, string path,Type type = null)
        {
            Name = name;
            Path = path;
            this.type = type;
            SubMenus = new List<MenuType>();
        }
    }

    public void NavigateToPath(string path)
    {
        Navigation.NavigateTo(path);
    }


    Dictionary<int, MenuType> groupMenuOBJ = new Dictionary<int, MenuType>
{
    { 1, new MenuType("Customers", "#") {
        SubMenus = new List<MenuType> {
            new MenuType("Customer", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Add Customer", "/customer/add", typeof(CustomerAdd)),
                    new MenuType("Manage Users", "/customer/manage", typeof(CustomerView)),
                }
            },
            new MenuType("Vehicle", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Add", "/vehicle/add", typeof(VechicleAdd)),
                    new MenuType("Manage Vehicle", "/vehicle/details", typeof(VehicleDetails)),
                    new MenuType("Vehicle Makes", "/vehicleMake", typeof(VehicleMake)),
                    new MenuType("Vehicle Models", "/vehicleModel", typeof(VehicleModel)),
                }
            }
        }
    }},

    { 2, new MenuType("Inventory", "#") {
        SubMenus = new List<MenuType> {
            new MenuType("Purchase", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Add Purchase", "/purchase", typeof(AddPurchase)),
                    new MenuType("View Purchase", "/list/purchaseBills", typeof(ListPuchases)),
                }
            },
            new MenuType("Stock", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("View Stock", "/stock", typeof(ViewStock)),
                    //new MenuType("Stock Outward", "/stock/outward", typeof(StockOutward)),
                    //new MenuType("View Outwards", "/stock/viewOutwards", typeof(ViewStockOutwards)),
                    //new MenuType("Stock Inward", "/stock/inward", typeof(StockInward))
                }
            },
            new MenuType("Suppliers", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Add Supplier", "/supplier/add", typeof(AddSupplier)),
                    new MenuType("Manage Supplier", "/supplier/manage", typeof(ManageSupplier)),
                }
            },
        }
    }},

    { 3, new MenuType("Sales", "#") {
        SubMenus = new List<MenuType> {
            new MenuType("Product", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Add", "/product/add", typeof(AddProduct)),
                    new MenuType("Manage Product", "/product/details", typeof(ViewProducts)),
                    new MenuType("Manage Brand", "/brand/details", typeof(ViewBrand)),
                }
            },
            new MenuType("Billing", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Add Bill", "/billing", typeof(Billing)),
                    new MenuType("View Bill", "/bill/view", typeof(ListBills)),
                }
            }
        }
    }},
    { 4, new MenuType("Financial", "#") {
        SubMenus = new List<MenuType> {
            new MenuType("Recipt", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Add Recipt", "/receipt-entry", typeof(AddRecipt)),
                    new MenuType("List Recipt", "/receipt/view", typeof(ListReceipts)),
                }
            },
            new MenuType("Payment", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Add Payment", "/payment-entry", typeof(AddPayment)),
                    new MenuType("List Payment", "/payment/view", typeof(ListPayments)),
                }
            },
            new MenuType("Ledger", "#") {
                SubMenus = new List<MenuType> {
                    new MenuType("Ledger Entry","/ledger-entry", typeof(AddLedger)),
                    new MenuType("View Ledger", "/ledger", typeof(ViewLedger)),
                }
            },

        }
    }},

    { 5, new MenuType("Others", "#") {
        SubMenus = new List<MenuType> {

            new MenuType("Services", "/services", typeof(Services)),
            new MenuType("Credit Record", "/credit/details", typeof(ViewCredit)),
            new MenuType("Supplier Credit", "/supplier/credit", typeof(SupplierCreditRecordView)),

        }
    }},
    { 6, new MenuType("Reports", "#") {
        SubMenus = new List<MenuType> {

            new MenuType("Services", "/reports/service-reports", typeof(ServiceReoports)),
            // new MenuType("Credit Record", "/credit/details", typeof(ViewCredit)),
            // new MenuType("Supplier Credit", "/supplier/credit", typeof(SupplierCreditRecordView)),

        }
    }},
        {
            7,new MenuType("Restricted","#",typeof(ReducePayments))
        },
        {
            8,new MenuType("Sql Console","#",typeof(SqlConsole))
        }

};


    void MenuClicked(MenuType menuV)
    {
        try
        {
            
            if (menuV.SubMenus.Count == 0)
            {
                Debug.WriteLine("ignoreDuplicate = " + ignoreDuplicates.Contains(menuV.Name).ToString());
                if (ignoreDuplicates.Contains(menuV.Name))
				{

					// If the menu is one of the ignore duplicates, just navigate to the path
                    TabService.OpenTab(menuV.Name, menuV.type,ignoreDuplicate: true);
					return;
				}
                TabService.OpenTab(menuV.Name, menuV.type);
                //Navigation.NavigateTo(menuV.Path);
            }
            else
            {
                // var menu = groupMenuOBJ.Values.FirstOrDefault(m => m.Name == menuV.Name);
                // if (menu != null)
                // {
                //     menu.IsExpanded = !menu.IsExpanded;
                // }
                menuV.IsExpanded = !menuV.IsExpanded;
                StateHasChanged();
            }
        }
        catch(Exception e)
        {
            Debug.WriteLine(e.Message);
        }
        
        
    }

}
