@page "/settings/manageUser"
@inject IDatabaseHandler DatabaseHandler
@inject IToastService ToastService
@using BCrypt.Net
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="mb-3">Manage Users</h1>
        <button class="btn btn-primary" @onclick="()=>{addUser.showDialog = true;StateHasChanged();}">Add</button>
    </div>
    <h5 class="text-muted mb-4">This page is used to manage users</h5>
    <DialoBox dialogBox="editUser"></DialoBox>
    <DialoBox dialogBox="addUser"></DialoBox>
    <div class="table-responsive shadow rounded">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th scope="col">S.No</th>
                    <th scope="col">User Name</th>
                    <th scope="col">Branch</th>
                    <th scope="col" class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < users.Count; i++)
                {
                    var item = users[i];
                    <tr>
                        <td>@(i + 1)</td>
                        <td>@item.username</td>
                        <td>@item.branch</td>
                        <td class="text-center">
                            <button @onclick="()=>{HandleEdit(item);}" class="btn btn-sm btn-primary me-2">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button @onclick="()=>{HandleDelete(item);}" class="btn btn-sm btn-danger">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <Loader customText="@loaderText" show="@isLoading"></Loader>
</div>


@code{

    class Users
    {
        public string username { get; set; } = "";
        public string password { get; set; } = "";
        public string passwordHash { get; set; } = "";
        public string branch { get; set; } = "";
    }
    List<Users> users = new List<Users>();
    Users newUser = new Users(),oldUser = new Users();
    CustomDialogBox editUser,addUser;
    bool isEdit,isLoading;
    string loaderText = "Fetching Users...";
    public async Task LoadUsers()
    {
        users.Clear();
        string query = "SELECT * FROM Users";

        var res = await DatabaseHandler.ExecuteQueryAsync(query);

        if(res.Count > 0)
        {
            foreach(var row in res)
            {
                users.Add(new Users
				{
					username = row["Username"].ToString() ?? "",
					password = row["PasswordHash"].ToString() ?? "",
					branch = row["Branch"].ToString() ?? "",	
				});

            }

        }
    }
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        addUser = new CustomDialogBox
        {
                    body = @<EditForm Model="@newUser" OnValidSubmit="HandleSubmit">
        <h2 class="text-center mt-3">Create User</h2>
        <div class="mb-3">
            <label for="username" class="form-label">Username:</label>
            <input type="text" id="username" @bind="newUser.username" class="form-control" maxlength="255" required>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password:</label>
            <input type="password" id="password" @bind="newUser.password" class="form-control" maxlength="255" required>
        </div>
        <div class="mb-3">
            <label for="branch" class="form-label">Branch:</label>
            <select class="form-select" @bind="newUser.branch">
                <option>Sivakasi</option>
                <option>ByPass</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary w-100">Create User</button>
    </EditForm>
        ,
                Title = "Create User",
                OnCloase = EventCallback.Factory.Create(this, async () =>
                {
                    newUser = new Users();
                    oldUser = new Users();
                    isEdit = false;
                    addUser.showDialog = false;
                    StateHasChanged();
                }),
        };
        editUser = new CustomDialogBox
        {
            body = @<EditForm Model="@newUser" OnValidSubmit="HandleSubmit">
                <h2 class="text-center mt-3">Update User</h2>
                <div class="mb-3">
                    <label for="username" class="form-label">Username:</label>
            <input type="text" id="username" @bind="newUser.username" class="form-control" maxlength="255" required>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
            <input type="password" id="password" @bind="newUser.password" class="form-control" maxlength="255" required>
                </div>
                <div class="mb-3">
                    <label for="branch" class="form-label">Branch:</label>
            <select class="form-select" @bind="newUser.branch">
                <option>Sivakasi</option>
                <option>ByPass</option>
            </select>
                </div>
                <button type="submit" class="btn btn-primary w-100">Update User</button>
            </EditForm>
    ,
            Title = "Update User",
            OnCloase = EventCallback.Factory.Create(this, async () =>
            {
				newUser = new Users();
                oldUser = new Users();
                isEdit = false;
                editUser.showDialog = false;
                StateHasChanged();
            }),
        };
        await LoadUsers();
        isLoading = false;
        StateHasChanged();
    }

    public async Task HandleSubmit()
    {
        isLoading = true;
        loaderText = isEdit ? "Updating User..." : "Creating User...";
        try
        {
            if (isEdit)
            {
                string query = @"UPDATE Users set Username = @username, PasswordHash = @passhash, Branch = @Branch WHERE Username = @oldUsername and Branch = @oldBranch";
                var parameters = new Dictionary<string, object>
			{
				{ "@username", newUser.username },
				{ "@passhash", BCrypt.HashPassword(newUser.password) },
				{ "@Branch", newUser.branch },
				{ "@oldUsername", oldUser.username },
				{ "@oldBranch", oldUser.branch }
			};

                await DatabaseHandler.ExecuteNonQueryAsync(query, parameters);
                newUser = new Users();
                oldUser = new Users();
                isEdit = false;
                editUser.showDialog = false;
                StateHasChanged();
                ToastService.ShowToast("User updated successfully", ToastType.sucess);


            }
            else
            {
                string hashedPassword = BCrypt.HashPassword(newUser.password);

                string query = "INSERT INTO Users (Username, PasswordHash, Branch) VALUES (@username, @password, @branch)";
                var parameters = new Dictionary<string, object>
                {
                    { "@username", newUser.username },
                    { "@password", hashedPassword }, // Store hashed password
                    { "@branch", newUser.branch }
                };

                int rowsAffected = await DatabaseHandler.ExecuteNonQueryAsync(query, parameters);
                if (rowsAffected > 0)
                {
                    ToastService.ShowToast("User created successfully", ToastType.sucess);
                    newUser = new Users();
                    addUser.showDialog = false;
                    StateHasChanged();
                }
                else
                {
                    ToastService.ShowToast("Failed to create user", ToastType.error);
                }
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error updating user: {ex.Message}", ToastType.error);
        }
        isLoading = false;
        loaderText = "Fetching Users...";
        await LoadUsers();
        StateHasChanged();
    }
    void HandleEdit(Users user)
    {
        oldUser = user;
        newUser = new Users
		{
				username = user.username,
				password = "", // Password should not be pre-filled for security reasons
				branch = user.branch
		};
        isEdit = true;
        editUser.showDialog = true;
        StateHasChanged();
    }
    async void HandleDelete(Users user)
    {
        try
        {
            string query = @"DELETE FROM Users WHERE Username = @username AND Branch = @branch";
            int res = await DatabaseHandler.ExecuteNonQueryAsync(query, new Dictionary<string, object>
        {
            {"@username", user.username },
            { "@branch", user.branch }
        });
            if (res > 0)
            {
                ToastService.ShowToast("User deleted successfully", ToastType.sucess);
            }
            else
            {
                ToastService.ShowToast("Failed to delete user", ToastType.error);
            }
            await LoadUsers();
            StateHasChanged();
        }
        catch(Exception ex)
        {
			ToastService.ShowToast($"Error deleting user: {ex.Message}", ToastType.error);
        }

    }
}