@page "/customer/details"
@inject ICurrentData CurrentCustomer
@inject IDatabaseHandler DatabaseHandler
@inject NavigationManager Navigation
@inject IFormFactor FormFactor
@inject IPDFGenerator PDFGenerator
@inject IAlertService AlertService
@inject IJSRuntime JS
@inject ITabService TabService
@inject IToastService ToastService

@using System.Diagnostics

<div class="container mt-4">
	<DialoBox dialogBox="statementDialog"></DialoBox>
	<div class="card shadow-lg">
		<div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
			<h4 class="mb-0">Customer Details</h4>
			<button class="btn btn-sm btn-dark" @onclick="()=>{statementDialog.showDialog = true;StateHasChanged();}">💾 Download Statement</button>
		</div>
		<div class="card-body">
			<div class="row">
				<div class="col-md-6">
					<p><strong>Customer ID:</strong> @customerData.CustomerId</p>
					<p><strong>Name:</strong> @customerData.Name</p>
					<p><strong>Contact:</strong> @customerData.Contact</p>
					<p><strong>GSTIN:</strong> @customerData.GSTIN</p>
					<p><strong>Address:</strong> @customerData.Address</p>
					<p><strong>Area:</strong> @customerData.Area</p>
					<p><strong>City:</strong> @customerData.City</p>
					<p><strong>State:</strong> @customerData.State</p>
					<p><strong>Country:</strong> @customerData.Country</p>
					<p><strong>District:</strong> @customerData.District</p>
					<p><strong>PinCode:</strong> @customerData.PinCode</p>
					<p><strong>Nationality:</strong> @customerData.Nationality</p>
				</div>
				<div class="col-md-6">
					<p><strong>Email:</strong> @customerData.Email</p>
					<p><strong>SMS Allowed:</strong> @(customerData.IsSMSAllowed ? "Yes" : "No")</p>
					<p><strong>Email Allowed:</strong> @(customerData.IsEmailAllowed ? "Yes" : "No")</p>
					<p><strong>WhatsApp Allowed:</strong> @(customerData.IsWhatsAppAllowed ? "Yes" : "No")</p>
					<p><strong>Created By:</strong> @customerData.CreatedBy</p>
					<p><strong>Created At:</strong> @customerData.CreateAt</p>
					<p><strong>Updated By:</strong> @customerData.LastUpdatedBy</p>
					<p><strong>Last Updated At:</strong> @customerData.LastUpdatedAt</p>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="btn-group mt-4 ms-3" role="group" aria-label="Component Navigation">
	@foreach (ButtonType button in buttons)
	{
		<button type="button"
		class="btn btn-outline-primary @(currentComponent == button.componentNumber ? "active" : "")"
		disabled="@(currentComponent == button.componentNumber)"
		@onclick="() => SetCurrentComponent(button.componentNumber)">
			@button.Text
		</button>
	}
</div>
<Loader show="isLoading" customText="Fetching Customer"/>

@components[currentComponent]

@code
{
	public class ButtonType
	{
		public string Text { get; set; }
		public int componentNumber { get; set; }
	}
	[Parameter]
	public UserModal customerData { get; set; } = new UserModal();
	[Parameter] public bool isCredit { get; set; } = false;
	[Parameter] public bool isBill  {get;set;} = false;
	List<VehicleType> vehicles { get; set; } = new List<VehicleType>();
	List<BillDetails> bills { get; set; } = new List<BillDetails>();
	List<BillDetails> sivakasiBills { get; set; } = new List<BillDetails>();
	List<BillDetails> bypassBills { get; set; } = new List<BillDetails>();
	List<CreditRecord> creditRecords { get; set; } = new List<CreditRecord>();
	List<CreditReciptType> creditRecipts { get; set; } = new List<CreditReciptType>();
	List<CreditReciptType> sivakasiCreditRecipts { get; set; } = new List<CreditReciptType>();
	List<CreditReciptType> bypassCreditRecipts { get; set; } = new List<CreditReciptType>();
	RenderFragment vehiclesFront, recordsFront, billsFront,ReceiptFront;

	List<RenderFragment> components = new List<RenderFragment>();

	string statementBranch = "Sivakasi";

	CustomDialogBox statementDialog = new CustomDialogBox();

	List<ButtonType> buttons = new List<ButtonType>
	{
		new ButtonType{Text="Vehicles",componentNumber=0},
		new ButtonType{Text="Bills",componentNumber=1},
		new ButtonType{Text="Credit",componentNumber=2},
		new ButtonType{ Text = "Receipt",componentNumber=3}
	};
	bool isLoading = false;
	int currentComponent = 0;

	DateTime? startDate;
	DateTime? endDate;

	public void SetCurrentComponent(int index)
	{
		currentComponent = index;
		StateHasChanged();
	}

	protected override void OnInitialized()
	{

		statementDialog = new CustomDialogBox
				{
					Title = "Download Excel",
					body = @<div class="mb-4">
		<label class="form-label fw-bold">Select Start Date, and End Date</label>

		<div class="row g-3 align-items-end">
			<!-- Branch Dropdown -->


			<!-- Start Date -->
			<div class="col-md-6">
				<label for="startDate" class="form-label">Start Date</label>
				<input type="date" id="startDate" @bind="startDate" class="form-control" />
			</div>

			<!-- End Date -->
			<div class="col-md-6">
				<label for="endDate" class="form-label">End Date</label>
				<input type="date" id="endDate" @bind="endDate" class="form-control" />
			</div>
		</div>
	</div>



	,
			footers = new List<FooterBtn>
			{
				new FooterBtn
				{
					Button = @<button class="btn btn-danger" @onclick="()=>{statementDialog.showDialog = false; StateHasChanged();}">CANCEL</button>
                },
				new FooterBtn
				{
						  Button = @<button class="btn btn-primary" @onclick="()=>{DownloadStatement(startDate,endDate);}">OK</button>
	        	},
				},
				OnCloase = EventCallback.Factory.Create(this, async () =>
				{
				statementDialog.showDialog = false;


					StateHasChanged();
				}),
			};

		vehiclesFront =
			@<div class="container mt-4">
				<div class="card-header bg-primary text-white">
					<h4 class="mb-0">Vehicle Details</h4>
				</div>
				<div class="table-responsive">
					<table class="table table-striped table-bordered">
						<thead class="table-dark">
							<tr>
								<th>Vehicle No</th>
								<th>Vehicle Make</th>
								<th>Model Name</th>
							</tr>
						</thead>
						<tbody>
							@if (vehicles.Count == 0)
						{
							<tr>
								<td colspan="10" class="text-center text-muted">No Vehicle found.</td>
							</tr>
						}
						else
						{
							@foreach (var vehicleCustomer in vehicles)
						{
							<tr>
								<td>@vehicleCustomer.VehicleNo</td>
								<td>@vehicleCustomer.VehicleMake</td>
								<td>@vehicleCustomer.ModelName</td>
							</tr>
						}
						}
						</tbody>
					</table>
				</div>
			</div>;

		billsFront = @<div class="col-md-6 w-100">
                <div class="card shadow-lg mt-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Sivakasi Branch</h5>
                    </div>
                    <div class="card-body">
                        @if (sivakasiBills.Any())
                        {
                            <table class="table table-bordered table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Bill No</th>
                                        <th>Customer ID</th>
                                        <th>Name</th>
                                        <th>Mobile No</th>
                                        <th>Branch</th>
                                        <th>Vehicle No</th>
                                        <th>Bill Date</th>
                                        <th>Total</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var bill in sivakasiBills)
                                    {
                                        <tr>
                                            <td style="cursor:pointer;" @onclick="()=> ViewBill(bill)">@("SFR" + (bill.Bill.BillNo.ToString().PadLeft(4, '0')))</td>
                                            <td>@bill.Bill.CustomerID</td>
                                            <td>@bill.customer.Name</td>
                                            <td>@bill.customer.Contact</td>
                                            <td>@bill.Bill.Branch</td>
                                            <td>@bill.Bill.VehicleNo</td>
                                            <td>@bill.Bill.BillDate.ToString("yyyy-MM-dd")</td>
                                            <td>₹@(Math.Round(bill.Bill.TotalAmount))</td>
                                            <td>
                                                <button class="btn btn-sm btn-success" @onclick="() => DownloadBill(bill)">Download</button>
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="text-muted text-center">No records for Sivakasi.</p>
                        }
                    </div>
                </div>

		<div class="card shadow-lg mt-4">
			<div class="card-header bg-primary text-white">
				<h5 class="mb-0">ByPass Branch</h5>
			</div>
			<div class="card-body">
				@if (bypassBills.Any())
			{
				<table class="table table-bordered table-hover">
					<thead class="table-dark">
						<tr>
							<th>Bill No</th>
							<th>Customer ID</th>
							<th>Name</th>
							<th>Mobile No</th>
							<th>Branch</th>
							<th>Vehicle No</th>
							<th>Bill Date</th>
							<th>Total</th>
							<th>Actions</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var bill in bypassBills)
					{
						<tr>
							<td style="cursor:pointer;" @onclick="()=> ViewBill(bill)">@("BPR" + (bill.Bill.BillNo.ToString().PadLeft(4, '0')))</td>
							<td>@bill.Bill.CustomerID</td>
							<td>@bill.customer.Name</td>
							<td>@bill.customer.Contact</td>
							<td>@bill.Bill.Branch</td>
							<td>@bill.Bill.VehicleNo</td>
							<td>@bill.Bill.BillDate.ToString("yyyy-MM-dd")</td>
							<td>₹@(Math.Round(bill.Bill.TotalAmount))</td>
							<td>
								<button class="btn btn-sm btn-success" @onclick="() => DownloadBill(bill)">Download</button>
							</td>

						</tr>
					}
					</tbody>
				</table>
			}
			else
			{
				<p class="text-muted text-center">No records for ByPass.</p>
			}
			</div>
		</div>
            </div>;

		recordsFront = @<div class="container mt-4">
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>S. No</th>
                    <th>Bill No</th>
                    <th>Branch</th>
                    <th>Customer Name</th>
                    <th>Customer Mobile</th>
                    <th>Credit Amount</th>
                    <th>Paid Amount</th>
                    <th>Remaining Balance</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Created At</th>
                </tr>
            </thead>
            <tbody>
                @if (creditRecords.Count == 0)
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted">No Credit found.</td>
                    </tr>
                }
                else
                {
                    int sno = 1;
                    @foreach (var record in creditRecords)
                    {
                        <tr>
                            <td>@sno</td>
                            <td>@record.BillNo</td>
                            <td>@record.Branch</td>
                            <td>@record.Customer.Name</td>
                            <td>@record.Customer.Contact</td>
                            <td>@record.CreditAmount</td>
                            <td>@record.PaidAmount</td>
                            <td>@record.RemainingBalance</td>
                            <td>@record.DueDate</td>
                            <td>@record.Status</td>
                            <td>@record.CreatedAt</td>
                        </tr>
                        sno++;
                    }
                }
            </tbody>
        </table>
    </div>
</div>
	;

		ReceiptFront =@<div class="col-md-6 w-100">
		<div class="card shadow-lg mt-4">
			<div class="card-header bg-primary text-white">
				<h5 class="mb-0">Sivakasi Branch</h5>
			</div>
			<div class="card-body">
				@if (sivakasiCreditRecipts.Any())
			{
				<table class="table table-bordered table-hover">
					<thead class="table-dark">
						<tr>
							<th>Receipt ID</th>
							<th>Receipt Date</th>
							<th>Customer ID</th>
							<th>Name</th>
							<th>Total Amount Paid</th>

						</tr>
					</thead>
					<tbody>
						@foreach (var bill in sivakasiCreditRecipts)
					{
						<tr>
							<td style="cursor:pointer;">@("R_SFR" + (bill.ReceiptId.ToString().PadLeft(7, '0')))</td>
							<td>@bill.ReciptDate.ToString("dd-MMM-yyyy")</td>
							<td>@bill.customer.CustomerId</td>
							<td>@bill.customer.Name</td>

							<td>₹@bill.TotalAmountPaid</td>



						</tr>
					}
					</tbody>
				</table>
			}
			else
			{
				<p class="text-muted text-center">No receipts for Sivakasi.</p>
			}
			</div>
		</div>

		<div class="card shadow-lg mt-4">
			<div class="card-header bg-primary text-white">
				<h5 class="mb-0">ByPass Branch</h5>
			</div>
			<div class="card-body">
				@if (bypassCreditRecipts.Any())
			{
				<table class="table table-bordered table-hover">
					<thead class="table-dark">
						<tr>
							<th>Receipt ID</th>
							<th>Receipt Date</th>
							<th>Customer ID</th>
							<th>Name</th>
							<th>Total Amount Paid</th>

						</tr>
					</thead>
					<tbody>
						@foreach (var bill in bypassCreditRecipts)
					{
						<tr>
							<td style="cursor:pointer;">@("R_SFR" + (bill.ReceiptId.ToString().PadLeft(7, '0')))</td>
							<td>@bill.ReciptDate.ToString("dd-MMM-yyyy")</td>
							<td>@bill.customer.CustomerId</td>
							<td>@bill.customer.Name</td>

							<td>₹@bill.TotalAmountPaid</td>



						</tr>
					}
					</tbody>
				</table>
			}
			else
			{
				<p class="text-muted text-center">No receipt for ByPass.</p>
			}
			</div>
		</div>
	</div>
	;

		components.Add(vehiclesFront);
		components.Add(billsFront);
		components.Add(recordsFront);
		components.Add(ReceiptFront);

		if(isCredit)
		{
			currentComponent = 2;
		}
		if(isBill)
		{
			currentComponent = 1;
		}



	}

	private void ViewBill(BillDetails bill)
	{
		string billNo = (bill.Bill.Branch == "Sivakasi" ? "SFR" : "BPR") + bill.Bill.BillNo.ToString().PadLeft(4, '0');
		Dictionary<string,dynamic> Parameters = new Dictionary<string, dynamic>
			{
			{"billData",bill}
			};
		TabService.OpenWithParameter("View Bill No: " + billNo, typeof(BillView), Parameters);
	}

	async void DownloadBill(BillDetails data)
	{
		if (FormFactor.GetFormFactor() == "Web")
		{
			string path = await PDFGenerator.GeneratePdfAsync(data, JS);
			await AlertService.ShowAlertAsync("Download PDF", path, "OK");
		}
		else
		{
			string path = await PDFGenerator.GeneratePdfAsync(data, null);
			await AlertService.ShowAlertAsync("Download PDF", path, "OK");
		}

	}

	public List<CustomerStatement> createLedgers()
	{
		List<CustomerStatement> customerStatements = new();
		List<BillDetails> neededBills = sivakasiBills;
		List<CreditReciptType> neededReceipts = sivakasiCreditRecipts;

		neededBills.Sort((a, b) => a.Bill.BillDate.CompareTo(b.Bill.BillDate));
		neededReceipts.Sort((a, b) => a.ReciptDate.CompareTo(b.ReciptDate));

		int i = 0, j = 0;

		while (i < neededBills.Count && j < neededReceipts.Count)
		{
			var billDate = neededBills[i].Bill.BillDate;
			var receiptDate = neededReceipts[j].ReciptDate;

			if (billDate <= receiptDate)
			{
				var bill = neededBills[i++];

				// Always add the bill entry
				customerStatements.Add(new CustomerStatement
					{
						date = bill.Bill.BillDate,
						credit = bill.Bill.TotalAmount,
						debit = 0,
						particulars = "To sales for Bill No: " + bill.Bill.BillNo,
						accountType = "SALES A/C",
						type = TransactionType.BILL.ToString()
					});

				// Add immediate payment if any
				if (bill.BillPayment.CashAmount > 0)
				{
					customerStatements.Add(new CustomerStatement
						{
							date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
							credit = 0,
							debit = bill.BillPayment.CashAmount,
							particulars = "By cash received for Bill No: " + bill.Bill.BillNo,
							accountType = "CASH A/C",
							type = TransactionType.RECEIPT.ToString()
						});
				}
				if (bill.BillPayment.CardAmount > 0)
				{
					customerStatements.Add(new CustomerStatement
						{
							date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
							credit = 0,
							debit = bill.BillPayment.CardAmount,
							particulars = "By card received for Bill No: " + bill.Bill.BillNo,
							accountType = "CARD A/C",
							type = TransactionType.RECEIPT.ToString()
						});
				}
				if (bill.BillPayment.UPIAmount > 0)
				{
					customerStatements.Add(new CustomerStatement
						{
							date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
							credit = 0,
							debit = bill.BillPayment.UPIAmount,
							particulars = "By upi received for Bill No: " + bill.Bill.BillNo,
							accountType = "BANK A/C",
							type = TransactionType.RECEIPT.ToString()
						});
				}
				// if (bill.BillPayment.BankAmount > 0)
				// {
				// 	customerStatements.Add(new CustomerStatement
				// 		{
							//date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
				// 			credit = bill.BillPayment.BankAmount,
				// 			debit = 0,
				// 			particulars = "By credit for Bill No: " + bill.Bill.BillNo,
				// 			accountType = "CUSTOMER CREDIT A/C",
				// 			type = TransactionType.RECEIPT.ToString()
				// 		});
				// }

			}
			else
			{
				var receipt = neededReceipts[j++];

				customerStatements.Add(new CustomerStatement
					{
						date = receipt.ReciptDate,
						credit = 0,
						debit = receipt.TotalAmountPaid,
						particulars = "By receipt for Receipt No: " + receipt.ReceiptNO,
						accountType = "RECEIPT A/C",
						type = TransactionType.RECEIPT.ToString()
					});
			}
		}

		// Add remaining bills
		while (i < neededBills.Count)
		{
			var bill = neededBills[i++];

			customerStatements.Add(new CustomerStatement
				{
					date = bill.Bill.BillDate,
					credit = bill.Bill.TotalAmount,
					debit = 0,
					particulars = "To sales for Bill No: " + bill.Bill.BillNo,
					accountType = "SALES A/C",
					type = TransactionType.BILL.ToString()
				});

			if (bill.BillPayment.CashAmount > 0)
			{
				customerStatements.Add(new CustomerStatement
					{
						date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
						credit = 0,
						debit = bill.BillPayment.CashAmount,
						particulars = "By cash received for Bill No: " + bill.Bill.BillNo,
						accountType = "CASH A/C",
						type = TransactionType.RECEIPT.ToString()
					});
			}
			if (bill.BillPayment.CardAmount > 0)
			{
				customerStatements.Add(new CustomerStatement
					{
						date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
						credit = 0,
						debit = bill.BillPayment.CardAmount,
						particulars = "By card received for Bill No: " + bill.Bill.BillNo,
						accountType = "CARD A/C",
						type = TransactionType.RECEIPT.ToString()
					});
			}
			if (bill.BillPayment.UPIAmount > 0)
			{
				customerStatements.Add(new CustomerStatement
					{
						date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
						credit = 0,
						debit = bill.BillPayment.UPIAmount,
						particulars = "By upi received for Bill No: " + bill.Bill.BillNo,
						accountType = "BANK A/C",
						type = TransactionType.RECEIPT.ToString()
					});
			}
			// if (bill.BillPayment.BankAmount > 0)
			// {
			// 	customerStatements.Add(new CustomerStatement
			// 		{
						//date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
			// 			credit = bill.BillPayment.BankAmount,
			// 			debit = 0,
			// 			particulars = "By credit for Bill No: " + bill.Bill.BillNo,
			// 			accountType = "CUSTOMER CREDIT A/C",
			// 			type = TransactionType.RECEIPT.ToString()
			// 		});
			// }
		}

		// Add remaining receipts
		while (j < neededReceipts.Count)
		{
			var receipt = neededReceipts[j++];

			customerStatements.Add(new CustomerStatement
				{
					date = receipt.ReciptDate,
					credit = 0,
					debit = receipt.TotalAmountPaid,
					particulars = "By receipt for Receipt No: " + receipt.ReceiptNO,
					accountType = "RECEIPT A/C",
					type = TransactionType.RECEIPT.ToString()
				});
		}

		// Optional: sort again in case dates are equal or include time later
		customerStatements.Sort((a, b) => a.date.CompareTo(b.date));

		return customerStatements;
	}

	public async Task<decimal> GetOpeningBalanceAsync(List<CustomerStatement> customerStatements, DateTime? statementStartDate)
	{
		// 	string query = @"
		//        SELECT COALESCE(SUM(CrAmount - DrAmount), 0) AS OpeningBalance
		//        FROM CashBankLedger
		//        WHERE ForWho = @customerId AND Date < @startDate AND AccountID not in(14) Order By Date;";

		// 	var parameters = new Dictionary<string, object>
		// {
		// 	{ "@customerId", customerId },
		// 	{ "@startDate", statementStartDate.Value.Date.ToString("yyyy-MM-dd") }
		// };

		// 	var result = await DatabaseHandler.ExecuteQueryAsync(query, parameters);

		// 	return result.Count > 0 ? Convert.ToDecimal(result[0]["OpeningBalance"]) : 0;
		if (statementStartDate == null)
			return 0;

		// Filter only entries before the statementStartDate
		var priorEntries = customerStatements
			.Where(cs => cs.date < statementStartDate)
			.ToList();

		decimal openingBalance = 0;

		foreach (var entry in priorEntries)
		{
			if (entry.accountType == "SALES A/C")
			{
				openingBalance += entry.credit; // Customer owes us more
			}
			else if (entry.accountType == "CASH A/C" || entry.accountType == "BANK A/C" || entry.accountType == "CARD A/C")
			{
				openingBalance -= entry.debit; // Customer paid us
			}
			else if (entry.accountType == "RECEIPT A/C")
			{
				openingBalance -= entry.debit; // Receipt is money received, reduce the balance
			}
		}

		return openingBalance;


	}

	async void DownloadStatement(DateTime? startDate,DateTime? endDate)
	{
		List<CustomerStatement> customerStatements = createLedgers(); ;

		decimal openingBalance = await GetOpeningBalanceAsync(customerStatements, startDate);
		if (startDate != null && endDate != null)
		{
			customerStatements = customerStatements
				.Where(x => x.date >= startDate && x.date <= endDate)
				.ToList();
		}
		

		
		if (customerStatements.Count > 0)
		{
			
			string path = await PDFGenerator.GenerateCustomerStatement(customerStatements,openingBalance,customerData);

			ToastService.ShowToast($"SavedAt = {path}", ToastType.sucess);
		}
		else
		{
			ToastService.ShowToast("No Records There", ToastType.info);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		vehicles.Clear();
		creditRecords.Clear();
		bills.Clear();
		creditRecipts.Clear();
		bills = await DatabaseHandler.GetCustomerBillsAsync(customerData.CustomerId);

		sivakasiBills = bills.Where((b => b.Bill.Branch == "Sivakasi")).ToList();
		bypassBills = bills.Where((b => b.Bill.Branch == "ByPass")).ToList();
		string query = $@"
    SELECT *
    FROM Vehicle
    WHERE CustomerID = '{customerData.CustomerId}'";

		var res = await DatabaseHandler.ExecuteQueryAsync(query);
		if (res.Count > 0)
		{
			foreach (var row in res)
			{
				vehicles.Add(new VehicleType
					{
						CustomerID = row["CustomerID"].ToString() ?? "",
						VehicleNo = row["VehicleNo"].ToString() ?? "",
						VehicleMake = row["VehicleMake"].ToString() ?? "",
						MfgYear = Int32.Parse(row["MfgYear"].ToString() ?? "0"),
						ModelName = row["ModelName"].ToString() ?? "",
						Description = row["Description"].ToString() ?? "",
						CreateAt = row["CreateAt"].ToString() ?? "",
						CreatedBy = row["CreatedBy"].ToString() ?? "",
						LastUpdatedAt = row["LastUpdatedAt"].ToString() ?? "",
						LastUpdatedBy = row["LastUpdatedBy"].ToString() ?? ""
					});


			}
		}

		string creditQuery = $"SELECT c.*,b.* FROM CreditRecord c JOIN Bills b ON b.BillID = c.BillID WHERE c.CustomerID = '{customerData.CustomerId}'";
		var res1 = await DatabaseHandler.ExecuteQueryAsync(creditQuery);
		if(res1.Count > 0)
		{
			foreach(var row in res1)
			{
				creditRecords.Add(new CreditRecord
					{
						CreditID = Convert.ToUInt64(row["CreditID"]),
						CustomerID = row["CustomerID"].ToString() ?? "",
						BillNo = row["BillNo"].ToString() ?? "",
						Branch = row["Branch"].ToString() ?? "",
						BillID = row["BillID"] == DBNull.Value ? null : Convert.ToUInt64(row["BillID"]),
						CreditAmount = Convert.ToDecimal(row["CreditAmount"]),
						PaidAmount = Convert.ToDecimal(row["PaidAmount"]),
						RemainingBalance = row["RemainingBalance"] == DBNull.Value ? null : Convert.ToDecimal(row["RemainingBalance"]),
						DueDate = Convert.ToDateTime(row["DueDate"]),
						Status = row["Status"].ToString() ?? "",
						CreatedAt = Convert.ToDateTime(row["CreatedAt"]),
						Customer = customerData
					});
			}
		}
		creditRecipts = await DatabaseHandler.GetCreditReceipts(true, customerData.CustomerId);
		sivakasiCreditRecipts = creditRecipts.Where((cr) => cr.Branch == "Sivakasi").ToList();
		bypassCreditRecipts = creditRecipts.Where((cr) => cr.Branch == "ByPass").ToList();
		Debug.WriteLine(vehicles.Count);
		Debug.WriteLine(bills.Count);
		Debug.WriteLine(creditRecords.Count);
		Debug.WriteLine(creditRecipts.Count);
		isLoading = false;
	}
}
