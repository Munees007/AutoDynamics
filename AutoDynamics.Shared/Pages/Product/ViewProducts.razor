@page "/product/details"
@inject IDatabaseHandler DatabaseHandler
@inject ICurrentData CurrentData
@inject NavigationManager Navigation
@inject ITabService TabService
<h1 class="text-center mt-3">Product Deatils</h1>
<div class="col-md-12 mb-3">

    <select class="form-select form-select-md" @bind="selectedBrand">
        <option value="">Select a Filter Option</option>
        <option value="size">Size</option>
        <option value="brand">Brand</option>
        <option value="pattern">Pattern</option>
        <option value="hsn">HSNCode</option>
        <option value="type">Type</option>
    </select>
</div>

<div class="col-md-12">
    <input type="text" @oninput="(e)=>{FilterProduct(e);}" class="form-control" placeholder="Search by Product Id, Name" />
</div>
<div class="container mt-4">
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Product ID</th>
                    <th>HSNCode</th>

                    <th>Tyre For</th>
                    <th>Brand ID</th>
                    <th>Brand</th>
                    <th>Size</th>
                    <th>Pattern</th>
                    <th>Tube or Tubeless</th>
                    <th>Price</th>

                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredProducts.Count == 0)
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted">No customers found.</td>
                    </tr>
                }
                else
                {
                    @foreach (var product in filteredProducts)
                    {
                        <tr>
                            <td>@product.ProductID</td>
                            <td>@product.HSNCode</td>
                            <td>@product.tyreFor.ToString()</td>
                            <td>@product.BrandID</td>
                            <td>@product.Brand</td>
                            <td>@product.Size</td>
                            <td>@product.Pattern</td>
                            <td>@product.TubeOrTubeless</td>
                            <td>@product.Price</td>

                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => ViewProduct(product)">View</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => UpdateProduct(product)">Update</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.ProductID)">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
<Loader show="isLoading" customText="Fetching Products"/>
@code {
    List<ProductType> products = new List<ProductType>();

    List<ProductType> filteredProducts = new List<ProductType>();

    List<BrandType> Brands = new List<BrandType>();
    bool isLoading = false;
    string selectedBrand = "";

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await FetchData();
        StateHasChanged();
        isLoading = false;
    }
    void FilterProduct(ChangeEventArgs e)
    {
        string text = e.Value.ToString();

        if (!string.IsNullOrEmpty(text))
        {
            if (selectedBrand == "size")
            {
                filteredProducts = products
                    .Where(p => p.Size.Contains(text, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else if (selectedBrand == "brand")
            {
                filteredProducts = products
                    .Where(p => p.Brand.Contains(text, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else if (selectedBrand == "pattern")
            {
                filteredProducts = products
                    .Where(p => p.Pattern.Contains(text, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else if (selectedBrand == "hsn")
            {
                filteredProducts = products
                    .Where(p => p.HSNCode.Contains(text, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else if (selectedBrand == "type")
            {
                filteredProducts = products
                    .Where(p => p.tyreFor.ToString().Contains(text, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else
            {
                // default: search in all fields
                filteredProducts = products;
            }
        }


        StateHasChanged();
    }
    public async Task FetchData()
    {
        products.Clear();
        filteredProducts.Clear();
        string fetchQuery = "SELECT * FROM Product";

        var result = await DatabaseHandler.ExecuteQueryAsync(fetchQuery);
        if (result.Count > 0)
        {
            foreach (var row in result)
            {
                products.Add(new ProductType
                {
                    ProductID = row["ProductID"].ToString() ?? "",
                    HSNCode = row["HSNCode"].ToString() ?? "",
                    Brand = row["Brand"].ToString() ?? "",
                    BrandID = row["BrandID"].ToString() ?? "",
                    Size = row["Size"].ToString() ?? "",
                    Pattern = row["Pattern"].ToString() ?? "",
                    TubeOrTubeless = row["TubeOrTubeless"].ToString() ?? "",
                    Price = Double.Parse(row["Price"].ToString() ?? "0"),
                    CreateAt = row["CreateAt"].ToString() ?? "",
                    CreatedBy = row["CreatedBy"].ToString() ?? "",
                    LastUpdatedAt = row["LastUpdatedAt"].ToString() ?? "",
                    LastUpdatedBy = row["LastUpdatedBy"].ToString() ?? "",
                    tyreFor = Enum.TryParse<TyreFor>(row["TyreFor"].ToString() ?? "", out var tyreFor) ? tyreFor : TyreFor.FOUR_WHEELER
                });
                Brands.Add(new BrandType
                {
                    BrandID = row["BrandID"].ToString() ?? "",
                    BrandName = row["Brand"].ToString() ?? ""
                });
            }
            filteredProducts = products;
            Brands = Brands.DistinctBy(b => b.BrandName).ToList();
        }


    }

    public void ViewProduct(ProductType data)
    {
        string productName = $"Viewing: {data.Brand} - {data.Size} {data.Pattern} ({data.TubeOrTubeless})";
        Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
        {
            {"product",data}
        };
        TabService.OpenWithParameter(productName, typeof(ViewSingleProduct), Parameters);
    }

    public void UpdateProduct(ProductType data)
    {
        string productName = $"Updating: {data.Brand} - {data.Size} {data.Pattern} ({data.TubeOrTubeless})";
        Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
        {
            {"data",data}
        };
        TabService.OpenWithParameter(productName, typeof(ProductUpdate), Parameters);
    }

    public async Task DeleteProduct(string productID)
    {
        string deleteQuery = $"DELETE FROM Product WHERE ProductID = '{productID}'";

        await DatabaseHandler.ExecuteQueryAsync(deleteQuery);

        await FetchData();

        StateHasChanged();
    }
}