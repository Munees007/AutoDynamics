@page "/brand/details"
@inject IDatabaseHandler DatabaseHandler
@inject ICurrentData CurrentData
@inject NavigationManager Navigation
@inject ITabService TabService
<h1 class="text-center mt-3">Brand lists</h1>

<div class="container mt-4">
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Brand ID</th>
                    <th>Brand Short Form</th>
                    <th>Brand Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (brands.Count == 0)
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted">No customers found.</td>
                    </tr>
                }
                else
                {
                    @foreach (var brand in brands)
                    {
                        <tr>
                            <td>@brand.BrandID</td>
                            <td>@brand.BrandShortForm</td>
                            <td>@brand.BrandName</td>

                            <td>

                                <button class="btn btn-danger btn-sm" @onclick="() => UpdateProduct(brand)">Update</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(brand.BrandID)">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
<Loader show="isLoading" customText="Fetching Brands"/>
@code {
    List<BrandType> brands = new List<BrandType>();
    bool isLoading = false;
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await FetchData();
        StateHasChanged();
        isLoading = false;
    }

    public async Task FetchData()
    {
        brands.Clear();
        string fetchQuery = "SELECT * FROM Brands";

        var result = await DatabaseHandler.ExecuteQueryAsync(fetchQuery);
        if (result.Count > 0)
        {
            foreach (var row in result)
            {
                brands.Add(new BrandType
                    {
                        BrandID = row["BrandID"].ToString() ?? "",
                        BrandShortForm = row["BrandShortForm"].ToString() ?? "",
                        BrandName = row["BrandName"].ToString() ?? "",

                    });
            }
        }

    }


    public void UpdateProduct(BrandType data)
    {
        Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
        {
            {"data",data }    
        };
        TabService.OpenWithParameter("Update Brand",typeof(UpdateBrand),Parameters);
        
    }

    public async Task DeleteProduct(string brandID)
    {
        string deleteQuery = $"DELETE FROM Brands WHERE BrandID = '{brandID}'";

        await DatabaseHandler.ExecuteQueryAsync(deleteQuery);
        await FetchData();
        StateHasChanged();
    }
}