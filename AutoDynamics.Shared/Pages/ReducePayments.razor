@page "/reduce_payments"
@inject IDatabaseHandler DatabaseHandler
@inject IToastService ToastService

<h3>Reduce System Payments</h3>

<div class="mb-3">
    <input placeholder="Enter Supplier ID" @bind="supplierID" class="form-control w-50" />
    <button class="btn btn-primary mt-2" @onclick="SimulateReduction">Preview Reduction</button>
</div>

@if (previewResults?.Count > 0)
{
    <h4>Reduction Preview</h4>
    <table class="table table-bordered table-striped">
        <thead class="table-dark">
            <tr>
                <th>Credit ID</th>
                <th>Bill No</th>
                <th>Initial Paid</th>
                <th>Deducted</th>
                <th>New Paid</th>
                <th>Payment Amount</th>
                <th>Payment Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in previewResults.GroupBy(x => new { x.PaymentDate, x.PaymentAmount }))
            {
                <tr class="table-primary">
                    <td colspan="7">
                        <strong>Payment:</strong> ₹@group.Key.PaymentAmount |
                        <strong>Date:</strong> @group.Key.PaymentDate
                    </td>
                </tr>
                @foreach (var item in group)
                {
                    <tr>
                        <td>@item.CreditID</td>
                        <td>@item.BillNo</td>
                        <td>@item.InitialPaid</td>
                        <td>@item.Deducted</td>
                        <td>@item.NewPaid</td>
                        <td>@item.PaymentAmount</td>
                        <td>@item.PaymentDate</td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <p><strong>Total Applied:</strong> ₹@totalApplied</p>
    <button class="btn btn-success" @onclick="ApplyReduction">Apply Reduction</button>
}

@code {
    string supplierID;
    decimal totalApplied = 0;

    class ReductionPreview
    {
        public int CreditID { get; set; }
        public string BillNo { get; set; }
        public decimal InitialPaid { get; set; }
        public decimal Deducted { get; set; }
        public decimal NewPaid => InitialPaid + Deducted;
        public decimal PaymentAmount { get; set; }
        public string PaymentDate { get; set; }
    }

    List<ReductionPreview> previewResults = new();

    async Task SimulateReduction()
    {
        try
        {
            previewResults.Clear();
            totalApplied = 0;

            // Fetch system payments (not linked to PaymentBills)
            var paymentQuery = @"
                SELECT PaymentID, PaymentDate, TotalAmountPaid
                FROM Payments
                WHERE SupplierID = @supplierId
                  AND PaymentID NOT IN (SELECT PaymentID FROM PaymentBills)
                ORDER BY PaymentDate ASC";

            var creditQuery = @"
                SELECT scr.SupplierCreditID, scr.PaidAmount, pb.BillNo,scr.CreditAmount
                FROM SupplierCreditRecord scr
                JOIN PurchaseBills pb ON scr.PurchaseBillID = pb.PurchaseBillID
                WHERE scr.SupplierID = @supplierId
                ORDER BY pb.BillNo ASC";

            var parameters = new Dictionary<string, object> { { "@supplierId", supplierID } };

            var payments = await DatabaseHandler.ExecuteQueryAsync(paymentQuery, parameters);
            var credits = await DatabaseHandler.ExecuteQueryAsync(creditQuery, parameters);

            if (payments.Count == 0 || credits.Count == 0)
            {
                ToastService.ShowToast("No payments or credits found.", ToastType.info);
                return;
            }

            int creditIndex = 0;

            foreach (var payment in payments)
            {
                decimal paymentLeft = Convert.ToDecimal(payment["TotalAmountPaid"]);
                string payDate = Convert.ToDateTime(payment["PaymentDate"]).ToString("yyyy-MM-dd");

                while (paymentLeft > 0 && creditIndex < credits.Count)
                {
                    var credit = credits[creditIndex];
                    decimal paid = Convert.ToDecimal(credit["PaidAmount"]);
                    decimal remainingBalance = Convert.ToDecimal(credit["CreditAmount"]) - paid;
                    if (remainingBalance <= 0)
                    {
                        creditIndex++;
                        continue;
                    }

                    decimal deduction = Math.Min(remainingBalance, paymentLeft);

                    previewResults.Add(new ReductionPreview
                        {
                            CreditID = Convert.ToInt32(credit["SupplierCreditID"]),
                            BillNo = Convert.ToString(credit["BillNo"]),
                            InitialPaid = paid,
                            Deducted = deduction,
                            PaymentAmount = Convert.ToDecimal(payment["TotalAmountPaid"]),
                            PaymentDate = payDate
                        });

                    credits[creditIndex]["PaidAmount"] = paid + deduction;

                    totalApplied += deduction;
                    paymentLeft -= deduction;

                    decimal currentPaid = (decimal)credits[creditIndex]["PaidAmount"];
                    decimal creditAmount = Convert.ToDecimal(credit["CreditAmount"]);

                    if (currentPaid >= creditAmount)
                        creditIndex++;

                }
            }

            if (totalApplied == 0)
            {
                ToastService.ShowToast("No deductions applied. All credits are at 0.", ToastType.info);

               

            }
            decimal totalCredits = credits.Sum(c => Convert.ToDecimal(c["CreditAmount"]));
            decimal totalPaid = credits.Sum(c => Convert.ToDecimal(c["PaidAmount"]));
            decimal remainingTotal = totalCredits - totalPaid;

            Console.WriteLine($"Remaining Credit: {remainingTotal}");
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Error: " + ex.Message, ToastType.error);
        }
    }

    async Task ApplyReduction()
    {
        try
        {
            foreach (var item in previewResults)
            {
                string updateQuery = @"
                    UPDATE SupplierCreditRecord
                    SET PaidAmount = PaidAmount + @deducted
                    WHERE SupplierCreditID = @creditId";

                var updateParams = new Dictionary<string, object>
                {
                    { "@deducted", item.Deducted },
                    { "@creditId", item.CreditID }
                };

                await DatabaseHandler.ExecuteNonQueryAsync(updateQuery, updateParams);
            }

            ToastService.ShowToast("System payments reduced successfully.", ToastType.sucess);
            previewResults.Clear();
            totalApplied = 0;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Error applying reduction: " + ex.Message, ToastType.error);
        }
    }
}
