@page "/stock/viewOutwards"
@using System.Diagnostics
@inject IDatabaseHandler DatabaseHandler
@inject IToastService ToastService
@inject IMyLocalStorageService MyLocalStorageService
@inject ITabService TabService
<div class="container my-4">

    <div class="d-flex justify-content-between align-items-center">
        <h2 class="mb-4 text-primary">
            <i class="bi bi-hourglass-split me-2"></i>Stock Outwards
        </h2>


    </div>


    @if (filterOutwards.Count == 0)
    {
        <div class="alert alert-warning text-center">No stock Outwards.</div>
    }
    else
    {
        <table class="table table-bordered table-hover align-middle shadow-sm">
            <thead class="table-primary text-center">
                <tr>
                    <th>From</th>
                    <th>To</th>
                    <th>Created By</th>
                    <th>Created Date</th>

                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var outward in filterOutwards)
                {
                    <tr>
                        <td>@outward.From</td>
                        <td>@outward.To</td>
                        <td>@outward.CreatedBy</td>
                        <td>@outward.CreatedDate.ToString("dd-MM-yyyy")</td>

                        <td>
                            <button class="btn btn-outline-info btn-sm me-2"
                            @onclick="()=>{currentOutward = outward; itemsDialogBox.showDialog = true; StateHasChanged();}">
                                <i class="bi bi-eye"></i> View
                            </button>
                            <button class="btn btn-outline-danger btn-sm me-2"
                            @onclick="()=>{Update(outward);}">
                                <i class="bi bi-eye"></i> Update
                            </button>
                            @* @if (filterStatus == Status.Pending) *@
                            @* { *@
                            @*     <button class="btn btn-outline-success btn-sm" *@
                            @*             @onclick="()=> Accept(inward)"> *@
                            @*         <i class="bi bi-check-circle"></i> Accept *@
                            @*     </button> *@
                            @* } *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


    <Loader show="isLoading" customText="Fetching Outwards"/>

<DialoBox dialogBox="itemsDialogBox" />


@code {
    List<StockOutwardType> stockOutwards { set; get; } = new();



    List<StockOutwardType> filterOutwards { get; set; } = new();

    //Status filterStatus = Status.Pending;

    bool isLoading = false;
    StockOutwardType currentOutward = new();

    CustomDialogBox itemsDialogBox;

    string currentBranch = "";
    string userName = "";



    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        currentBranch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";
        userName = await MyLocalStorageService.GetItemAsync("Username") ?? "";
        itemsDialogBox = new CustomDialogBox
                {
                    Title = $"Outward Items",
                    body = @<div>
                    <p class="text-primary">Outward at @currentOutward.CreatedDate.ToString("dddd, dd MMMM yyyy")</p>
                    <table class="table table-striped table-hover table-bordered align-middle">
                    
    <thead class="table-dark">
        <tr>
            <th>Product</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in currentOutward.Outwards)
        {
            <tr>
                <td>@item.Product.Brand - @item.Product.Size @item.Product.Pattern @item.Product.TubeOrTubeless</td>
                <td>@item.Quantity</td>
            </tr>
        }
        </tbody>
    </table>
    </div>

    ,
            OnCloase = EventCallback.Factory.Create(this, () =>
            {
                itemsDialogBox.showDialog = false;
                StateHasChanged();
            })

        };
        try
        {
            stockOutwards = await DatabaseHandler.GetStockOutward();
            Debug.WriteLine(currentBranch);
            stockOutwards = stockOutwards.Where(x => x.From == currentBranch).ToList();
            filterOutwards = stockOutwards;

        }
        catch (Exception e)
        {
            ToastService.ShowToast(e.Message, ToastType.error);
        }

        isLoading = false;
        StateHasChanged();
    }

    public void Update(StockOutwardType outward)
    {
        Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
        {
            {"updateStockOutward",outward}
        };
        TabService.OpenWithParameter("Update Stock",typeof(UpdateStockOutward), Parameters);
    }
}