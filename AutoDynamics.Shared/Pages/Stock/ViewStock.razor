@page "/stock"
@using System.Diagnostics
@inject IDatabaseHandler DatabaseHandler
@inject IAlertService AlertService
@inject IToastService ToastService
@inject IPDFGenerator PDFGenerator
@inject IMyLocalStorageService MyLocalStorageService
@inject NavigationManager Navigation
@inject ICurrentData CurrentData
@inject IJSRuntime JS
@inject IToastService ToastService
@inject IFormFactor FormFactor
@inject ITabService TabService
<div>
    <h3 class="text-center mb-4">Stock Details</h3>
    <DialoBox dialogBox="addDialog"></DialoBox>
    <div class="row mb-3">
        <div class="col-md-10">
            <input type="text" @oninput="(e)=>{FilterStock(e);}" class="form-control" placeholder="Search by Product Id, Name" />
        </div>
        @if (isAdmin)
        {
            <div class="col-md-2 d-flex align-items-center">
                <button class="btn h-100 btn-success btn-sm w-100" @onclick="() => {addDialog.showDialog = true; StateHasChanged();}">
                    Add
                </button>
            </div>}
    </div>

    <div class="row mt-3 mb-3">
        <div class="col-md-12">
            <select autocomplete="off"  class="form-select" @bind="ShowTable">
                <option value="both">Both</option>
                <option value="sivakasi">Sivakasi</option>
                <option value="bypass">ByPass</option>
            </select>
        </div>
    </div>

    <div class="row mt-3 mb-3">
        <div class="col-md-12">
            <select autocomplete="off" class="form-select" @bind="FilterOption">
                <option value="all">All</option>
                <option value="four">Four Wheeler</option>
                <option value="two">Two Wheeler</option>
                <option value="tube">Tube</option>
            </select>
        </div>
    </div>


    <div class="mb-3">

        @if (selectedSortOption == "range")
        {
            <input type="date" @bind="startDate" class="form-control mt-2" />
            <input type="date" @bind="endDate" class="form-control mt-2" />
        }
    </div>
    <div class="w-100 d-flex justify-content-between align-items-md-center">


    </div>
    @if (stockDetails == null || !stockDetails.Any())
    {
        <div class="alert alert-warning text-center">No billing records found.</div>
    }
    else
    {
        <div class="col">
            @if (showSivakasi)
            {
                <div class="col-md-6 w-100">
                    <div class="card shadow-lg">
                        <div class="card-header d-flex justify-content-between bg-primary text-white">
                            <h5 class="mb-0">Sivakasi Branch</h5>
                            <h5>Total = @sivakasiStockTotal</h5>
                        </div>
                        <div class="card-body">
                            @if (sivakasiStocks.Any())
                            {
                                int sno = 1;
                                <table class="table table-bordered table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>S. No.</th>
                                            <th>Product ID</th>
                                            <th>Brand</th>
                                            <th>Size</th>
                                            <th>Pattern</th>
                                            <th>Type</th>
                                            <th>Available Quantity</th>
                                            @if (isAdmin)
                                            {
                                                <th>Actions</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>

                                        @foreach (var stock in filteredSivakasiStocks)
                                        {

                                            <tr>
                                                <td style="cursor:pointer;">@(sno++)</td>
                                                <td>@stock.ProductID</td>
                                                <td>@stock.Product.Brand</td>
                                                <td>@stock.Product.Size</td>
                                                <td>@stock.Product.Pattern</td>
                                                <td>@stock.Product.TubeOrTubeless</td>
                                                <td>@stock.AvailableQuantity</td>
                                                @if (isAdmin)
                                                {
                                                    <td><button class="btn btn-outline-success" @onclick="()=> {CurrentStock = stock;availabeStockPreviously = stock.AvailableQuantity; updateDialog.showDialog = true;StateHasChanged();}">CHANGE</button></td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <DialoBox dialogBox="updateDialog"></DialoBox>
                            }
                            else
                            {
                                <p class="text-muted text-center">No records for Sivakasi.</p>
                            }
                        </div>
                    </div>
                </div>
            }
            @if (showByPass)
            {
                <div class="col-md-6 mt-5 w-100">
                    <div class="card shadow-lg">
                        <div class="card-header d-flex justify-content-between bg-success text-white">
                            <h5 class="mb-0">Bypass Branch</h5>
                            <h5>Total = @bypassStockTotal</h5>
                        </div>
                        <div class="card-body">
                            @if (bypassStocks.Any())
                            {
                                int sno = 1;
                                <table class="table table-bordered table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>S. No.</th>
                                            <th>Product ID</th>
                                            <th>Brand</th>
                                            <th>Size</th>
                                            <th>Pattern</th>
                                            <th>Type</th>
                                            <th>Available Quantity</th>
                                            @if(isAdmin)
                                            {
                                                <th>Actions</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var stock in filteredBypassStocks)
                                        {

                                            <tr>
                                                <td style="cursor:pointer;">@(sno++)</td>
                                                <td>@stock.ProductID</td>
                                                <td>@stock.Product.Brand</td>
                                                <td>@stock.Product.Size</td>
                                                <td>@stock.Product.Pattern</td>
                                                <td>@stock.Product.TubeOrTubeless</td>
                                                <td>@stock.AvailableQuantity</td>
                                                @if(isAdmin)
                                                {
                                                    <td><button class="btn btn-outline-success" @onclick="()=> {CurrentStock = stock;availabeStockPreviously = stock.AvailableQuantity; updateDialog.showDialog = true;StateHasChanged();}">CHANGE</button></td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <DialoBox dialogBox="updateDialog"></DialoBox>
                            }
                            else
                            {
                                <p class="text-muted text-center">No records for Bypass.</p>
                            }
                        </div>
                    </div>
                </div>
            }

        </div>
    }
</div>

@code {
    List<StockType> stockDetails = new();
    List<StockType> sivakasiStocks = new();
    List<StockType> bypassStocks = new();
    List<StockType> filteredSivakasiStocks = new();
    List<StockType> filteredBypassStocks = new();

    int sivakasiStockTotal = 0;
    int bypassStockTotal = 0;


    StockType CurrentStock = new();

    string filterOption = "all";
    string FilterOption
    {
        get => filterOption;
        set
        {
            filterOption = value;
            HandleFilterTable();
        }
    }

    string[] twoWheelerCodes = { "40114010", "40114020" };
    string[] fourWheelerCodes = { "40111010", "40112090", "40112010" };
    string[] tubeCodes = { "40139020"};

    int availabeStockPreviously = 0;

    bool isAdmin = false;
    string branch = "";
    bool showSivakasi = false;
    bool showByPass = false;
    string showTable = "both";
    string ShowTable
    {
        get => showTable;
        set
        {
            showTable = value;
            HandleSelectTable();
        }
    }
    string searchQuery = "";
    string selectedSortOption = "month";
    DateTime? startDate;
    DateTime? endDate;


    public CustomDialogBox updateDialog;
    public CustomDialogBox addDialog;

    private void HandleFilterTable()
    {
        sivakasiStockTotal = 0;
        bypassStockTotal = 0;
        if(filterOption == "all")
        {
            filteredSivakasiStocks = sivakasiStocks;
            filteredBypassStocks = bypassStocks;
        }
        else if(filterOption == "four")
        {
            filteredSivakasiStocks = sivakasiStocks.FindAll((s) => fourWheelerCodes.Contains(s.Product.HSNCode)).ToList();
            filteredBypassStocks = bypassStocks.FindAll((s) => fourWheelerCodes.Contains(s.Product.HSNCode)).ToList();
        }
        else if(filterOption == "two")
        {
            filteredSivakasiStocks = sivakasiStocks.FindAll((s) => twoWheelerCodes.Contains(s.Product.HSNCode)).ToList();
            filteredBypassStocks = bypassStocks.FindAll((s) => twoWheelerCodes.Contains(s.Product.HSNCode)).ToList();
        }
        else
        {
            filteredSivakasiStocks = sivakasiStocks.FindAll((s) => tubeCodes.Contains(s.Product.HSNCode)).ToList();
            filteredBypassStocks = bypassStocks.FindAll((s) => tubeCodes.Contains(s.Product.HSNCode)).ToList();
        }
        filteredSivakasiStocks.ForEach(s => sivakasiStockTotal += s.AvailableQuantity);
        filteredBypassStocks.ForEach(s => bypassStockTotal += s.AvailableQuantity);
        StateHasChanged();
    }
    private void HandleSelectTable()
    {
        Debug.WriteLine(showTable);
        if(showTable == "both")
        {
            showSivakasi = true;
            showByPass = true;
        }
        else if(showTable == "sivakasi")
        {
            showSivakasi = true;
            showByPass = false;
        }
        else
        {
            showSivakasi = false;
            showByPass = true;
        }
        StateHasChanged();
    }


    private async Task HandleUpdateClick()
    {
        
        string UpdateQuery = @"UPDATE Stock Set AvailableQuantity = @AvailableQuantity WHERE ProductID = @ProductID AND Branch = @Branch";
        Dictionary<string,object> param = new Dictionary<string, object>
        {
            {"@AvailableQuantity",CurrentStock.AvailableQuantity},
            {"@ProductID",CurrentStock.ProductID},
            {"@Branch",CurrentStock.Branch}
        };

        await DatabaseHandler.ExecuteQueryAsync(UpdateQuery, param);
        updateDialog.showDialog = false;
        ToastService.ShowToast("Sucessfully Updated", ToastType.sucess);
        // Add logic for what happens when the button is clicked.
    }
    protected override async Task OnInitializedAsync()
    {
        isAdmin = await MyLocalStorageService.GetItemAsync("IsAdmin") == "true" ? true : false;
        updateDialog = new CustomDialogBox
	    {
	    	Title = "Update Stock",
	    	body = 
    @<div class="container mt-4">
        <div class="row justify-content-center">
            <!-- Stock Details Card -->
            <div class="col-lg-6 col-md-8 w-100">
                <div class="card shadow-sm mb-4 w-100">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Stock Details</h5>
                    </div>
                    <div class="card-body">
                        <p class="mb-2"><strong>Brand:</strong> @CurrentStock.Product.Brand</p>
                        <p class="mb-2"><strong>Size:</strong> @CurrentStock.Product.Size</p>
                        <p class="mb-2"><strong>Pattern:</strong> @CurrentStock.Product.Pattern</p>
                        <p class="mb-2"><strong>Type:</strong> @CurrentStock.Product.TubeOrTubeless</p>
                        <p class="mb-0"><strong>Available Stock:</strong> @CurrentStock.AvailableQuantity</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Buttons Section -->
        <div class="row justify-content-center">
            <div class="col-lg-6 col-md-8 text-center">
                <div class="d-flex justify-content-around">
                    <button class="btn btn-danger" @onclick="()=>{CurrentStock.AvailableQuantity--;StateHasChanged();}">-</button>
                    <p class="my-auto">@CurrentStock.AvailableQuantity</p>
                    <button class="btn btn-success" @onclick="()=>{CurrentStock.AvailableQuantity++;StateHasChanged();}">+</button>
                </div>
            </div>
        </div>
    </div>
    ,
	    	footers = new List<FooterBtn>
	        {
                new FooterBtn
                {
                    Button = @<button class="btn btn-danger" @onclick="()=>{updateDialog.showDialog = false;CurrentStock.AvailableQuantity = availabeStockPreviously; StateHasChanged();}">CANCEL</button>
                },
	        	new FooterBtn
	        	{
                          Button = @<button class="btn btn-primary" @onclick="HandleUpdateClick">OK</button>
	        	},

	        },
            OnCloase = EventCallback.Factory.Create(this, async () =>
            {
                updateDialog.showDialog = false;
                CurrentStock.AvailableQuantity = availabeStockPreviously;

                StateHasChanged();
            }),

	    };

        addDialog = new CustomDialogBox
        {
            Title = "Create Stock",
            body= @<CreateStock></CreateStock>, 
            OnCloase = EventCallback.Factory.Create(this, async () =>
            {
                addDialog.showDialog = false;
                await FetchData();
                StateHasChanged();
            }),
        };

        if (FormFactor.GetFormFactor() == "Web")
        {
            Debug.WriteLine("Web");
        }
        else
        {
            Debug.WriteLine("Desktop");
        }
        try
        {
            await FetchData();
        }
        catch(Exception e)
        {
            ToastService.ShowToast(e.Message, ToastType.error);
        }

    }

    async Task FetchData()
    {
        sivakasiStockTotal = 0;
        bypassStockTotal = 0;
        stockDetails.Clear();
        filteredBypassStocks.Clear();
		filteredSivakasiStocks.Clear();
        string query = @"SELECT s.*, p.* FROM Stock s JOIN Product p ON p.ProductID = s.ProductID";

        var stocks = await DatabaseHandler.ExecuteQueryAsync(query);
        Debug.WriteLine(stocks.Count);
        if (stocks.Count > 0)
        {
            foreach (var row in stocks)
            {
                TaxRate taxRate;
                if (!Enum.TryParse(row["TaxRate"].ToString(), out taxRate))
                {
                    taxRate = TaxRate.TAX_28; // or any default value
                }
                stockDetails.Add(new StockType
                    {
                        ProductID = row["ProductID"].ToString() ?? "",
                        Product = new ProductType
                        {
                            ProductID = row["ProductID"].ToString() ?? "",
                            Brand = row["Brand"].ToString() ?? "",
                            Size = row["Size"].ToString() ?? "",
                            HSNCode = row["HSNCode"].ToString() ?? "",
                            Pattern = row["Pattern"].ToString() ?? "",
                            TubeOrTubeless = row["TubeOrTubeless"].ToString() ?? "",
                            Price = Double.Parse(row["Price"].ToString() ?? "0"),
                            AvailableQuantity = Int32.Parse(row["AvailableQuantity"].ToString() ?? "0"),
                            Branch = row["Branch"].ToString() ?? "",
                            TaxRate = taxRate,
                        },
                        AvailableQuantity = Int32.Parse(row["AvailableQuantity"].ToString() ?? "0"),
                        Branch = row["Branch"].ToString() ?? ""

                    });
            }
            Debug.WriteLine(stockDetails.Count);

            sivakasiStocks = stockDetails.Where(b => string.Equals(b.Branch, "Sivakasi", StringComparison.OrdinalIgnoreCase)).ToList();
            bypassStocks = stockDetails.Where(b => string.Equals(b.Branch, "ByPass", StringComparison.OrdinalIgnoreCase)).ToList();
            HandleSelectTable();
            filteredSivakasiStocks = sivakasiStocks;
            filteredBypassStocks = bypassStocks;
            filteredSivakasiStocks.ForEach(s => sivakasiStockTotal += s.AvailableQuantity);
            filteredBypassStocks.ForEach(s => bypassStockTotal += s.AvailableQuantity);

        }
    }

    void FilterStock(ChangeEventArgs e)
    {
        sivakasiStockTotal = 0;
        bypassStockTotal = 0;
        string temp = e.Value.ToString();

        

        filteredSivakasiStocks = sivakasiStocks.Where(s => s.ProductID.Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            s.Product.Pattern.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            s.Product.Size.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            s.Product.Brand.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            s.Product.BrandID.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase)).ToList();

        filteredBypassStocks = bypassStocks.Where(s => s.ProductID.Contains(temp, StringComparison.OrdinalIgnoreCase) ||
        s.Product.Pattern.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
        s.Product.Size.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
        s.Product.Brand.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
        s.Product.BrandID.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase)).ToList();
        filteredSivakasiStocks.ForEach(s => sivakasiStockTotal += s.AvailableQuantity);
        filteredBypassStocks.ForEach(s => bypassStockTotal += s.AvailableQuantity);
        StateHasChanged();
    }


}