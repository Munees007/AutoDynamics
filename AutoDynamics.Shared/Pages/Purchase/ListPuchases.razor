@page "/list/purchaseBills"
@inject IDatabaseHandler DatabaseHandler
@inject IFormFactor FormFactor
@inject IMyLocalStorageService MyLocalStorageService
@inject NavigationManager Navigation
@inject ICurrentData CurrentData
@inject IFormFactor FormFactor
@inject ITabService TabService
@inject IDownloadExcel DownloadExcel
@inject IToastService ToastService

<h3 class="text-center mb-4">Purchase Details</h3>
@* <button class="btn btn-outline-info mb-3" @onclick="InsertSupplierCreditRecord">Create CreditButton</button> *@
<DialoBox dialogBox="excelDialog"></DialoBox>
<div class="mb-3">
    <input type="text" @bind="searchQuery" @oninput="SearchBills" class="form-control" placeholder="Search by Bill No" />
</div>

<div class="mb-3">
    <label>Sort By: </label>
    <select @bind="selectedSortOption" class="form-control">
        <option value="yesterday">Yesterday</option>
        <option value="date">Today</option>
        <option value="month">Month to Date</option>
        <option value="year">Year to Date</option>
        <option value="range">Custom</option>
    </select>

    @if (selectedSortOption == "range")
    {
        <input type="date" @bind="startDate" class="form-control mt-2" />
        <input type="date" @bind="endDate" class="form-control mt-2" />
    }
</div>
<div class="w-100 d-flex justify-content-between align-items-md-center">
    <button class="btn btn-primary mb-3" @onclick="ApplyFilters">Apply Filters</button>
    <button class="btn btn-success mb-3" @onclick="()=>{excelDialog.showDialog = true;StateHasChanged();}">Download Excel</button>
</div>
@if (purchaseDetails == null || !purchaseDetails.Any())
{
    <div class="alert alert-warning text-center">No Purchase records found.</div>
}
else
{
    <div class="col">
        @if (isAdmin || showSivakasi)
        {
            <div class="col-md-6 w-100">
                <div class="card shadow-lg">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Sivakasi Branch</h5>
                    </div>
                    <div class="card-body">
                        @if (filteredSivakasiBills.Any())
                        {
                            <table class="table table-bordered table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Bill No</th>
                                        <th>Invoice Number</th>
                                        <th>Supplier Name</th>
                                        <th>Contact</th>
                                        <th>GSTIN</th>
                                        <th>Branch</th>
                                        <th>Puchase Data</th>
                                        <th>Created At</th>
                                        <th>Total</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var bill in filteredSivakasiBills)
                                    {
                                        <tr>
                                            <td style="cursor:pointer;" @onclick="()=>ViewBill(bill)">@("SFRP" + (bill.purchase.BillNo.ToString().PadLeft(4, '0')))</td>
                                            <td>@bill.purchase.InvoiceNumber</td>
                                            <td>@bill.purchase.Supplier.Name</td>
                                            <td>@bill.purchase.Supplier.Contact</td>
                                            <td>@bill.purchase.Supplier.GSTIN</td>
                                            <td>@bill.purchase.Branch</td>
                                            <td>@bill.purchase.PurchaseDate.ToString("dd-MM-yyyy")</td>
                                            <td>@bill.purchase.CreatedAt.ToString("dd-MM-yyyy")</td>
                                            <td>@bill.purchase.TotalAmount</td>
                                            <td>
                                                @* <button class="btn btn-sm btn-success" @onclick="() => DownloadBill(bill)">Download</button> *@
                                                @if (isAdmin)
                                                {
                                                    <button class="btn btn-sm btn-danger" @onclick="() => UpdateBill(bill)">Update</button>
                                                }
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="text-muted text-center">No records for Sivakasi.</p>
                        }
                    </div>
                </div>
            </div>
        }
        @if (showByPass || isAdmin)
        {
            <div class="col-md-6 mt-5 w-100">
                <div class="card shadow-lg">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">Bypass Branch</h5>
                    </div>
                    <div class="card-body">
                        @if (filteredBypassBills.Any())
                        {
                            <table class="table table-bordered table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Bill No</th>
                                        <th>Invoice Number</th>
                                        <th>Supplier Name</th>
                                        <th>Contact</th>
                                        <th>GSTIN</th>
                                        <th>Branch</th>
                                        <th>Puchase Data</th>
                                        <th>Created At</th>
                                        <th>Total</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var bill in filteredBypassBills)
                                    {
                                        <tr>
                                            <td style="cursor:pointer;" @onclick="()=>ViewBill(bill)">@("BPRP" + (bill.purchase.BillNo.ToString().PadLeft(4, '0')))</td>
                                            <td>@bill.purchase.InvoiceNumber</td>
                                            <td>@bill.purchase.Supplier.Name</td>
                                            <td>@bill.purchase.Supplier.Contact</td>
                                            <td>@bill.purchase.Supplier.GSTIN</td>
                                            <td>@bill.purchase.Branch</td>
                                            <td>@bill.purchase.PurchaseDate.ToString("dd-MM-yyyy")</td>
                                            <td>@bill.purchase.CreatedAt.ToString("dd-MM-yyyy")</td>
                                            <td>@bill.purchase.TotalAmount</td>

                                            <td>
                                                @* <button class="btn btn-sm btn-success" @onclick="() => DownloadBill(bill)">Download</button> *@
                                                @if (isAdmin)
                                                { 
                                                    <button class="btn btn-sm btn-danger" @onclick="() => UpdateBill(bill)">Update</button> 
                                                } 
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="text-muted text-center">No records for Bypass.</p>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
<Loader show="isLoading" customText="@loaderText"/>
@code
{
    public List<PurchaseDetails> purchaseDetails = new();
    bool isAdmin = false;
    bool isLoading = false;
    string branch = "";
    string loaderText = "";
    bool showSivakasi = false;
    bool showByPass = false;
    string searchQuery = "";
    string selectedSortOption = "date";
    DateTime? startDate;
    DateTime? endDate;

    string excelBranch = "Sivakasi";
    int excelMonth = 1;
    int excelYear = 2025;

    CustomDialogBox excelDialog = new CustomDialogBox();

    public List<PurchaseDetails> sivakasiBills = new();
    public List<PurchaseDetails> bypassBills = new();

    public List<PurchaseDetails> filteredSivakasiBills = new();
    public List<PurchaseDetails> filteredBypassBills = new();

    public async void generateExcel()
    {
        try
        {
            loaderText = "Generating Excel...";
            isLoading = true;


            // Parse selected month and year from dropdown (assuming excelMonth and excelYear are integers)
            int selectedMonth = excelMonth;
            int selectedYear = excelYear;

            DateTime monthDate = new DateTime(selectedYear, selectedMonth, 1);

            var filtered = await FetchData(BillDateFilterType.CustomMonthYear,customMonthYear:monthDate,isExcel:true);

            filtered = filtered.Where((b) => b.purchase.Branch == excelBranch).ToList();
            filtered = filtered.OrderBy((b) => b.purchase.PurchaseDate.Ticks).ToList();
            string temp = $"{monthDate:MMMM-yyyy}";
            string savedPath = DownloadExcel.DownloadExcelPurchaseToDevice(filtered.ToArray(), temp, excelBranch);
            ToastService.ShowToast("Excel Genreated Successfully", ToastType.sucess);
        }
        catch (Exception e)
        {
            ToastService.ShowToast(e.Message, ToastType.error);
        }

        isLoading = false;
        loaderText = "";
        StateHasChanged();

    }

    public async Task InsertSupplierCreditRecord()
    {


        try
        {
            isLoading = true;
            loaderText = "Inserting Credit...";

            string deleteSupplierCredits = "DELETE FROM SupplierCreditRecord";
            await DatabaseHandler.ExecuteNonQueryAsync(deleteSupplierCredits);
            List<PurchaseDetails> purchaseBills = new List<PurchaseDetails>();
            purchaseBills = await FetchData(BillDateFilterType.All);

            foreach (var item in purchaseBills)
            {


                if (item.purchase.type == PaymentType.CREDIT)
                {
                    string insertQuery = @"INSERT INTO SupplierCreditRecord (SupplierID,PurchaseBillID,CreditAmount,DueDate,Status) VALUES(@SupplierID,@PurchaseBillID,@CreditAmount,@DueDate,'Pending')";

                    var parameters = new Dictionary<string, object>
                    {
                    { "@SupplierID", item.purchase.SupplierID },
                    { "@PurchaseBillID", item.purchase.PurchaseBillID },
                    { "@CreditAmount", item.purchase.TotalAmount },
                    { "@DueDate", item.purchase.PurchaseDate.AddDays(30) } // Assuming due date is 30 days from purchase date
                    };
                    await DatabaseHandler.ExecuteNonQueryAsync(insertQuery, parameters);

                    //Ledger bankLedger = new Ledger { };
                }
                // else
                // {
                //     Ledger cashLedger = new Ledger { };
                // }

                //Ledger purchaseLedger = new Ledger { };
            }
            isLoading = false;
            loaderText = "";
            ToastService.ShowToast("Supplier Credit Records Inserted Successfully", ToastType.sucess);
        }
        catch(Exception e)
        {
            isLoading = false;
            loaderText = "";
            ToastService.ShowToast(e.Message, ToastType.error);
        }
        StateHasChanged();

    }
    public void SearchBills(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();

        filteredSivakasiBills = sivakasiBills
    .Where(s => s.purchase.PurchaseDate.ToString("dd-MM-yyyy").Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
             || s.purchase.InvoiceNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || s.purchase.Supplier.Name.Contains(searchQuery,StringComparison.OrdinalIgnoreCase) )
    .ToList();

        filteredBypassBills = bypassBills
        .Where(s => s.purchase.PurchaseDate.ToString("dd-MM-yyyy").Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
             || s.purchase.InvoiceNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || s.purchase.Supplier.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        .ToList();

        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {
        excelDialog = new CustomDialogBox
                {
                    Title = "Download Excel",
                    body = @<div class="mb-3">
        <label class="form-label">Select Branch, Month, and Year</label>

        <div class="d-flex gap-3">
            <select id="branchSelect" class="form-select" @bind="excelBranch">
                <option value="Sivakasi">Sivakasi</option>
                <option value="ByPass">ByPass</option>
            </select>

            <select id="monthSelect" class="form-select" @bind="excelMonth">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
            </select>

            <select id="yearSelect" class="form-select" @bind="excelYear">
                @for (int year = DateTime.Now.Year - 5; year <= DateTime.Now.Year + 1; year++)
            {
                <option value="@year">@year</option>
            }
            </select>
        </div>
    </div>


    ,
            footers = new List<FooterBtn>
            {
                new FooterBtn
                {
                    Button = @<button class="btn btn-danger" @onclick="()=>{excelDialog.showDialog = false; StateHasChanged();}">CANCEL</button>
                },
                new FooterBtn
                {
                          Button = @<button class="btn btn-primary" @onclick="generateExcel">OK</button>
	        	},
            },
            OnCloase = EventCallback.Factory.Create(this, async () =>
            {
                excelDialog.showDialog = false;
                excelBranch = "";

                StateHasChanged();
            }),
        };

        isAdmin = await MyLocalStorageService.GetItemAsync("IsAdmin") == "true";
        branch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";
        showSivakasi = branch == "Sivakasi";
        showByPass = !showSivakasi;
        sivakasiBills = purchaseDetails.Where(b => b.purchase.Branch == "Sivakasi").ToList();
        bypassBills = purchaseDetails.Where(b => b.purchase.Branch == "ByPass").ToList();

        filteredBypassBills = bypassBills;
        filteredSivakasiBills = sivakasiBills;
    }

    private void ViewBill(PurchaseDetails purchaseBill )
    {
        string billNo = (purchaseBill.purchase.Branch == "Sivakasi" ? "SFRP" : "BPRP") + purchaseBill.purchase.BillNo.ToString().PadLeft(4, '0');

        Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
        {
            { "purchaseData",purchaseBill}
        };
        TabService.OpenWithParameter("Viewing: " + billNo, typeof(PurchaseView), Parameters);
    }

    private void UpdateBill(PurchaseDetails purchaseBill)
    {
        string billNo = (purchaseBill.purchase.Branch == "Sivakasi" ? "SFRP" : "BPRP") + purchaseBill.purchase.BillNo.ToString().PadLeft(4, '0');

        Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
        {
            { "updatingPurchase",purchaseBill}
        };
        TabService.OpenWithParameter("Updating: " + billNo, typeof(UpdatePurchase), Parameters);
    }

    async Task ApplyFilters()
    {
        loaderText = "Fetching Purchase Bills...";
        isLoading = true;
        purchaseDetails = await FilterBills();
        Debug.WriteLine(purchaseDetails.Count);
        filteredSivakasiBills = purchaseDetails.Where((b) => b.purchase.Branch == "Sivakasi").ToList();
        filteredBypassBills = purchaseDetails.Where((b) => b.purchase.Branch == "ByPass").ToList();

        filteredSivakasiBills = filteredSivakasiBills.OrderBy((sb) => sb.purchase.BillNo).ToList();
        filteredBypassBills = filteredBypassBills.OrderBy((bb) => bb.purchase.BillNo).ToList();
        sivakasiBills = filteredSivakasiBills;
        bypassBills = filteredBypassBills;
        isLoading = false;
        loaderText = "";
        StateHasChanged();
    }

    async Task<List<PurchaseDetails>> FilterBills()
    {
        var today = DateTime.Today;
        List<PurchaseDetails> filtered = new() ;


        if (selectedSortOption == "date")
        {
            filtered = await FetchData(BillDateFilterType.Today);
        }

        if (selectedSortOption == "yesterday")
        {
            filtered = await FetchData(BillDateFilterType.Yesterday);
        }

        if (selectedSortOption == "month")
        {
            DateTime startOfMonth = new DateTime(today.Year, today.Month, 1);

            filtered = await FetchData(BillDateFilterType.ThisMonth);
        }
        if (selectedSortOption == "year")
        {
            int startYear = today.Month >= 4 ? today.Year : today.Year - 1; // Determine the financial year start
            DateTime startOfFinancialYear = new DateTime(startYear, 4, 1); // April 1 of the determined year
            DateTime endOfFinancialYear = new DateTime(startYear + 1, 3, 31); // March 31 of the next year

            filtered = await FetchData(BillDateFilterType.ThisYear);
        }


        if (selectedSortOption == "range" && startDate.HasValue && endDate.HasValue)
        {
            startDate = startDate.Value.Date;
            endDate = endDate.Value.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
            filtered = await FetchData(BillDateFilterType.CustomRange, startDate:startDate, endDate:endDate);
        }

        return filtered;
    }


    public async Task<List<PurchaseDetails>> FetchData(BillDateFilterType filterType, DateTime? startDate = null, DateTime? endDate = null, DateTime? customMonthYear = null,bool isExcel = false)
    {
        try
        {
            List<PurchaseDetails> purchaseBills = new();
            string whereClause = "";
            DateTime today = DateTime.Today;
            if(isExcel)
            {
                switch (filterType)
                {
                    case BillDateFilterType.Today:
                        whereClause = $"WHERE DATE(pb.PurchaseDate) = '{today:yyyy-MM-dd}'";
                        break;
                    case BillDateFilterType.Yesterday:
                        whereClause = $"WHERE DATE(pb.PurchaseDate) = '{today.AddDays(-1):yyyy-MM-dd}'";
                        break;
                    case BillDateFilterType.ThisMonth:
                        whereClause = $"WHERE MONTH(pb.PurchaseDate) = {today.Month} AND YEAR(pb.PurchaseDate) = {today.Year}";
                        break;
                    case BillDateFilterType.ThisYear:
                        whereClause = $"WHERE YEAR(pb.PurchaseDate) = {today.Year}";
                        break;
                    case BillDateFilterType.CustomMonthYear:
                        if (customMonthYear.HasValue)
                            whereClause = $"WHERE MONTH(pb.PurchaseDate) = {customMonthYear.Value.Month} AND YEAR(pb.PurchaseDate) = {customMonthYear.Value.Year}";
                        break;
                    case BillDateFilterType.CustomDate:
                        if (startDate.HasValue)
                            whereClause = $"WHERE DATE(pb.PurchaseDate) = '{startDate.Value:yyyy-MM-dd}'";
                        break;
                    case BillDateFilterType.CustomRange:
                        if (startDate.HasValue && endDate.HasValue)
                            whereClause = $"WHERE DATE(pb.PurchaseDate) BETWEEN '{startDate.Value:yyyy-MM-dd HH:mm:ss}' AND '{endDate.Value:yyyy-MM-dd HH:mm:ss}'";
                        break;
                    case BillDateFilterType.All:
                    default:
                        // No filter
                        break;
                }
            }
            else
            {
                switch (filterType)
                {
                    case BillDateFilterType.Today:
                        whereClause = $"WHERE DATE(pb.CreatedAt) = '{today:yyyy-MM-dd}'";
                        break;
                    case BillDateFilterType.Yesterday:
                        whereClause = $"WHERE DATE(pb.CreatedAt) = '{today.AddDays(-1):yyyy-MM-dd}'";
                        break;
                    case BillDateFilterType.ThisMonth:
                        whereClause = $"WHERE MONTH(pb.CreatedAt) = {today.Month} AND YEAR(pb.CreatedAt) = {today.Year}";
                        break;
                    case BillDateFilterType.ThisYear:
                        whereClause = $"WHERE YEAR(pb.CreatedAt) = {today.Year}";
                        break;
                    case BillDateFilterType.CustomMonthYear:
                        if (customMonthYear.HasValue)
                            whereClause = $"WHERE MONTH(pb.CreatedAt) = {customMonthYear.Value.Month} AND YEAR(pb.CreatedAt) = {customMonthYear.Value.Year}";
                        break;
                    case BillDateFilterType.CustomDate:
                        if (startDate.HasValue)
                            whereClause = $"WHERE DATE(pb.CreatedAt) = '{startDate.Value:yyyy-MM-dd}'";
                        break;
                    case BillDateFilterType.CustomRange:
                        if (startDate.HasValue && endDate.HasValue)
                            whereClause = $"WHERE DATE(pb.CreatedAt) BETWEEN '{startDate.Value:yyyy-MM-dd HH:mm:ss}' AND '{endDate.Value:yyyy-MM-dd HH:mm:ss}'";
                        break;
                    case BillDateFilterType.All:
                    default:
                        // No filter
                        break;
                }
            }
            
            // 1. Fetch all purchase bills
            string billsQuery = $@"SELECT pb.*,pb.CreatedAt AS PurchaseCreatedAt,s.*,s.CreatedAt AS SupplierCreatedAt
FROM PurchaseBills pb
JOIN Suppliers s ON pb.SupplierID = s.SupplierID {whereClause}";

            var billsResult = await DatabaseHandler.ExecuteQueryAsync(billsQuery, null);
            Debug.WriteLine(billsResult.Count);
            var allResults = new List<(Purchase, List<PurchaseItems>)>();

            foreach (var billRow in billsResult)
            {
                var purchaseBillId = Convert.ToInt32(billRow["PurchaseBillID"]);

                var purchaseBill = new Purchase
                    {
                        PurchaseBillID = purchaseBillId,
                        Branch = billRow["Branch"].ToString(),
                        InvoiceNumber = billRow["InvoiceNumber"].ToString(),
                        taxType = Enum.Parse<TaxType>(billRow["TaxType"].ToString()),
                        BillingYear = Convert.ToInt32(billRow["BillingYear"]),
                        BillNo = Convert.ToInt32(billRow["BillNo"]),
                        SupplierID = billRow["SupplierID"].ToString() ?? "",
                        Supplier = new Supplier
                        {
                            SupplierID = billRow["SupplierID"].ToString() ?? "",
                            Name = billRow["Name"].ToString()??"",
                            GSTIN = billRow["GSTIN"].ToString() ?? "",
                            Contact = billRow["Contact"].ToString() ?? ""
                        },
                        type = Enum.Parse<PaymentType>(billRow["PaymentType"].ToString()),
                        PurchaseDate = Convert.ToDateTime(billRow["PurchaseDate"]),
                        CreatedAt = Convert.ToDateTime(billRow["PurchaseCreatedAt"]),
                        TotalAmount = Convert.ToDecimal(billRow["TotalAmount"]),
                        DiscountAmount = Convert.ToDecimal(billRow["DiscountAmount"]),
                        GrandTotal = Convert.ToDecimal(billRow["GrandTotal"]),
                        Notes = billRow["Notes"].ToString() ??""
                    };

                // 2. Fetch items for each bill
                string itemsQuery = @"
            SELECT
    p.*,
    pr.BrandID,
    pr.ProductID,
    br.*
FROM
    PurchaseItems p
JOIN
    Product pr
    ON pr.ProductID = p.ProductID
JOIN
    Brands br
    ON br.BrandID = pr.BrandID
WHERE
    p.PurchaseBillID = @PurchaseBillID;
";

                var itemParams = new Dictionary<string, object>
            {
                { "@PurchaseBillID", purchaseBillId }
            };

                var itemsResult = await DatabaseHandler.ExecuteQueryAsync(itemsQuery, itemParams);

                var itemList = new List<PurchaseItems>();

                foreach (var itemRow in itemsResult)
                {
                    itemList.Add(new PurchaseItems
                        {
                            ProductID = itemRow["ProductID"].ToString(),
                            ProductName = itemRow["ItemName"].ToString(),
                            BrandName = itemRow["BrandName"].ToString(),
                            Quantity = Convert.ToInt32(itemRow["Quantity"]),
                            DiscountType = Enum.Parse<DiscountType>(itemRow["DiscountType"].ToString()),
                            DiscountValue = Convert.ToDecimal(itemRow["DiscountValue"]),
                            DiscountScope = Enum.Parse<DiscountScope>(itemRow["DiscountScope"].ToString()),
                            FrightValue = Convert.ToDecimal(itemRow["Fright"].ToString()),
                            TaxRate = Enum.Parse<TaxRate>(itemRow["TaxRate"].ToString()),
                            UnitPrice = Convert.ToDecimal(itemRow["UnitPrice"]),
                            TotalPrice = Convert.ToDecimal(itemRow["TotalPrice"])
                        });
                }

                purchaseBills.Add(new PurchaseDetails
                {
                    purchase = purchaseBill,
                    purchaseItems = itemList
                });
            }
            return purchaseBills;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            throw;
        }
	}
}