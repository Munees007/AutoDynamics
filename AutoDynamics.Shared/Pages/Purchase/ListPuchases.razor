@page "/list/purchaseBills"
@using AutoDynamics.Shared.Modals.PurchaseTypes
@using AutoDynamics.Shared.Modals
@using AutoDynamics.Shared.Services
@inject IDatabaseHandler DatabaseHandler
@inject IFormFactor FormFactor
@inject IMyLocalStorageService MyLocalStorageService
@inject NavigationManager Navigation
@inject ICurrentData CurrentData
@inject IFormFactor FormFactor

<h3 class="text-center mb-4">Billing Details</h3>

<div class="mb-3">
    <input type="text" @bind="searchQuery" class="form-control" placeholder="Search by Bill No" />
</div>

<div class="mb-3">
    <label>Sort By: </label>
    <select @bind="selectedSortOption" class="form-control">
        <option value="yesterday">Yesterday</option>
        <option value="date">Today</option>
        <option value="month">Month to Date</option>
        <option value="year">Year to Date</option>
        <option value="range">Custom</option>
    </select>

    @if (selectedSortOption == "range")
    {
        <input type="date" @bind="startDate" class="form-control mt-2" />
        <input type="date" @bind="endDate" class="form-control mt-2" />
    }
</div>
<div class="w-100 d-flex justify-content-between align-items-md-center">
    <button class="btn btn-primary mb-3" @onclick="ApplyFilters">Apply Filters</button>
    
</div>
@if (purchaseDetails == null || !purchaseDetails.Any())
{
    <div class="alert alert-warning text-center">No Purchase records found.</div>
}
else
{
    <div class="col">
        @if (isAdmin || showSivakasi)
        {
            <div class="col-md-6 w-100">
                <div class="card shadow-lg">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Sivakasi Branch</h5>
                    </div>
                    <div class="card-body">
                        @if (sivakasiBills.Any())
                        {
                            <table class="table table-bordered table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Bill No</th>
                                        <th>Invoice Number</th>
                                        <th>Supplier Name</th>
                                        <th>Contact</th>
                                        <th>GSTIN</th>
                                        <th>Branch</th>
                                        <th>Puchase Data</th>
                                        <th>Total</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var bill in filteredSivakasiBills)
                                    {
                                        <tr>
                                            <td style="cursor:pointer;" @onclick="()=>ViewBill(bill)">@("SFR" + (bill.purchase.BillNo.ToString().PadLeft(4, '0')))</td>
                                            <td>@bill.purchase.InvoiceNumber</td>
                                            <td>@bill.purchase.Supplier.Name</td>
                                            <td>@bill.purchase.Supplier.Contact</td>
                                            <td>@bill.purchase.Supplier.GSTIN</td>
                                            <td>@bill.purchase.Branch</td>
                                            <td>@bill.purchase.PurchaseDate</td>
                                            <td>@bill.purchase.TotalAmount</td>
                                            <td>
                                                @* <button class="btn btn-sm btn-success" @onclick="() => DownloadBill(bill)">Download</button> *@
                                                @if (isAdmin)
                                                {
                                                    <button class="btn btn-sm btn-danger" @onclick="() => UpdateBill(bill)">Update</button>
                                                }
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="text-muted text-center">No records for Sivakasi.</p>
                        }
                    </div>
                </div>
            </div>
        }
        @if (showByPass || isAdmin)
        {
            <div class="col-md-6 mt-5 w-100">
                <div class="card shadow-lg">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">Bypass Branch</h5>
                    </div>
                    <div class="card-body">
                        @if (bypassBills.Any())
                        {
                            <table class="table table-bordered table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Bill No</th>
                                        <th>Invoice Number</th>
                                        <th>Supplier Name</th>
                                        <th>Contact</th>
                                        <th>GSTIN</th>
                                        <th>Branch</th>
                                        <th>Puchase Data</th>
                                        <th>Total</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var bill in filteredBypassBills)
                                    {
                                        <tr>
                                            <td style="cursor:pointer;" @onclick="()=>ViewBill(bill)">@("BPR" + (bill.purchase.BillNo.ToString().PadLeft(4, '0')))</td>
                                            <td>@bill.purchase.InvoiceNumber</td>
                                            <td>@bill.purchase.Supplier.Name</td>
                                            <td>@bill.purchase.Supplier.Contact</td>
                                            <td>@bill.purchase.Supplier.GSTIN</td>
                                            <td>@bill.purchase.Branch</td>
                                            <td>@bill.purchase.PurchaseDate</td>
                                            <td>@bill.purchase.TotalAmount</td>

                                            <td>
                                                @* <button class="btn btn-sm btn-success" @onclick="() => DownloadBill(bill)">Download</button> *@
                                                @if (isAdmin)
                                                 { 
                                                     <button class="btn btn-sm btn-danger" @onclick="() => UpdateBill(bill)">Update</button> 
                                                 } 
                                             </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="text-muted text-center">No records for Bypass.</p>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code
{
    public List<PurchaseDetails> purchaseDetails = new();
    bool isAdmin = false;
    string branch = "";
    bool showSivakasi = false;
    bool showByPass = false;
    string searchQuery = "";
    string selectedSortOption = "date";
    DateTime? startDate;
    DateTime? endDate;

    public List<PurchaseDetails> sivakasiBills = new();
    public List<PurchaseDetails> bypassBills = new();

    public List<PurchaseDetails> filteredSivakasiBills = new();
    public List<PurchaseDetails> filteredBypassBills = new();

    protected override async Task OnInitializedAsync()
    {

        await FetchData();
        isAdmin = await MyLocalStorageService.GetItemAsync("IsAdmin") == "true";
        branch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";
        showSivakasi = branch == "Sivakasi";
        showByPass = !showSivakasi;
        sivakasiBills = purchaseDetails.Where(b => b.purchase.Branch == "Sivakasi").ToList();
        bypassBills = purchaseDetails.Where(b => b.purchase.Branch == "ByPass").ToList();

        filteredBypassBills = bypassBills;
        filteredSivakasiBills = sivakasiBills;
    }

    private void ViewBill(PurchaseDetails purchaseBill )
    {
        CurrentData.Set(CurrentType.Purchase, purchaseBill);
        Navigation.NavigateTo("/purchase/view");
    }

    private void UpdateBill(PurchaseDetails purchaseBill)
    {
        CurrentData.Set(CurrentType.Purchase, purchaseBill);
        Navigation.NavigateTo($"/updatePurchase");
    }

    void ApplyFilters()
    {
        filteredSivakasiBills = FilterBills(sivakasiBills);
        filteredBypassBills = FilterBills(bypassBills);
    }

    List<PurchaseDetails> FilterBills(List<PurchaseDetails> bills)
    {
        var today = DateTime.Today;
        var filtered = bills;

        if (!string.IsNullOrEmpty(searchQuery))
        {
            filtered = filtered.Where(b => b.purchase.BillNo.ToString().Contains(searchQuery)).ToList();
        }

        if (selectedSortOption == "date")
        {
            filtered = filtered.Where(b => b.purchase.PurchaseDate.Date == today.Date).ToList();
        }

        if (selectedSortOption == "yesterday")
        {
            filtered = filtered.Where(b => b.purchase.PurchaseDate.Date == today.AddDays(-1)).ToList();
        }

        if (selectedSortOption == "month")
        {
            DateTime startOfMonth = new DateTime(today.Year, today.Month, 1);

            filtered = filtered
                .Where(b => b.purchase.PurchaseDate.Date >= startOfMonth && b.purchase.PurchaseDate.Date <= today.Date)
                .ToList();
        }
        if (selectedSortOption == "year")
        {
            int startYear = today.Month >= 4 ? today.Year : today.Year - 1; // Determine the financial year start
            DateTime startOfFinancialYear = new DateTime(startYear, 4, 1); // April 1 of the determined year
            DateTime endOfFinancialYear = new DateTime(startYear + 1, 3, 31); // March 31 of the next year

            filtered = filtered
                .Where(b => b.purchase.PurchaseDate.Date >= startOfFinancialYear && b.purchase.PurchaseDate.Date <= endOfFinancialYear)
                .ToList();
        }


        if (selectedSortOption == "range" && startDate.HasValue && endDate.HasValue)
        {
            
            filtered = filtered.Where(b => b.purchase.PurchaseDate.Date >= startDate.Value.Date && b.purchase.PurchaseDate.Date <= endDate.Value.Date).ToList();
        }

        return filtered.OrderBy(b => b.purchase.PurchaseDate).ToList();
    }


    public async Task FetchData()
    {
        try
        {
            // 1. Fetch all purchase bills
            string billsQuery = @"SELECT *
FROM PurchaseBills pb
JOIN Suppliers s ON pb.SupplierID = s.SupplierID";

            var billsResult = await DatabaseHandler.ExecuteQueryAsync(billsQuery, null);

            var allResults = new List<(Purchase, List<PurchaseItems>)>();

            foreach (var billRow in billsResult)
            {
                var purchaseBillId = Convert.ToInt32(billRow["PurchaseBillID"]);

                var purchaseBill = new Purchase
                    {
                        PurchaseBillID = purchaseBillId,
                        Branch = billRow["Branch"].ToString(),
                        InvoiceNumber = billRow["InvoiceNumber"].ToString(),
                        taxType = Enum.Parse<TaxType>(billRow["TaxType"].ToString()),
                        BillingYear = Convert.ToInt32(billRow["BillingYear"]),
                        BillNo = Convert.ToInt32(billRow["BillNo"]),
                        SupplierID = billRow["SupplierID"].ToString() ?? "",
                        Supplier = new Supplier
                        {
                            SupplierID = billRow["SupplierID"].ToString() ?? "",
                            Name = billRow["Name"].ToString()??"",
                            GSTIN = billRow["GSTIN"].ToString() ?? "",
                            Contact = billRow["Contact"].ToString() ?? ""
                        },
                        type = Enum.Parse<PaymentType>(billRow["PaymentType"].ToString()),
                        PurchaseDate = Convert.ToDateTime(billRow["PurchaseDate"]),
                        TotalAmount = Convert.ToDecimal(billRow["TotalAmount"]),
                        DiscountAmount = Convert.ToDecimal(billRow["DiscountAmount"]),
                        GrandTotal = Convert.ToDecimal(billRow["GrandTotal"]),
                        Notes = billRow["Notes"].ToString() ??""
                    };

                // 2. Fetch items for each bill
                string itemsQuery = @"
            SELECT
    p.*,
    pr.BrandID,
    pr.ProductID,
    br.*
FROM
    PurchaseItems p
JOIN
    Product pr
    ON pr.ProductID = p.ProductID
JOIN
    Brands br
    ON br.BrandID = pr.BrandID
WHERE
    p.PurchaseBillID = @PurchaseBillID;
";

                var itemParams = new Dictionary<string, object>
            {
                { "@PurchaseBillID", purchaseBillId }
            };

                var itemsResult = await DatabaseHandler.ExecuteQueryAsync(itemsQuery, itemParams);

                var itemList = new List<PurchaseItems>();

                foreach (var itemRow in itemsResult)
                {
                    itemList.Add(new PurchaseItems
                        {
                            ProductID = itemRow["ProductID"].ToString(),
                            ProductName = itemRow["ItemName"].ToString(),
                            BrandName = itemRow["BrandName"].ToString(),
                            Quantity = Convert.ToInt32(itemRow["Quantity"]),
                            DiscountType = Enum.Parse<DiscountType>(itemRow["DiscountType"].ToString()),
                            DiscountValue = Convert.ToDecimal(itemRow["DiscountValue"]),
                            DiscountScope = Enum.Parse<DiscountScope>(itemRow["DiscountScope"].ToString()),
                            FrightValue = Convert.ToDecimal(itemRow["Fright"].ToString()),
                            TaxRate = Enum.Parse<TaxRate>(itemRow["TaxRate"].ToString()),
                            UnitPrice = Convert.ToDecimal(itemRow["UnitPrice"]),
                            TotalPrice = Convert.ToDecimal(itemRow["TotalPrice"])
                        });
                }

                purchaseDetails.Add(new PurchaseDetails
                {
                    purchase = purchaseBill,
                    purchaseItems = itemList
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            throw;
        }
	}
}