@page "/supplier/details"
@inject ICurrentData CurrentCustomer
@inject IDatabaseHandler DatabaseHandler
@inject NavigationManager Navigation
@inject IFormFactor FormFactor
@inject IPDFGenerator PDFGenerator
@inject IAlertService AlertService
@inject IJSRuntime JS
@inject ITabService TabService
@inject IToastService ToastService

@using System.Diagnostics

<div class="container mt-4">
	<DialoBox dialogBox="statementDialog"></DialoBox>
	<div class="card shadow-lg">
		<div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
			<h4 class="mb-0">Supplier Details</h4>
			<button class="btn btn-sm btn-dark" @onclick="()=>{statementDialog.showDialog = true;StateHasChanged();}">💾 Download Statement</button>
		</div>
		<div class="card-body">
			<div class="row">
				<div class="col-md-6">
					<p><strong>Supplier ID:</strong> @supplierData.SupplierID</p>
					<p><strong>Name:</strong> @supplierData.Name</p>
					<p><strong>Contact:</strong> @supplierData.Contact</p>
					<p><strong>GSTIN:</strong> @supplierData.GSTIN</p>
					<p><strong>Address:</strong> @supplierData.Address</p>
					<p><strong>Area:</strong> @supplierData.Area</p>
					<p><strong>City:</strong> @supplierData.City</p>
					<p><strong>State:</strong> @supplierData.State</p>
					<p><strong>Country:</strong> @supplierData.Country</p>
					<p><strong>District:</strong> @supplierData.District</p>
					<p><strong>PinCode:</strong> @supplierData.PinCode</p>
					<p><strong>Nationality:</strong> @supplierData.Nationality</p>
				</div>
				<div class="col-md-6">
					<p><strong>Email:</strong> @supplierData.Email</p>

					<p><strong>Created By:</strong> @supplierData.CreatedBy</p>
					<p><strong>Created At:</strong> @supplierData.CreateAt</p>
					<p><strong>Updated By:</strong> @supplierData.LastUpdatedBy</p>
					<p><strong>Last Updated At:</strong> @supplierData.LastUpdatedAt</p>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="btn-group mt-4 ms-3" role="group" aria-label="Component Navigation">
	@foreach (ButtonType button in buttons)
	{
		<button type="button"
		class="btn btn-outline-primary @(currentComponent == button.componentNumber ? "active" : "")"
		disabled="@(currentComponent == button.componentNumber)"
		@onclick="() => SetCurrentComponent(button.componentNumber)">
			@button.Text
		</button>
	}
</div>
<Loader show="isLoading" customText="@loaderText" />

@components[currentComponent]

@code
{
	string loaderText = "Fetching Suppliers...";
	public class ButtonType
	{
		public string Text { get; set; }
		public int componentNumber { get; set; }
	}
	[Parameter]
	public Supplier supplierData { get; set; } = new Supplier();
	[Parameter] public bool isCredit { get; set; } = false;
	[Parameter] public bool isBill { get; set; } = false;
	List<VehicleType> vehicles { get; set; } = new List<VehicleType>();
	List<PurchaseDetails> bills { get; set; } = new List<PurchaseDetails>();
	List<PurchaseDetails> sivakasiBills { get; set; } = new List<PurchaseDetails>();
	List<PurchaseDetails> bypassBills { get; set; } = new List<PurchaseDetails>();
	List<SupplierCreditRecord> creditRecords { get; set; } = new List<SupplierCreditRecord>();
	List<PaymentReciptType> creditRecipts { get; set; } = new List<PaymentReciptType>();
	List<PaymentReciptType> sivakasiCreditRecipts { get; set; } = new List<PaymentReciptType>();
	List<PaymentReciptType> bypassCreditRecipts { get; set; } = new List<PaymentReciptType>();
	RenderFragment vehiclesFront, recordsFront, billsFront, ReceiptFront;

	List<RenderFragment> components = new List<RenderFragment>();

	string statementBranch = "Sivakasi";

	CustomDialogBox statementDialog = new CustomDialogBox();

	List<ButtonType> buttons = new List<ButtonType>
		{

		new ButtonType{Text="Purchases",componentNumber=0},
		new ButtonType{Text="Credit",componentNumber=1},
		new ButtonType{ Text = "Payment",componentNumber=2}
		};
	bool isLoading = false;
	int currentComponent = 0;

	DateTime? startDate;
	DateTime? endDate;

	public void SetCurrentComponent(int index)
	{
		currentComponent = index;
		StateHasChanged();
	}

	protected override void OnInitialized()
	{

		statementDialog = new CustomDialogBox
				{
					Title = "Download Excel",
					body = @<div class="mb-4">
		<label class="form-label fw-bold">Select Start Date, and End Date</label>

		<div class="row g-3 align-items-end">
			<!-- Branch Dropdown -->
			<!-- Start Date -->
			<div class="col-md-6">
				<label for="startDate" class="form-label">Start Date</label>
				<input type="date" id="startDate" @bind="startDate" class="form-control" />
			</div>

			<!-- End Date -->
			<div class="col-md-6">
				<label for="endDate" class="form-label">End Date</label>
				<input type="date" id="endDate" @bind="endDate" class="form-control" />
			</div>
		</div>
	</div>



	,
			footers = new List<FooterBtn>
			{
				new FooterBtn
				{
					Button = @<button class="btn btn-danger" @onclick="()=>{statementDialog.showDialog = false; StateHasChanged();}">CANCEL</button>
                },
				new FooterBtn
				{
						  Button = @<button class="btn btn-primary" @onclick="()=>{DownloadStatement(startDate,endDate);}">OK</button>
	        	},
					},
				OnCloase = EventCallback.Factory.Create(this, async () =>
			{
				statementDialog.showDialog = false;


				StateHasChanged();
			}),
			};



		billsFront = @<div class="col-md-6 w-100">
		<ListPuchases isSupplierView=true supplierForView="supplierData"/>
	</div>;

		recordsFront = @<div class="container mt-4">
		<div class="table-responsive">
			<table class="table table-striped table-bordered">
				<thead class="table-dark">
					<tr>
						<th>S. No</th>
						<th>Purchase No</th>
						<th>Ivoice No</th>
						<th>Branch</th>
						<th>Supplier Name</th>
						<th>Supplier Mobile</th>
						<th>Credit Amount</th>
						<th>Paid Amount</th>
						<th>Remaining Balance</th>
						<th>Due Date</th>
						<th>Status</th>
						<th>Created At</th>
					</tr>
				</thead>
				<tbody>
					@if (creditRecords.Count == 0)
				{
					<tr>
						<td colspan="10" class="text-center text-muted">No Credit found.</td>
					</tr>
				}
				else
				{
				int sno = 1;
					@foreach (var record in creditRecords)
				{
					<tr>
						<td>@sno</td>
						<td>@record.PurchaseBillNo</td>
						<td>@record.Invoice</td>
						<td>@record.Branch</td>
						<td>@record.Supplier.Name</td>
						<td>@record.Supplier.Contact</td>
						<td>@record.CreditAmount</td>
						<td>@record.PaidAmount</td>
						<td>@record.RemainingBalance</td>
						<td>@record.DueDate</td>
						<td>@record.Status</td>
						<td>@record.CreatedAt</td>
					</tr>
				sno++;
				}
				}
				</tbody>
			</table>
		</div>
	</div>
	;

		ReceiptFront =@<div class="col-md-6 w-100">
		<ListPayments isSupplierView=true supplierForView="supplierData"/>
	</div>
	;

		components.Add(billsFront);
		components.Add(recordsFront);
		components.Add(ReceiptFront);

		if (isCredit)
		{
			currentComponent = 1;
		}
		if (isBill)
		{
			currentComponent = 0;
		}



	}

	private void ViewBill(BillDetails bill)
	{
		string billNo = (bill.Bill.Branch == "Sivakasi" ? "SFR" : "BPR") + bill.Bill.BillNo.ToString().PadLeft(4, '0');
		Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
			{
			{"billData",bill}
			};
		TabService.OpenWithParameter("View Bill No: " + billNo, typeof(BillView), Parameters);
	}

	async void DownloadBill(BillDetails data)
	{
		if (FormFactor.GetFormFactor() == "Web")
		{
			string path = await PDFGenerator.GeneratePdfAsync(data, JS);
			await AlertService.ShowAlertAsync("Download PDF", path, "OK");
		}
		else
		{
			string path = await PDFGenerator.GeneratePdfAsync(data, null);
			await AlertService.ShowAlertAsync("Download PDF", path, "OK");
		}

	}
	int GetPriority(string accountType)
	{
		return accountType switch
		{
			"PURCHASE A/C" => 1,
			"CASH A/C" => 2,
			"BANK A/C" => 2,
			"CARD A/C" => 2,
			"PAYMENT A/C" => 3,
			_ => 4
		};
	}
	public async Task<List<CustomerStatement>> createLedgers()
	{
		List<CustomerStatement> customerStatements = new();
		List<PurchaseDetails> neededBills = sivakasiBills;
		List<PaymentReciptType> neededReceipts = sivakasiCreditRecipts;

		string getOthers = $@"SELECT c.*,a.* FROM CashBankLedger c JOIN LedgerAccounts a ON c.AccountID = a.AccountID WHERE c.TransactionType in ('OTHER','EXPENSE') AND c.ForWho = '{supplierData.SupplierID}' AND c.Particulars NOT LIKE '%Opening Balance%' AND a.AccountName = 'SUPPLIER A/C'";
		var res = await DatabaseHandler.ExecuteQueryAsync(getOthers);
		Debug.WriteLine("Bill Count " + neededBills.Count);
		Debug.WriteLine("Payment Count " + neededReceipts.Count);
		Debug.WriteLine("Other Count " + res.Count);
		if (res.Count > 0)
		{
			foreach (var row in res)
			{

				customerStatements.Add(new CustomerStatement
					{
						date = row["Date"] != null ? Convert.ToDateTime(row["Date"]) : DateTime.MinValue,
						credit = row["CrAmount"] != null ? Convert.ToDecimal(row["CrAmount"]) : 0,
						debit = row["DrAmount"] != null ? Convert.ToDecimal(row["DrAmount"]) : 0,
						particulars = row["Particulars"]?.ToString() ?? "",
						accountType = row["AccountName"]?.ToString() ?? "",
						type = row["TransactionType"]?.ToString() ?? ""
					});
			}
		}

		neededBills.Sort((a, b) => a.purchase.PurchaseDate.CompareTo(b.purchase.PurchaseDate));
		neededReceipts.Sort((a, b) => a.PaymentDate.CompareTo(b.PaymentDate));

		int i = 0, j = 0;

		while (i < neededBills.Count && j < neededReceipts.Count)
		{
			var billDate = neededBills[i].purchase.PurchaseDate;
			var receiptDate = neededReceipts[j].PaymentDate;

			if (billDate <= receiptDate)
			{
				var bill = neededBills[i++];

				// Always add the bill entry
				customerStatements.Add(new CustomerStatement
					{
						date = bill.purchase.PurchaseDate,
						debit = bill.purchase.TotalAmount,
						credit = 0,
						particulars = "To purchase for Bill No : " + bill.purchase.InvoiceNumber,
						accountType = "PURCHASE A/C",
						type = TransactionType.PURCHASE.ToString()
					});

				// Add immediate payment if any
				if (bill.purchase.type  == PaymentType.CASH)
				{
					customerStatements.Add(new CustomerStatement
						{
							date = bill.purchase.PurchaseDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
							debit = 0,
							credit = bill.purchase.TotalAmount,
							particulars = "By cash received for Bill No : " + bill.purchase.InvoiceNumber,
							accountType = "CASH A/C",
							type = TransactionType.PURCHASE.ToString()
						});
				}
				// if (bill.purchase.type == PaymentType.CREDIT)
				// {
				// 	customerStatements.Add(new CustomerStatement
				// 		{
				// 			date = bill.Bill.BillDate, Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
				// 			credit = 0,
				// 			debit = bill.BillPayment.CardAmount,
				// 			particulars = "By card received for Bill No: " + bill.Bill.BillNo,
				// 			accountType = "CARD A/C",
				// 			type = TransactionType.RECEIPT.ToString()
				// 		});
				// }

				// if (bill.BillPayment.BankAmount > 0)
				// {
				// 	customerStatements.Add(new CustomerStatement
				// 		{
				//date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
				// 			credit = bill.BillPayment.BankAmount,
				// 			debit = 0,
				// 			particulars = "By credit for Bill No: " + bill.Bill.BillNo,
				// 			accountType = "CUSTOMER CREDIT A/C",
				// 			type = TransactionType.RECEIPT.ToString()
				// 		});
				// }

			}
			else
			{
				var receipt = neededReceipts[j++];

				customerStatements.Add(new CustomerStatement
					{
						date = receipt.PaymentDate,
						credit = receipt.TotalAmountPaid,
						debit = 0,
						particulars = "By payment for payment No : " + receipt.PaymentNo,
						accountType = "PAYMENT A/C",
						type = TransactionType.PAYMENT.ToString()
					});
			}
		}

		// Add remaining bills
		while (i < neededBills.Count)
		{
			var bill = neededBills[i++];

			customerStatements.Add(new CustomerStatement
				{
					date = bill.purchase.PurchaseDate,
					credit = 0,
					debit =  bill.purchase.TotalAmount,
					particulars = "To purchase for purchase No : " + bill.purchase.InvoiceNumber,
					accountType = "PURCHASE A/C",
					type = TransactionType.PURCHASE.ToString()
				});

			// Add immediate payment if any
			if (bill.purchase.type == PaymentType.CASH)
			{
				customerStatements.Add(new CustomerStatement
					{
						date = bill.purchase.PurchaseDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
						debit = 0,
						credit = bill.purchase.TotalAmount,
						particulars = "By cash paid for purchase No : " + bill.purchase.InvoiceNumber,
						accountType = "CASH A/C",
						type = TransactionType.PAYMENT.ToString()
					});
			}

			// if (bill.BillPayment.BankAmount > 0)
			// {
			// 	customerStatements.Add(new CustomerStatement
			// 		{
			//date = bill.Bill.BillDate, // Or maybe: bill.Bill.BillDate.AddSeconds(1) to ensure order
			// 			credit = bill.BillPayment.BankAmount,
			// 			debit = 0,
			// 			particulars = "By credit for Bill No: " + bill.Bill.BillNo,
			// 			accountType = "CUSTOMER CREDIT A/C",
			// 			type = TransactionType.RECEIPT.ToString()
			// 		});
			// }
		}

		// Add remaining receipts
		while (j < neededReceipts.Count)
		{
			var receipt = neededReceipts[j++];

			customerStatements.Add(new CustomerStatement
				{
					date = receipt.PaymentDate,
					credit = receipt.TotalAmountPaid,
					debit = 0,
					particulars = "By payment for payment No: " + receipt.PaymentNo,
					accountType = "PAYMENT A/C",
					type = TransactionType.PAYMENT.ToString()
				});
		}


		foreach (var entry in customerStatements)
		{
			entry.date = entry.date.Date; // Strip time to keep only date
		}

		// Optional: sort again in case dates are equal or include time later
		customerStatements.Sort((a, b) =>
	{
		// Sort by date only (ignoring time)
		int dateCompare = a.date.Date.CompareTo(b.date.Date);
		if (dateCompare != 0) return dateCompare;

		// If dates are same, use priority (purchase first)
		int priorityCompare = GetPriority(a.accountType).CompareTo(GetPriority(b.accountType));
		if (priorityCompare != 0) return priorityCompare;

		// Optional: fallback on actual datetime or particulars
		return a.date.CompareTo(b.date);
	});



		return customerStatements;
	}

	public async Task<decimal> GetOpeningBalanceAsync(List<CustomerStatement> customerStatements, DateTime? statementStartDate)
	{

		if (statementStartDate == null)
			return 0;

		string query = @"
    SELECT IFNULL(SUM(DrAmount), 0) - IFNULL(SUM(CrAmount), 0) AS OpeningBalance
    FROM CashBankLedger
    WHERE AccountID = @accountID AND ForWho = @supplierID AND Particulars LIKE @narration
";

		Dictionary<string, dynamic> parameters = new Dictionary<string, dynamic>
		{
			{"@accountID",19},
			{"@supplierID",supplierData.SupplierID},
			{"@narration","%Opening Balance%"}
		};

		var resultList = await DatabaseHandler.ExecuteQueryAsync(query, parameters);

		// Filter only entries before the statementStartDate
		var priorEntries = customerStatements
			.Where(cs => cs.date < statementStartDate)
			.ToList();

		decimal openingBalance = 0;

		if (resultList.Count > 0 && resultList[0].ContainsKey("OpeningBalance"))
		{
			var value = resultList[0]["OpeningBalance"];
			if (value != null && value != DBNull.Value)
			{
				openingBalance = Convert.ToDecimal(value);
			}
		}

		foreach (var entry in priorEntries)
		{
			if (entry.accountType == "PURCHASE A/C")
			{
				openingBalance += entry.debit; // Customer owes us more
			}
			else if (entry.accountType == "CASH A/C" || entry.accountType == "BANK A/C" || entry.accountType == "CARD A/C")
			{
				openingBalance -= entry.credit; // Customer paid us
			}
			else if (entry.accountType == "PAYMENT A/C")
			{
				openingBalance -= entry.credit; // Receipt is money received, reduce the balance
			}
			else if (entry.accountType == "SUPPLIER A/C")
			{
				if (entry.credit > 0)
				{
					openingBalance -= entry.credit;
				}
				else if (entry.debit > 0)
				{
					openingBalance += entry.debit;
				}
			}
		}

		return openingBalance;


	}

	async void DownloadStatement(DateTime? startDate, DateTime? endDate)
	{
		loaderText = "Generating Statement...";
		isLoading = true;
		bills = await FetchData(supplierData);

		sivakasiBills = bills.Where((b => b.purchase.Branch == "Sivakasi")).ToList();
		bypassBills = bills.Where((b => b.purchase.Branch == "ByPass")).ToList();

		creditRecipts = await DatabaseHandler.GetPaymentReceipts(true, supplierData.SupplierID);
		sivakasiCreditRecipts = creditRecipts.Where((cr) => cr.Branch == "Sivakasi").ToList();
		bypassCreditRecipts = creditRecipts.Where((cr) => cr.Branch == "ByPass").ToList();
		List<CustomerStatement> customerStatements = await createLedgers(); ;

		decimal openingBalance = await GetOpeningBalanceAsync(customerStatements, startDate);
		if (startDate != null && endDate != null)
		{


			customerStatements = customerStatements
				.Where(x => x.date >= startDate && x.date <= endDate)
				.ToList();
		}



		if (customerStatements.Count > 0)
		{

			string path = await PDFGenerator.GenerateSupplierStatement(customerStatements, openingBalance, supplierData,startDate?.ToString("dd/MM/yyyy"),endDate?.ToString("dd/MM/yyyy"));

			ToastService.ShowToast($"SavedAt = {path}", ToastType.sucess);
		}
		else
		{
			ToastService.ShowToast("No Records There", ToastType.info);
		}

		loaderText = "Fetching Supplier...";
		isLoading = false;
		StateHasChanged();
	}
	public async Task<List<PurchaseDetails>> FetchData(Supplier supplier)
	{
		try
		{
			List<PurchaseDetails> purchaseBills = new();
			

			// 1. Fetch all purchase bills
			string billsQuery = $@"SELECT pb.*,pb.CreatedAt AS PurchaseCreatedAt,s.*,s.CreatedAt AS SupplierCreatedAt
FROM PurchaseBills pb
JOIN Suppliers s ON pb.SupplierID = s.SupplierID WHERE pb.SupplierID = '{supplier.SupplierID}'";

			var billsResult = await DatabaseHandler.ExecuteQueryAsync(billsQuery, null);
			Debug.WriteLine(billsResult.Count);
			var allResults = new List<(Purchase, List<PurchaseItems>)>();

			foreach (var billRow in billsResult)
			{
				var purchaseBillId = Convert.ToInt32(billRow["PurchaseBillID"]);

				var purchaseBill = new Purchase
					{
						PurchaseBillID = purchaseBillId,
						Branch = billRow["Branch"].ToString(),
						InvoiceNumber = billRow["InvoiceNumber"].ToString(),
						taxType = Enum.Parse<TaxType>(billRow["TaxType"].ToString()),
						BillingYear = Convert.ToInt32(billRow["BillingYear"]),
						BillNo = Convert.ToInt32(billRow["BillNo"]),
						SupplierID = billRow["SupplierID"].ToString() ?? "",
						Supplier = new Supplier
						{
							SupplierID = billRow["SupplierID"].ToString() ?? "",
							Name = billRow["Name"].ToString() ?? "",
							GSTIN = billRow["GSTIN"].ToString() ?? "",
							Contact = billRow["Contact"].ToString() ?? ""
						},
						type = Enum.Parse<PaymentType>(billRow["PaymentType"].ToString()),
						PurchaseDate = Convert.ToDateTime(billRow["PurchaseDate"]),
						CreatedAt = Convert.ToDateTime(billRow["PurchaseCreatedAt"]),
						TotalAmount = Convert.ToDecimal(billRow["TotalAmount"]),
						DiscountAmount = Convert.ToDecimal(billRow["DiscountAmount"]),
						GrandTotal = Convert.ToDecimal(billRow["GrandTotal"]),
						Notes = billRow["Notes"].ToString() ?? ""
					};

				// 2. Fetch items for each bill
				string itemsQuery = @"
            SELECT
    p.*,
    pr.BrandID,
    pr.ProductID,
    br.*
FROM
    PurchaseItems p
JOIN
    Product pr
    ON pr.ProductID = p.ProductID
JOIN
    Brands br
    ON br.BrandID = pr.BrandID
WHERE
    p.PurchaseBillID = @PurchaseBillID;
";

				var itemParams = new Dictionary<string, object>
			{
				{ "@PurchaseBillID", purchaseBillId }
			};

				var itemsResult = await DatabaseHandler.ExecuteQueryAsync(itemsQuery, itemParams);

				var itemList = new List<PurchaseItems>();

				foreach (var itemRow in itemsResult)
				{
					itemList.Add(new PurchaseItems
						{
							ProductID = itemRow["ProductID"].ToString(),
							ProductName = itemRow["ItemName"].ToString(),
							BrandName = itemRow["BrandName"].ToString(),
							Quantity = Convert.ToInt32(itemRow["Quantity"]),
							DiscountType = Enum.Parse<DiscountType>(itemRow["DiscountType"].ToString()),
							DiscountValue = Convert.ToDecimal(itemRow["DiscountValue"]),
							DiscountScope = Enum.Parse<DiscountScope>(itemRow["DiscountScope"].ToString()),
							FrightValue = Convert.ToDecimal(itemRow["Fright"].ToString()),
							TaxRate = Enum.Parse<TaxRate>(itemRow["TaxRate"].ToString()),
							UnitPrice = Convert.ToDecimal(itemRow["UnitPrice"]),
							TotalPrice = Convert.ToDecimal(itemRow["TotalPrice"])
						});
				}

				purchaseBills.Add(new PurchaseDetails
					{
						purchase = purchaseBill,
						purchaseItems = itemList
					});
			}
			return purchaseBills;
		}
		catch (Exception ex)
		{
			Console.WriteLine("Error: " + ex.Message);
			throw;
		}
	}
	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		vehicles.Clear();
		creditRecords.Clear();
		bills.Clear();
		creditRecipts.Clear();
		

		string creditQuery = $"SELECT c.*,b.* FROM SupplierCreditRecord c JOIN PurchaseBills b ON b.PurchaseBillID = c.PurchaseBillID WHERE c.SupplierID = '{supplierData.SupplierID}' AND c.Status not in ('Paid')";
		var res1 = await DatabaseHandler.ExecuteQueryAsync(creditQuery);
		if (res1.Count > 0)
		{
			foreach (var row in res1)
			{
				creditRecords.Add(new SupplierCreditRecord
					{
						SupplierCreditID = Convert.ToUInt64(row["SupplierCreditID"]),
						SupplierID = row["SupplierID"].ToString() ?? "",
						PurchaseBillNo = row["BillNo"].ToString() ?? "",
						Branch = row["Branch"].ToString() ?? "",
						PurchaseBillID = row["PurchaseBillID"] == DBNull.Value ? null : Convert.ToUInt64(row["PurchaseBillID"]),
						CreditAmount = Convert.ToDecimal(row["CreditAmount"]),
						PaidAmount = Convert.ToDecimal(row["PaidAmount"]),
						RemainingBalance = row["RemainingBalance"] == DBNull.Value ? null : Convert.ToDecimal(row["RemainingBalance"]),
						DueDate = Convert.ToDateTime(row["DueDate"]),
						Status = row["Status"].ToString() ?? "",
						CreatedAt = Convert.ToDateTime(row["CreatedAt"]),
						Supplier = supplierData
					});
			}
		}
		
		Debug.WriteLine(vehicles.Count);
		Debug.WriteLine(bills.Count);
		Debug.WriteLine(creditRecords.Count);
		Debug.WriteLine(creditRecipts.Count);
		isLoading = false;
	}
}
