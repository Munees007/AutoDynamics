@page "/supplier/manage"
@inject IDatabaseHandler DatabaseHandler
@inject NavigationManager Navigation
@inject ICurrentData CurrentData
@inject IAlertService AlertService
@inject IMyLocalStorageService MyLocalStorageService
@inject ITabService TabService
<h1 class="text-center mt-3">Supplier List</h1>


<div class="container mt-4">
    <input autocomplete="off" type="text" class="form-control mb-3" placeholder="Search by Supplier Name, Contact or Supplier ID"
    @bind="searchTerm" @oninput="FilterData" />
</div>

<div class="container mt-4">
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Supplier ID</th>
                    <th>Name</th>
                    <th>Contact</th>
                    <th>City</th>
                    <th>GSTIN</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredCustomers.Count == 0)
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted">No Suppliers found.</td>
                    </tr>
                }
                else
                {
                    @foreach (var customer in filteredCustomers)
                    {
                        <tr>
                            <td>@customer.SupplierID</td>
                            <td>@customer.Name</td>
                            <td>@customer.Contact</td>
                            <td>@customer.City</td>
                            <td>@customer.GSTIN</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => ViewCustomer(customer    )">View</button> 
                                <button class="btn btn-dark btn-sm" @onclick="() => UpdateCustomer(customer)">Update</button> 

                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteCustomer(customer.SupplierID)">Delete</button> 

                            </td> 
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
<Loader show="isLoading" customText="Fetching Suppliers"/>
@code {
    private string searchTerm = "";
    private bool isAdmin = false,isLoading = false;
    public List<Supplier> customers { get; set; } = new();
    public List<Supplier> filteredCustomers { get; set; } = new List<Supplier>();
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        isAdmin = await MyLocalStorageService.GetItemAsync("IsAdmin") == "true" ? true : false;
        await fetchData();
        filteredCustomers = customers;
        isLoading = false;
    }

    public void FilterData(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString().Replace(" ", "").Replace(".", "") ?? "";
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCustomers = customers;
            return;
        }
        else
        {

            filteredCustomers = customers
                .Where(c =>
                    c.SupplierID.Replace(" ", "").Replace(".", "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.Name.Replace(" ", "").Replace(".", "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.Contact.Replace(" ", "").Replace(".", "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                    )
                .ToList();
        }
        StateHasChanged();
    }

    public async Task fetchData()
    {
        customers.Clear();
        string query = "SELECT * FROM Suppliers";
        var result = await DatabaseHandler.ExecuteQueryAsync(query);
        customers = new List<Supplier>();
        if (result.Count > 0)
        {
            foreach (var row in result)
            {
                customers.Add(new Supplier
                    {
                        SupplierID = row["SupplierID"].ToString() ?? "",
                        Name = row["Name"].ToString() ?? "",
                        Contact = row["Contact"].ToString() ?? "",
                        GSTIN = row["GSTIN"].ToString() ?? "",
                        Address = row["Address"].ToString() ?? "",
                        Area = row["Area"].ToString() ?? "",
                        City = row["City"].ToString() ?? "",
                        State = row["State"].ToString() ?? "",
                        Country = row["Country"].ToString() ?? "",
                        District = row["District"].ToString() ?? "",
                        Nationality = row["Nationality"].ToString() ?? "",
                        PinCode = row["PinCode"].ToString() ?? "",
                        LastUpdatedBy = row["LastUpdatedBy"].ToString() ?? "",
                        Email = row["Email"].ToString() ?? "",
                        CreatedBy = row["CreatedBy"].ToString() ?? "",
                        CreateAt = row["CreatedAt"].ToString() ?? "",
                        LastUpdatedAt = row["LastUpdatedAt"].ToString() ?? ""
                    });
            }
        }
    }

    private void ViewCustomer(Supplier user)
    {
        Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
        {
            { "supplierData",user}
        };
        TabService.OpenWithParameter("Viewing Supplier: " + user.Name, typeof(SingleSupplierView),Parameters);
    }

    private async Task DeleteCustomer(string customerId)
    {
        string query = $"DELETE FROM Suppliers WHERE SupplierID = '{customerId}'";
        await DatabaseHandler.ExecuteQueryAsync(query);
        await AlertService.ShowAlertAsync("Delete Supplier:", "Deleted Successfully", "OK");
        await fetchData();
        StateHasChanged();
    }

    private void UpdateCustomer(Supplier user)
    {
        Dictionary<string, dynamic> Parameters = new Dictionary<string, dynamic>
        {
            { "updatingUser",user}
        };
        TabService.OpenWithParameter("Updating Supplier: " + user.Name, typeof(UpdateSupplier),Parameters);
    }
}
