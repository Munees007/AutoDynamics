@page "/purchase"
@using System.Globalization
@using System.Diagnostics
@inject IDatabaseHandler DatabaseHandler
@inject IAlertService AlertService
@inject IMyLocalStorageService MyLocalStorageService
@inject IPDFGenerator PDFGenerator
@inject IFormFactor FormFactor
@inject IToastService ToastService
@inject IJSRuntime JS
@inject IDatabaseHandler DatabaseHandler
<div style="max-width:100%">
    <h3 class="text-primary">Purchase</h3>

    <div class="container w-100 m-3">
        <div class="row mb-4">
            <div class="col-md-4">
                <label class="form-label">Invoice No:</label>
                <input disabled="@isViewing" autocomplete="off" type="text" class="form-control" @bind="purchase.InvoiceNumber" required>
            </div>
            <div class="col-md-4">
                <label class="form-label">Tax Type:</label>
                <select disabled="@isViewing" @bind="purchase.taxType" class="form-select" style="width:fit-content">
                    <option value="@TaxType.INCLUSIVE_TAX">INCLUSIVE</option>
                    <option value="@TaxType.EXCLUSIVE_TAX">EXCLUSIVE</option>
                </select>
            </div>
        </div>
        <!-- Bill Details -->
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Date</label>
                <InputDate disabled="@isViewing"  id="Date"  class="form-control" @bind-value="purchase.PurchaseDate" required/>
            </div>

            <!-- Customer Field -->
            <div class="col-md-4">
                <label class="form-label">Supplier</label>

                <div class="input-group">
                    <input disabled="@isViewing" @onkeydown="HandleCustomerKey" autocomplete="off" type="text" id="Customer" @bind="CustomerSearch" @oninput="OnCustomerSearch" class="form-control" placeholder="Search by ID, Name, or Contact" required>
                    <button type="button" class="btn btn-outline-secondary" @onclick="NecessaryData">
                        🔄
                    </button>
                </div>
                <SearchSelect @ref="customerListRef" Items="filteredSuppliers" OnSelect="@(c=> SelectCustomer(c))" T="Supplier" showSuggestions="ShowCustomerSuggestion" ShowSuggestionsChanged="@((bool val) => ShowCustomerSuggestion = val)">
                    <ItemTemplate Context="cust">
                        <div>@cust.SupplierID - @cust.Name - @cust.Contact</div>
                    </ItemTemplate>
                </SearchSelect>
                <p>@SelectedCustomer</p>
            </div>
            <div class="col-md-4">
                <label class="form-label">Payment Type</label>
                <select disabled="@isViewing" @bind="purchase.type" class="form-select" style="width:fit-content">
                    <option value="@PaymentType.CASH">CASH</option>
                    <option value="@PaymentType.CREDIT">CREDIT</option>
                </select>
            </div>

        </div>


        @if (showCustomerForm)
        {
            <div class="mt-4 p-3">
                <h1 class="text-black">Add Customer</h1>
                <SupplierForm isUpdating=false  isBilling=true />
            </div>
        }

        <hr />

        <!-- Product Items (Product) -->
        <h5>Product Items</h5>
        <button disabled="@isViewing" class="btn btn-success btn-sm mb-2" @onclick="AddNewItem">Add Item</button>

        <div class="" style="overflow-x:auto;">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th style="min-width:100px">Brand</th>
                        <th style="min-width:200px">Item</th>
                        <th style="min-width:100px">Quantity</th>
                        <th style="min-width:200px">Unit Price</th>
                        <th style="min-width:50px">Discount Type</th>
                        <th style="min-width:100px">Discount Value</th>
                        <th style="min-width:100px">Apply On</th>
                        <th style="min-width:80px">Tax Rate</th>
                        <th style="min-width:80px">Fright</th>
                        <th style="min-width:150px">Taxable Value</th>
                        <th style="min-width:100px">CGST</th>
                        <th style="min-width:100px">SGST</th>
                        <th style="min-width:150px">Total Price</th>
                        <th style="min-width:100px">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @for(int i=0;i<purchaseItems.Count;i++)
                    {
                        var item = purchaseItems[i];
                        item.index = i;

                        <tr>
                            <td style="min-width:140px">
                                <input disabled="@isViewing" value="@item.BrandName" @onkeydown="(e)=>{HandleBrandKey(e,item.index);}" autocomplete="off" type="text" @oninput="(e)=>{OnBrandsSearch(e,item.index);}" class="form-control " placeholder="Search by ID, Name" required>
                                <SearchSelect @ref="item.brandListRef" Items="filteredBrands" OnSelect="@(br=> {
                                                                                                        item.BrandName = br.BrandName;
                                                                                                        item.BrandID = br.BrandID;
                                                                                                        item.showBrandSuggestions = false; StateHasChanged();
                                                                                                 })" T="BrandType" showSuggestions="item.showBrandSuggestions" ShowSuggestionsChanged="@((bool val) => item.showBrandSuggestions = val)">
                                    <ItemTemplate Context="brand">
                                        <div>@brand.BrandName</div>
                                    </ItemTemplate>
                                </SearchSelect>
                            </td>
                            <td style="min-width:140px">
                                <input title="@item.ProductName" disabled="@isViewing" value="@item.ProductName" @onkeydown="(e)=>{HandleProductKey(e,item.index);}"  autocomplete="off" type="text"   @oninput="(e)=>{OnProductsSearch(e,item.index);}" class="form-control " placeholder="Search by ID, Name" required>
                                <SearchSelect @ref="item.productListRef" Items="filteredProducts" OnSelect="@(c=> {

                                                                                                        item.ProductID = c.ProductID;ProductSearch = $"{c.Brand} {c.Size} - {c.Pattern} ({c.TubeOrTubeless})";item.ProductName = $"{c.Brand} {c.Size} - {c.Pattern} ({c.TubeOrTubeless})";item.Product = c;
                                                                                                        item.showSuggestions = false; StateHasChanged();
                                                                                                 })" T="ProductType" showSuggestions="item.showSuggestions" ShowSuggestionsChanged="@((bool val) => item.showSuggestions = val)">
                                    <ItemTemplate Context="cust">
                                        <div>@cust.Size - @cust.Pattern (@cust.TubeOrTubeless)</div>
                                    </ItemTemplate>
                                </SearchSelect>
                            </td>
                            <td><input disabled="@isViewing" autocomplete="off" type="number" class="form-control" @bind="item.Quantity" min="1"></td>
                            <td style="min-width:120px"><input disabled="@isViewing" autocomplete="off" type="number" class="form-control" @bind="item.UnitPrice" min="0" step="0.01"></td>

                            <!-- New Discount UI Fields -->
                            <td >
                                <select disabled="@isViewing" @bind="item.DiscountType" class="form-select" style="width:fit-content" >
                                    <option value="@DiscountType.AMOUNT">₹</option>
                                    <option value="@DiscountType.PERCENT">%</option>
                                </select>
                            </td>
                            <td>
                                <input disabled="@isViewing" @bind="item.DiscountValue" type="number" class="form-control"  min="0" step="0.01" />
                            </td>
                            <td>
                                <select disabled="@isViewing" @bind="item.DiscountScope" class="form-select" style="width:fit-content" >
                                    <option value="@DiscountScope.PER_UNIT">Per Unit</option>
                                    <option value="@DiscountScope.TOTAL">All Quantity</option>
                                </select>
                            </td>
                            <td>
                                <select disabled="@isViewing" @bind="item.TaxRate" class="form-select" style="width:fit-content">
                                    <option value="@TaxRate.TAX_28">28%</option>
                                    <option value="@TaxRate.TAX_18">18%</option>
                                </select>
                            </td>
                            <td>
                                <input disabled="@isViewing" @bind="item.FrightValue" type="number" class="form-control" min="0" step="0.01" />
                            </td>
                            @* Tax Calculation *@
                            @{

                                var subTotal = item.Quantity * item.UnitPrice;
                                decimal discount = 0;

                                if (item.DiscountType == DiscountType.AMOUNT)
                                {
                                    discount = item.DiscountScope == DiscountScope.PER_UNIT
                                    ? item.DiscountValue * item.Quantity
                                    : item.DiscountValue;
                                }
                                else if (item.DiscountType == DiscountType.PERCENT)
                                {
                                    discount = item.DiscountScope == DiscountScope.PER_UNIT
                                    ? (item.UnitPrice * item.DiscountValue / 100m) * item.Quantity
                                    : (subTotal * item.DiscountValue / 100m);
                                }


                                purchase.DiscountAmount += discount;
                                var total = (subTotal - discount) + item.FrightValue;
                                var cgst = 0m;
                                var sgst =0m;
                                if(item != null)
                                {
                                    item.TaxableValue = purchase.taxType == TaxType.INCLUSIVE_TAX ? (item.TaxRate == TaxRate.TAX_18 ? Math.Round(total / 1.18m, 2) : Math.Round(total / 1.28m, 2)) : total;
                                    cgst = item.TaxRate == TaxRate.TAX_18 ? Math.Round(item.TaxableValue * (9 / 100m), 2) : Math.Round(item.TaxableValue * (14 / 100m), 2);
                                    sgst = item.TaxRate == TaxRate.TAX_18 ? Math.Round(item.TaxableValue * (9 / 100m), 2) : Math.Round(item.TaxableValue * (14 / 100m), 2);
                                    item.TotalPrice = Math.Round(item.TaxableValue + cgst + sgst);

                                }

                            }

                            <td>@item.TaxableValue.ToString("F2")</td>
                            <td>@cgst.ToString("F2")</td>
                            <td>@sgst.ToString("F2")</td>
                            <td>@item.TotalPrice</td>

                            <td>
                                <button disabled="@isViewing" class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">Remove</button>
                            </td>
                        </tr>
                    }

                </tbody>

            </table>
        </div>
        <hr />
        <!-- Total and Submit -->
        <div class="row">
            <div class="col-md-8">
                <div class="card border-primary shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title text-primary">Purchase Summary</h5>
                        <p class="card-text mb-1"><strong>Total Taxable Value:</strong> ₹@taxableTotal.ToString("N2")</p>
                        <p class="card-text mb-1"><strong>CGST Total:</strong> ₹@cgstTotal.ToString("N2")</p>
                        <p class="card-text mb-1"><strong>SGST Total:</strong> ₹@sgstTotal.ToString("N2")</p>
                        <hr />
                        <h4 class="card-text text-success"><strong>Grand Total: ₹@TotalAmount.ToString("N2")</strong></h4>
                    </div>
                </div>
            </div>

            <div class="col-md-4 d-flex align-items-end justify-content-end">
                <button class="btn btn-primary mb-2" @onclick="HandleSubmit">Submit Purchase</button>
            </div>
        </div>




    </div>

</div>
<Loader show="isProcessing" customText="@loaderText" />
@code {
    [Parameter] public bool isUpdating { set; get; } = false;
    [Parameter] public PurchaseDetails updateData { set; get; } = new();
    [Parameter] public bool isViewing { set; get; } = false;
    private string loaderText = "";
    private string CustomerSearch = "";
    private string ProductSearch = "";

    private string SelectedCustomer = "No Supplier Selected";
    private string SelectedVehicle = "No Vehicle Selected";
    private bool ShowCustomerSuggestion = false;
    private bool showProductsSuggestion = false;
    private string BrandSearch = "";
    private bool ShowBrandSuggestion = false;
    private string SelectedBranch = "Sivakasi";
    private string CustomerId = "";
    private decimal TotalAmount => purchaseItems.Sum(x => x.TotalPrice);
    private decimal Discount = 0;
    private bool restrictCashBox = false;
    private decimal taxableTotal => purchaseItems.Sum(x=> x.TaxableValue);
    private decimal cgstTotal => purchaseItems.Sum(item => item.TaxRate == TaxRate.TAX_18 ? Math.Round(item.TaxableValue * (9 / 100m), 2) : Math.Round(item.TaxableValue * (14 / 100m), 2));
    private decimal sgstTotal => purchaseItems.Sum(item => item.TaxRate == TaxRate.TAX_18 ? Math.Round(item.TaxableValue * (9 / 100m), 2) : Math.Round(item.TaxableValue * (14 / 100m), 2));
    private decimal CashAmount = 0, BankAmount = 0, CardAmount = 0, UPIAmount = 0;
    private bool showCustomerForm = false;
    private bool showVehicleForm = false;
    private bool isAdmin = false;
    private bool isProcessing = false;
    private Purchase purchase = new();

    private List<PurchaseItems> oldpurchaseItems = new();


    private List<PurchaseItems> purchaseItems = new();

    private List<Supplier> suppliers { set; get; } = new List<Supplier>();
    private List<ProductType> products { set; get; } = new List<ProductType>();
    private List<BrandType> brands { set; get; } = new List<BrandType>();

    private List<Supplier> filteredSuppliers { set; get; } = new List<Supplier>();
    private List<ProductType> filteredProducts { set; get; } = new List<ProductType>();
    private List<BrandType> filteredBrands { set; get; } = new List<BrandType>();

    private SearchSelect<Supplier> customerListRef;

    private List<LedgerAcccounts> AccountTypes = new();

    private SearchSelect<BrandType> brandListRef;
    public void HandleCustomerKey(KeyboardEventArgs e)
    {
        customerListRef?.HandleKeyDown(e);
    }

    public void HandleProductKey(KeyboardEventArgs e,int index)
    {
        purchaseItems[index].productListRef?.HandleKeyDown(e);
    }

    public void HandleBrandKey(KeyboardEventArgs e, int index)
    {
        purchaseItems[index].brandListRef?.HandleKeyDown(e);
    }


    protected override async Task OnInitializedAsync()
    {
        loaderText = "Fetching Data";
        isProcessing = true;
        isAdmin = await MyLocalStorageService.GetItemAsync("IsAdmin") == "true" ? true : false;
        if (isUpdating)
        {
            purchase = updateData.purchase;
            purchaseItems = updateData.purchaseItems;
            oldpurchaseItems = updateData.purchaseItems.Select(data => new PurchaseItems
            {
                Quantity = data.Quantity,
                ProductID = data.ProductID,
                Product = data.Product
            }).ToList();

            CustomerSearch = updateData.purchase.SupplierID;
            SelectCustomer(updateData.purchase.Supplier);
            SelectedBranch = updateData.purchase.Branch;

            StateHasChanged();
        }
        if (!isAdmin)
        {
            string branch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";
            purchase.Branch = branch;
            SelectedBranch = branch;
            Debug.WriteLine(branch);
        }

        if (isViewing)
        {
            purchase = updateData.purchase;
            purchaseItems = updateData.purchaseItems;

            CustomerSearch = updateData.purchase.SupplierID;
            Debug.WriteLine("CustomerSearch = " + CustomerSearch);
            Debug.WriteLine("SupplierID = " + updateData.purchase.SupplierID);
            SelectCustomer(updateData.purchase.Supplier);
            SelectedBranch = updateData.purchase.Branch;
            StateHasChanged();
        }
        await NecessaryData();
        loaderText = "";
        isProcessing = false;
    }
    public async Task SubmitFormVehicle(VehicleType vehicle)
    {


    }
    public async Task SubmitForm(Supplier supplier)
    {
        Debug.WriteLine("Triggered");
        await NecessaryData();
        CustomerSearch = $"{supplier.SupplierID}";
        SelectedCustomer = $"{supplier.Name}-{supplier.Contact}";
        purchase.Supplier = supplier;
        purchase.SupplierID = purchase.SupplierID;
        showCustomerForm = false;
        StateHasChanged();
    }
    public void manageCredit()
    {
        Debug.WriteLine("changed");
        decimal temp = CashAmount + UPIAmount + CardAmount;
        if (temp < TotalAmount)
        {
            BankAmount = TotalAmount - temp;
        }
        else
        {
            BankAmount = 0;
        }
        StateHasChanged();
    }
    public void setCashAmount()
    {
        CashAmount = TotalAmount;
        BankAmount = 0;
        UPIAmount = 0;
        CardAmount = 0;
        if (!isAdmin)
        {
            restrictCashBox = true;
        }
        StateHasChanged();
    }

    public async void HandleSubmit()
    {
        Debug.WriteLine(SelectedBranch);
        loaderText = isUpdating ? "Updating Purchase Bill" : "Adding Purchase Bill";
        isProcessing = true;
        if (restrictCashBox)
        {
            CashAmount = TotalAmount;
        }
        manageCredit();



        purchase.Branch = SelectedBranch;
        purchase.BillingYear = DateTime.Now.Year;

        purchase.TotalAmount = TotalAmount;

        List<Ledger> ledgers = new List<Ledger>();

        if(purchase.type == PaymentType.CASH)
        {
            Ledger cashLedger = new Ledger
            {
                    AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "CASH A/C")?.AcccountId ?? 0,

                    DR_Amount = purchase.TotalAmount,
                    Particulars = $"Payed cash for {purchase.Supplier.Name}",
                    TransactionType = TransactionType.PURCHASE,
                    Date = purchase.PurchaseDate,
                    Balance = 0,
                    Branch = purchase.Branch,
                    CR_Amount = 0,
            };
            ledgers.Add(cashLedger);
        }
        else
        {
            Ledger bankLedger = new Ledger
            {
                    AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "BANK A/C")?.AcccountId ?? 0,

                    DR_Amount = purchase.TotalAmount,
                    Particulars = $"Payed through Bank for {purchase.Supplier.Name}",
                    TransactionType = TransactionType.PURCHASE,
                    Date = purchase.PurchaseDate,
                    Balance = 0,
                    Branch = purchase.Branch,
                    CR_Amount = 0,
            };
            ledgers.Add(bankLedger);
        }

        Ledger purchaseLedger = new Ledger
        {
                AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "PURCHASE A/C")?.AcccountId ?? 0,
            
                CR_Amount = purchase.TotalAmount,
                Particulars = $"Purchased from {purchase.Supplier.Name}",
                TransactionType = TransactionType.BILL,
                Date = purchase.PurchaseDate,
                Balance = 0,
                Branch = purchase.Branch,
                DR_Amount = 0,
        };
        ledgers.Add(purchaseLedger);



        PurchaseDetails finalBill = new PurchaseDetails
            {
                purchase = purchase,
                purchaseItems = purchaseItems,
            };
        try
        {
            if (isUpdating)
            {
                await DatabaseHandler.InsertPurchaseBillAsync(finalBill.purchase, finalBill.purchaseItems, true,ledgers);
                ToastService.ShowToast("Purchase added successfully", ToastType.sucess);
            }
            else
            {
                int billNo = await DatabaseHandler.InsertPurchaseBillAsync(finalBill.purchase, finalBill.purchaseItems, false,ledgers);
                string billNoString = finalBill.purchase.Branch == "Sivakasi" ? "SFRP" + billNo.ToString().PadLeft(4, '0') : "BPRP"+billNo.ToString().PadLeft(4, '0');
                ToastService.ShowToast($"Purchase updated successfully: BillNo = {billNoString}", ToastType.sucess);
            }

        }
        catch(Exception e)
        {
            ToastService.ShowToast(e.Message, ToastType.error);
        }


        if (FormFactor.GetFormFactor() == "Web")
        {
            //await PDFGenerator.GeneratePdfAsync(finalBill, JS);
        }
        else
        {
            //await PDFGenerator.GeneratePdfAsync(finalBill, null);
        }


        isProcessing = false;
        loaderText = "";
        purchase = new Purchase();
        purchaseItems = new List<PurchaseItems>();
        restrictCashBox = false;
        CustomerSearch = "";
        BrandSearch = "";
        SelectedCustomer = "No Customer Selected";
        StateHasChanged();
    }

    public async Task NecessaryData()
    {
        string customerQuery = @"SELECT * FROM Suppliers";
        string productsQuery = @"SELECT * FROM Product p JOIN Brands b ON b.BrandID = p.BrandID";

        string accountQuery = @"SELECT * FROM LedgerAccounts";

        var res1 = await DatabaseHandler.ExecuteQueryAsync(customerQuery);
        var res4 = await DatabaseHandler.ExecuteQueryAsync(productsQuery);
        var res6 = await DatabaseHandler.ExecuteQueryAsync(accountQuery);

        suppliers = new List<Supplier>();

        products = new List<ProductType>();

        if (res1.Count > 0)
        {
            foreach (var row in res1)
            {
                suppliers.Add(new Supplier
                    {
                        SupplierID = row["SupplierID"].ToString() ?? "",
                        Name = row["Name"].ToString() ?? "",
                        Contact = row["Contact"].ToString() ?? "",
                    });
            }
        }
        if (res4.Count > 0)
        {
            foreach (var row in res4)
            {
                products.Add(new ProductType
                    {
                        ProductID = row["ProductID"].ToString() ?? "",
                        Brand = row["Brand"].ToString() ?? "",

                        Size = row["Size"].ToString() ?? "",
                        Pattern = row["Pattern"].ToString() ?? "",
                        TubeOrTubeless = row["TubeOrTubeless"].ToString() ?? "",
                        Price = Double.Parse(row["Price"].ToString() ?? "0"),
                    });

                brands.Add(new BrandType
                {
                    BrandID = row["BrandID"].ToString() ?? "",
                    BrandName = row["BrandName"].ToString() ?? "",
                    BrandShortForm = row["BrandShortForm"].ToString() ?? ""
                });
            }
            brands = brands.DistinctBy(brand => brand.BrandName ).ToList();
        }
        if (res6.Count > 0)
        {
            foreach (var row in res6)
            {
                LedgerAccountsType at;
                Enum.TryParse<LedgerAccountsType>(row["AccountType"].ToString(), out at);
                AccountTypes.Add(new LedgerAcccounts
                    {
                        AcccountId = Int32.Parse(row["AccountID"].ToString() ?? "0"),
                        AccountName = row["AccountName"].ToString(),
                        AccountType = at,
                        isActive = bool.Parse(row["IsActive"].ToString() ?? "true")
                    });
            }
        }
    }

    private void AddNewItem()
    {
        purchaseItems.Add(new PurchaseItems());
    }

    private void RemoveItem(PurchaseItems item)
    {
        purchaseItems.Remove(item);
    }

    public async void OnProductsSearch(ChangeEventArgs e,int index)
    {
        
        string temp = e.Value.ToString() ?? "";
        filteredProducts = products.Where(p =>
    p.Brand == purchaseItems[index].BrandName &&
    (p.ProductID.Contains(temp, StringComparison.OrdinalIgnoreCase) ||
     p.Pattern.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
     p.Size.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase))
    ).ToList();

        
        purchaseItems[index].showSuggestions = filteredProducts.Any();
        StateHasChanged();
    }

    public async void OnBrandsSearch(ChangeEventArgs e, int index)
    {
        string temp = e.Value.ToString() ?? "";
        filteredBrands = brands.Where(b => b.BrandID.Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            b.BrandName.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            b.BrandShortForm.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase)
            
        ).ToList();
        
        purchaseItems[index].showBrandSuggestions = filteredBrands.Any();

        StateHasChanged();
    }

    public async void OnCustomerSearch(ChangeEventArgs e)
    {
        CustomerSearch = e.Value.ToString() ?? "";
        // CustomerSearch.Replace(" ", "").Replace(".", "");
        SelectedCustomer = "No Customer Selected";
        if (string.IsNullOrWhiteSpace(CustomerSearch))
        {
            ShowCustomerSuggestion = false;
            filteredSuppliers.Clear();
            return;
        }

        filteredSuppliers = suppliers
            .Where(c => c.SupplierID.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase) ||
                        c.Name.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase) ||
                        c.Contact.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase))
            .ToList();

        
        ShowCustomerSuggestion = filteredSuppliers.Any();
        if (ShowCustomerSuggestion == false)
        {
            showCustomerForm = true;
            
        }
        else
        {
            showCustomerForm = false;
        }
    }

    


    private void SelectCustomer(Supplier supplier)
    {
        CustomerSearch = $"{supplier.SupplierID}";
        SelectedCustomer = $"{supplier.Name}-{supplier.Contact}";
        purchase.Supplier = supplier;
        purchase.SupplierID = supplier.SupplierID;
        ShowCustomerSuggestion = false;
        showCustomerForm = false;
        StateHasChanged();
    }
}
