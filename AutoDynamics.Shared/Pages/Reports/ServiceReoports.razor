@page "/reports/service-reports"
@inject IDatabaseHandler DatabaseHandler

<div class="container mt-4">

    <h1 class="mb-4 text-primary">Service Report</h1>

    <!-- Filters Card -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <div class="row g-3 align-items-end">

                <!-- Report Mode -->
                <div class="col-md-2">
                    <label class="form-label fw-bold">Report Mode</label>
                    <select @bind="reportMode" class="form-select">
                        <option value="Day">Day</option>
                        <option value="Week">Week</option>
                        <option value="Month">Month</option>
                    </select>
                </div>

                <!-- Services Selection -->
                <div class="col-md-4">
                    <label class="form-label fw-bold">Select Services</label>
                    <div class="border rounded p-2" style="max-height:200px; overflow:auto;">
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" @bind="@selectAll" @bind:event="oninput" />
                            <label class="form-check-label"><b>Select All</b></label>
                        </div>

                        @foreach (var service in serviceModals)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                value="@service.Service"
                                @onchange="e => ToggleService(service.Service, (bool)e.Value)"
                                checked="@selectedServices.Contains(service.Service)" />
                                <label class="form-check-label">@service.Service</label>
                            </div>
                        }
                    </div>
                </div>

                <!-- From Date -->
                <div class="col-md-2">
                    <label class="form-label fw-bold">From Date</label>
                    <InputDate @bind-Value="fromDate" class="form-control" />
                </div>

                <!-- To Date -->
                <div class="col-md-2">
                    <label class="form-label fw-bold">To Date</label>
                    <InputDate @bind-Value="toDate" class="form-control" />
                </div>

                <!-- Generate Button -->
                <div class="col-md-2 d-grid">
                    <button @onclick="GenerateReport" class="btn btn-primary btn-lg">Generate Report</button>
                </div>

            </div>
        </div>
    </div>

    <!-- Chart Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <SfChart @ref="@chartRef" Title="Service Report">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="@reportMode"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Title="Total Services" />
                <ChartTooltipSettings Enable="true" Format="${point.x} : ${point.y}" EnableMarker="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    @foreach (var svc in ChartDatas.Select(x => x.Service).Distinct())
                    {
                        <ChartSeries DataSource="@ChartDatas.Where(x => x.Service == svc)"
                        XName="Week"
                        YName="Value"
                        Name="@svc"
                        Type="ChartSeriesType.Column">
                            <ChartMarker>
                                <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                            </ChartMarker>
                        </ChartSeries>
                    }
                </ChartSeriesCollection>
            </SfChart>
        </div>
    </div>

</div>




@if (bestServices.Any())
{
    <h4 class="mt-4">Top Services</h4>
    <table class="table table-striped">
        <thead>
            <tr><th>Service</th><th>Total Quantity</th><th>Total Taxable Value</th><th>Total CGST Value</th><th>Total SGST Value</th><th>Total Price</th></tr>
        </thead>
        <tbody>
            @foreach (var svc in bestServices)
            {
                <tr>
                    <td>@svc.Service</td>
                    <td>@svc.Total</td>
                    <td>@svc.TaxableValue</td>
                    <td>@svc.TotalCGST</td>
                    <td>@svc.TotalSGST</td>
                    <td>@svc.TotalPrice</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(selectedService) && selectedService != "All")
{
    var topCustomers = customerGroups.FirstOrDefault(x => x.Service == selectedService)?.Customers;

    if (topCustomers != null && topCustomers.Any())
    {
        <h4>Top Customers for "@selectedService"</h4>
        <ul>
            @foreach (var cust in topCustomers)
            {
                <li>@cust</li>
            }
        </ul>
    }
}



@code {
    private List<ServiceModal> serviceModals = new();
    private string selectedService = string.Empty;
    private DateTime fromDate = new(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime toDate = DateTime.Now;
    private HashSet<string> selectedServices = new();
    private bool selectAll = false;
    private string reportMode = "Week"; // Day | Week | Month


    private void ToggleService(string service, bool isChecked)
    {
        Debug.WriteLine(isChecked);
        if (isChecked)
            selectedServices.Add(service);
        else
            selectedServices.Remove(service);

        selectAll = (selectedServices.Count == serviceModals.Count);
    }


    private SfChart? chartRef;


    public class ServiceModal
    {
        public string Service { get; set; } = "";
        public string ServiceID { get; set; } = "";
        public string HSNCode { get; set; } = "";
    }

    public class ServiceReportData
    {
        public string label { get; set; } = "";
        public int Quantity { get; set; }
        public DateTime createdAt { get; set; }
        public string CustomerName { get; set; } = "";
        public decimal TaxableValue { get; set; } = 0.0m;
        public decimal TotalAmount { get; set; } = 0.0m;
        public decimal Cgst { get; set; } = 0.0m; 
        public decimal Sgst { get; set; } = 0.0m;
        public TaxRate taxRate { get; set; } = TaxRate.TAX_18;
    }

    public class ChartData
    {
        public string Week { get; set; }
        public string Service { get; set; }   // new
        public double Value { get; set; }
    }


    public class TopService
    {
        public string Service { get; set; } = "";
        public int Total { get; set; }
        public decimal TaxableValue { get; set; } = 0.0m;
        public decimal TotalPrice { get; set; } = 0.0m;
        public decimal TotalCGST { get; set; } = 0.0m;
        public decimal TotalSGST { get; set; } = 0.0m;
    }

    public class CustomerGroup
    {
        public string Service { get; set; } = "";
        public List<string> Customers { get; set; } = new();
    }
    private List<ChartData> ChartDatas = new();
    private List<ServiceReportData> serviceReportData = new();
    private List<TopService> bestServices = new();
    private List<CustomerGroup> customerGroups = new();
    private List<string>? commonCustomers =>
        customerGroups.FirstOrDefault(x => x.Service == selectedService)?.Customers;
    private string? selectedServiceName => selectedService;
    protected override async Task OnInitializedAsync()
    {
        string getQuery = "SELECT * FROM Services";
        var result = await DatabaseHandler.ExecuteQueryAsync(getQuery);
        foreach (var row in result)
        {
            serviceModals.Add(new ServiceModal
                {
                    Service = row["Service"].ToString() ?? "",
                    ServiceID = row["ServiceID"].ToString() ?? "",
                    HSNCode = row["HSNCode"].ToString() ?? "",
                });
        }
    }

    protected async void GenerateReport()
    {
        ChartDatas.Clear();
        serviceReportData.Clear();
        bestServices.Clear();
        customerGroups.Clear();

        string whereCondition = "ItemType = 'SERVICE' AND Date(b.BillDate) BETWEEN @from AND @to";

        var parameters = new Dictionary<string, object>
{
    { "@from", fromDate.ToString("yyyy-MM-dd") },
    { "@to", toDate.ToString("yyyy-MM-dd") }
};

        if (selectedServices.Any() && selectedServices.Count != serviceModals.Count)
        {
            var inParams = new List<string>();
            int i = 0;

            foreach (var svc in selectedServices)
            {
                string paramName = $"@service{i}";
                inParams.Add(paramName);
                parameters.Add(paramName, svc);
                i++;
            }

            // Add IN clause with multiple params
            whereCondition += $" AND bi.ItemName IN ({string.Join(",", inParams)})";
        }

        string getData = $@"
    SELECT bi.Quantity, b.BillDate, b.BillID, bi.*, b.CustomerID, c.Name
    FROM BillItems bi
    JOIN Bills b ON b.BillID = bi.BillID
    JOIN Customers c ON c.CustomerID = b.CustomerID
    WHERE {whereCondition}";

        Debug.WriteLine(getData);
        var res = await DatabaseHandler.ExecuteQueryAsync(getData, parameters);

        foreach (var row in res)
        {
            ServiceReportData temp = new ServiceReportData
            {
                label = row["ItemName"].ToString() ?? "",
                Quantity = Convert.ToInt32(row["Quantity"]),
                createdAt = Convert.ToDateTime(row["BillDate"]),
                CustomerName = row["Name"].ToString() ?? "",
                TaxableValue = Convert.ToDecimal(row["TaxableValue"]),
                TotalAmount = Convert.ToDecimal(row["TotalPrice"]),
                taxRate = Enum.TryParse<TaxRate>(row["TaxRate"].ToString(), out var parsedTax) ? parsedTax : TaxRate.TAX_18
            };
            int taxRate = Int32.Parse(temp.taxRate.ToString().Split('_')[1]);
            int halfRate = taxRate / 2;
            var cgst = Math.Round(temp.TaxableValue * (halfRate / 100m), 2);
            var sgst = Math.Round(temp.TaxableValue * (halfRate / 100m), 2);
            Debug.WriteLine($"TaxRate = {taxRate},CGST = {cgst},SGST = {sgst}, Taxable Value = {temp.TaxableValue} , TotalPrice = {temp.TotalAmount}");
            temp.Cgst = cgst;
            temp.Sgst = sgst;
            serviceReportData.Add(temp);
        }
        Debug.WriteLine($"Service Count: {serviceReportData.Count}");
        IEnumerable<ChartData> groupedData;

        if (reportMode == "Day")
        {
            // Group by date (dd/MM format)
            groupedData = serviceReportData
                .GroupBy(item => new { Day = item.createdAt.ToString("dd MMM"), item.label })
                .Select(g => new ChartData
                    {
                        Week = g.Key.Day,   // X-axis = Day
                        Service = g.Key.label,
                        Value = g.Sum(x => x.Quantity)
                    });
        }
        else if (reportMode == "Week")
        {
            groupedData = serviceReportData
                .GroupBy(item =>
                {
                    int day = item.createdAt.Day;
                    string week = day <= 7 ? "Week 1" :
                                  day <= 14 ? "Week 2" :
                                  day <= 21 ? "Week 3" : "Week 4";
                    return new { Week = week, item.label };
                })
                .Select(g => new ChartData
                    {
                        Week = g.Key.Week,   // X-axis = Week
                        Service = g.Key.label,
                        Value = g.Sum(x => x.Quantity)
                    });
        }
        else // Month
        {
            groupedData = serviceReportData
                .GroupBy(item => new { Month = item.createdAt.ToString("MMM yyyy"), item.label })
                .Select(g => new ChartData
                    {
                        Week = g.Key.Month,  // X-axis = Month
                        Service = g.Key.label,
                        Value = g.Sum(x => x.Quantity)
                    });
        }

        // Replace ChartDatas
        ChartDatas = groupedData.ToList();    
       
        // Top Services
        bestServices = serviceReportData
            .GroupBy(x => x.label)
            .Select(g => new TopService { Service = g.Key, Total = g.Sum(x => x.Quantity),TaxableValue = g.Sum(x=> x.TaxableValue),
                    TotalPrice = g.Sum(x => x.TotalAmount),
                    TotalCGST = g.Sum(x => x.Cgst),
                    TotalSGST = g.Sum(x => x.Sgst),
                })
            .OrderByDescending(x => x.Total)
            
            .ToList();

        if (!string.IsNullOrEmpty(selectedService) && selectedService != "All")
        {
            bestServices = bestServices.Take(5).ToList(); // top 5 when one service selected
        }
        else
        {
            bestServices = bestServices.ToList(); // show all services
        }

        // Customers per service
        customerGroups = serviceReportData
    .GroupBy(x => x.label)
    .Select(g => new CustomerGroup
        {
            Service = g.Key,
            Customers = g.GroupBy(x => x.CustomerName)
                         .OrderByDescending(cg => cg.Count())
                         .Take(5) // Show top 5 frequent customers
                         .Select(cg => $"{cg.Key} ({cg.Count()} times)")
                         .ToList()
        })
    .ToList();


        StateHasChanged();
    }
}
