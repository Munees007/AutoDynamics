@page "/billing"
@using System.Globalization
@using System.Diagnostics
@inject IDatabaseHandler DatabaseHandler
@inject IAlertService AlertService
@inject IMyLocalStorageService MyLocalStorageService
@inject IPDFGenerator PDFGenerator
@inject IFormFactor FormFactor
@inject IJSRuntime JS
@inject IToastService ToastService

<div class="d-flex justify-content-between align-items-center">
    <h3 class="text-primary">Billing</h3>
    <h3 class="text-success fw-bolder @(!(isUpdating || isViewing) ? "visually-hidden" :"")">
        @((bill.Branch == "Sivakasi" ? "SFR" :"BPR") + bill.BillNo.ToString().PadLeft(4, '0'))</h3>
</div>
<div class="container m-3">
    @if(isAdmin)
    {
        <!-- Branch Selection -->
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Branch</label>
                <select disabled="@(isViewing || isUpdating)" autocomplete="off" class="form-select" @bind="SelectedBranch">
                    <option value="">Select Branch</option>
                    <option value="Sivakasi">Sivakasi</option>
                    <option value="ByPass">ByPass</option>
                </select>
            </div>
        </div>

        <hr />
    }


    <!-- Bill Details -->
    <div class="row">
        <!-- Customer Field -->
        <div class="col-md-4">
            <label class="form-label">Customer</label>

            <div class="input-group">
                <input disabled="@isViewing" @onkeydown="HandleCustomerKey" autocomplete="off" type="text" id="Customer" @bind="CustomerSearch" @oninput="OnCustomerSearch" class="form-control" placeholder="Search by ID, Name, or Contact" required>
                <button type="button" class="btn btn-outline-secondary" @onclick="NecessaryData">
                    🔄
                </button>
            </div>
            <SearchSelect @ref="customerListRef" Items="filteredCustomers" OnSelect="@(c=> SelectCustomer(c))" T="UserModal" showSuggestions="ShowCustomerSuggestion" ShowSuggestionsChanged="@((bool val) => ShowCustomerSuggestion = val)">
                <ItemTemplate Context="cust">
                    <div>@cust.CustomerId - @cust.Name - @cust.Contact</div>
                </ItemTemplate>
            </SearchSelect>
            @* <ul class="list-group position-absolute mt-1" style="z-index:1000;" hidden="@(!ShowCustomerSuggestion)"> *@
            @*     @foreach (var customer in filteredCustomers) *@
            @*     { *@
            @*         <li style="cursor:pointer" class="list-group-item list-group-item-action" @onclick="() => SelectCustomer(customer)"> *@
            @*             @customer.CustomerId - @customer.Name - @customer.Contact *@
            @*         </li> *@
            @*     } *@
            @* </ul> *@
            <p>@SelectedCustomer</p>
        </div>

        <!-- Vehicle No Field -->
        <div class="col-md-4">
            <label class="form-label">Vehicle No</label>
            <div class="input-group">
                <input disabled="@isViewing" @onkeydown="HandleVehicleKey" autocomplete="off" type="text" id="VehicleNo" @bind="VehicleSearch" @oninput="OnVehicleSearch" class="form-control" placeholder="Search by ID, Name, or Contact" required>
                <button type="button" class="btn btn-outline-secondary" @onclick="NecessaryData">
                    🔄
                </button>
            </div>
            <SearchSelect showSuggestions="ShowVehicleSuggestion" @ref="vehicleListRef" T="VehicleType" OnSelect="@(v=> SelectVehicle(v))" Items="filteredVehicles" ShowSuggestionsChanged="@((bool val) => ShowVehicleSuggestion = val)">
                <ItemTemplate Context="v">
                    <div>@v.VehicleNo - @v.ModelName</div>
                </ItemTemplate>
            </SearchSelect>
            @* <ul class="list-group position-absolute mt-1" style="z-index:1000;" hidden="@(!ShowVehicleSuggestion)"> *@
            @*     @foreach (var vehicle in filteredVehicles) *@
            @*     { *@
            @*         <li style="cursor:pointer" class="list-group-item list-group-item-action" @onclick="() => SelectVehicle(vehicle)"> *@
            @*             @vehicle.VehicleNo - @vehicle.ModelName *@
            @*         </li> *@
            @*     } *@
            @* </ul> *@
            <p>@SelectedVehicle</p>
        </div>

        <!-- Usage Reading Field -->
        <div class="col-md-4">
            <label class="form-label">Usage Reading</label>
            <input disabled="@isViewing" type="number" id="UsageReading" @bind="bill.UsageReading" class="form-control" placeholder="Enter Usage Reading" required>
        </div>
    </div>


    @if(showCustomerForm){
        <div class="mt-4 p-3">
            <h1 class="text-black">Add Customer</h1>
            <CustomerForm isUpdating=false submitForm="SubmitForm" isBilling=true/>
        </div>
    }

    @if(showVehicleForm)
    {

        <VechicleAdd isUpdating=false isBilling=true CustomerId="@CustomerSearch" SubmitForm="SubmitFormVehicle"/>
    }



    <hr />

    <!-- Bill Items (Service & Product) -->
    <h5>Bill Items</h5>
    <button disabled="@isViewing" class="btn btn-success btn-sm mb-2" @onclick="AddNewItem">Add Item</button>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Item Type</th>
                <th>Brand</th>
                <th>Item Name</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Taxable Value</th>
                <th>CGST</th>
                <th>SGST</th>
                <th>Total Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @for (int i=0;i<BillItems.Count;i++)
            {
                var item = BillItems[i];
                item.index = i;
                <tr style="@((item.itemOutOfStock) ? "background:lightcoral;" : "")">
                    <td>
                        <select disabled="@isViewing" autocomplete="off" class="form-select" @bind="item.ItemType">
                            <option value="SERVICE">Service</option>
                            <option value="PRODUCT">Product</option>
                        </select>
                    </td>
                    @if (item.ItemType == "SERVICE")
                    {
                        <td>
                            <input disabled="disabled"type="text">
                        </td>
                        <td>
                            <select disabled="@isViewing" autocomplete="off" class="form-select" @bind="item.ItemName">
                                <option>Select a Service</option>
                                @foreach (ServiceModal service in services)
                                {
                                    <option value="@service.Service">@service.Service</option>
                                }
                            </select>
                        </td>
                    }
                    else
                    {
                        <td style="min-width:140px">
                            <input disabled="@isViewing" value="@item.BrandName" @onkeydown="(e)=>{HandleBrandKey(e,item.index);}" autocomplete="off" type="text" @oninput="(e)=>{OnBrandsSearch(e,item.index);}" class="form-control"  placeholder="Search by ID, Name" required>
                            <SearchSelect @ref="item.brandListRef" Items="filteredBrands" OnSelect="@(br=> {
                                                                                                        item.BrandName = br.BrandName;
                                                                                                        item.BrandID = br.BrandID;
                                                                                                        item.showBrandSuggestions = false; StateHasChanged();
                                                                                                 })" T="BrandType" showSuggestions="item.showBrandSuggestions" ShowSuggestionsChanged="@((bool val) => item.showBrandSuggestions = val)">
                                <ItemTemplate Context="brand">
                                    <div>@brand.BrandName</div>
                                </ItemTemplate>
                            </SearchSelect>
                        </td>
                        <td style="min-width:140px">
                            <input disabled="@isViewing" title="@item.ProductName" value="@item.ProductName" @onkeydown="(e)=>{HandleProductKey(e,item.index);}" autocomplete="off" type="text" @oninput="(e)=>{OnProductsSearch(e,item.index);}" class="form-control " style=@(!item.ProductIDValid ? "border: 1px solid red;" : "") placeholder="Search by ID, Name" required>
                            <SearchSelect @ref="item.productListRef" Items="filteredProducts" OnSelect="@(c=> {
                                                                                                        item.ProductIDValid = true;
                                                                                                        item.ItemID = c.ProductID;ProductSearch = $"{c.Brand} - {c.Size} - {c.Pattern} ({c.TubeOrTubeless})";
                                                                                                        item.ItemName = $"{c.Brand} - {c.Size} - {c.Pattern} ({c.TubeOrTubeless})";item.TaxRate = c.TaxRate;item.HSNCode = c.HSNCode;item.AvailableQuantity = c.AvailableQuantity;item.Branch=c.Branch;
                                                                                                        item.isItemSelected = true;
                                                                                                        item.ProductID = c.ProductID;ProductSearch = $"{c.Brand} {c.Size} - {c.Pattern} ({c.TubeOrTubeless})";item.ProductName = $"{c.Brand} {c.Size} - {c.Pattern} ({c.TubeOrTubeless})";item.Product = c;
                                                                                                        item.showSuggestions = false; StateHasChanged();
                                                                                                 })" T="ProductType" showSuggestions="item.showSuggestions" ShowSuggestionsChanged="@((bool val) => item.showSuggestions = val)">
                                <ItemTemplate Context="cust">
                                    <div>@cust.Size - @cust.Pattern (@cust.TubeOrTubeless) PCS:@cust.AvailableQuantity</div>
                                </ItemTemplate>
                            </SearchSelect>
                        </td>
                    }
                    <td>
                        <input disabled="@isViewing" @oninput="(e)=>{CheckStock(item,e);}" autocomplete="off" type="number" class="form-control" @bind="item.Quantity" min="1">
                    </td>
                    <td><input disabled="@isViewing" autocomplete="off" type="number" class="form-control" @bind="item.UnitPrice" min="0" step="0.01"></td>

                    @* Tax Calculation *@
                    @{

                        var total = item.Quantity * item.UnitPrice;
                        item.TaxableValue = item.ItemType == "SERVICE" ? Math.Round(total / 1.18m, 2) : (item.TaxRate == TaxRate.TAX_18 ? Math.Round(total / 1.18m, 2):  Math.Round(total / 1.28m, 2));
                        var cgst = item.ItemType == "SERVICE" ? Math.Round(item.TaxableValue * (9 / 100m), 2) :(item.TaxRate == TaxRate.TAX_18 ? Math.Round(item.TaxableValue * (9 / 100m), 2) : Math.Round(item.TaxableValue * (14 / 100m), 2));
                        var sgst = item.ItemType == "SERVICE" ? Math.Round(item.TaxableValue * (9 / 100m), 2) :(item.TaxRate == TaxRate.TAX_18 ? Math.Round(item.TaxableValue * (9 / 100m), 2) : Math.Round(item.TaxableValue * (14 / 100m), 2));
                        item.TotalPrice = Math.Round(item.TaxableValue + cgst + sgst);
                    }
                    <td>@item.TaxableValue</td>
                    <td>@cgst.ToString("F2")</td>
                    <td>@sgst.ToString("F2")</td>
                    <td>@item.TotalPrice</td>

                    <td>
                        <button disabled="@isViewing" class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>

    </table>
    <div class="d-flex w-100 justify-content-end">
        <button disabled="@isViewing" class="btn btn-primary" onclick="@setCashAmount" style="right:5px">Full Cash</button>
    </div>
    <hr />

    <!-- Payment Section -->
    <h5>Payments</h5>
    <div class="row">
        <div class="col-md-3">
            <label class="form-label">Cash</label>
            <input autocomplete="off" type="number" @onblur="@manageCredit" disabled="@(restrictCashBox||isViewing)"  class="form-control" @bind="CashAmount" min="0" step="0.01">
        </div>
        <div class="col-md-3">
            <label class="form-label">Credit</label>
            <input autocomplete="off" type="number" @onblur="@manageCredit" disabled="@(restrictCashBox||isViewing)" class="form-control" @bind="BankAmount" min="0" step="0.01">
        </div>
        <div class="col-md-3">
            <label class="form-label">Card</label>
            <input autocomplete="off" type="number" @onblur="@manageCredit" disabled="@(restrictCashBox||isViewing)" class="form-control" @bind="CardAmount" min="0" step="0.01">
        </div>
        <div class="col-md-3">
            <label class="form-label">UPI</label>
            <input autocomplete="off" type="number" @onblur="@manageCredit" disabled="@(restrictCashBox||isViewing)" class="form-control" @bind="UPIAmount" min="0" step="0.01">
        </div>
    </div>

    <hr />
    <!-- Total and Submit -->
    <div class="row align-items-center">
        <div class="col-md-6">
            <h4 class="mb-0">Total: ₹@TotalAmount</h4>
        </div>
        <div class="col-md-6 text-end">
            <div class="d-inline-flex gap-2">
                <button disabled="@(isViewing)" class="btn btn-primary" @onclick="HandleSubmit">
                    Submit Bill
                </button>
            </div>
        </div>
    </div>


    <Loader show="isProcessing" customText="@loaderText"/>

</div>

@code {
    [Parameter] public bool isUpdating { set; get; } = false;
    [Parameter] public BillDetails updateData { set; get; } = new();
    [Parameter] public bool isViewing {set;get;} = false;


    private string loaderText = "";
    private string CustomerSearch = "";
    private string ProductSearch = "";
    private string SelectedCustomer = "No Customer Selected";
    private string SelectedVehicle = "No Vehicle Selected";
    private bool ShowCustomerSuggestion = false;
    private string VehicleSearch = "";
    private bool ShowVehicleSuggestion = false;
    private string SelectedBranch = "Sivakasi";
    private string CustomerId = "";
    private decimal TotalAmount => BillItems.Sum(x => x.TotalPrice);
    private decimal Discount = 0;
    private bool restrictCashBox = false;
    private decimal GrandTotal => TotalAmount * (1 - Discount / 100);
    private decimal CashAmount = 0, BankAmount = 0, CardAmount = 0, UPIAmount = 0;
    private bool showCustomerForm = false;
    private bool showVehicleForm = false;
    private bool showProductsSuggestion = false;
    private bool isAdmin = false;
    private bool isProcessing = false;
    private Bill bill = new();
    private BillPayment billPayment = new();

    private List<BillItem> BillItems = new();

    private List<UserModal> customers { set; get; } = new List<UserModal>();
    private List<VehicleType> vehicles { set; get; } = new List<VehicleType>();
    private List<ServiceModal> services { set; get; } = new List<ServiceModal>();
    private List<ProductType> products { set; get; } = new List<ProductType>();
    private List<BrandType> brands { set; get; } = new List<BrandType>();

    private List<UserModal> filteredCustomers { set; get; } = new List<UserModal>();
    private List<VehicleType> filteredVehicles { set; get; } = new List<VehicleType>();
    private List<ServiceModal> filteredServices { set; get; } = new List<ServiceModal>();
    private List<ProductType> filteredProducts { set; get; } = new List<ProductType>();
    private List<BrandType> filteredBrands { set; get; } = new List<BrandType>();

    private SearchSelect<UserModal> customerListRef;
    private SearchSelect<VehicleType> vehicleListRef;
    private SearchSelect<ProductType> productListRef;


    private List<LedgerAcccounts> AccountTypes = new();

    public void HandleProductKey(KeyboardEventArgs e, int index)
    {
        BillItems[index].productListRef?.HandleKeyDown(e);
    }

    public void HandleBrandKey(KeyboardEventArgs e, int index)
    {
        BillItems[index].brandListRef?.HandleKeyDown(e);
    }

    bool CanSubmitBill()
    {

        foreach(var bill in BillItems)
        {
            if(bill.ItemType == "PRODUCT")
            {
                if(!bill.ProductIDValid)
                {
                    return  false;

                }
                if (bill.itemOutOfStock)
                {
                    return  false;

                }
            }

        }
        return true;
    }


    public async void OnProductsSearch(ChangeEventArgs e, int index)
    {

        string temp = e.Value.ToString() ?? "";
        filteredProducts = products.Where(p =>
    p.Brand == BillItems[index].BrandName &&
    (p.ProductID.Contains(temp, StringComparison.OrdinalIgnoreCase) ||
     p.Pattern.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
     p.Size.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase))
    ).ToList();


        BillItems[index].showSuggestions = filteredProducts.Any();
        BillItems[index].ProductIDValid = false;
        StateHasChanged();
    }

    public async void OnBrandsSearch(ChangeEventArgs e, int index)
    {
        string temp = e.Value.ToString() ?? "";
        filteredBrands = brands.Where(b => b.BrandID.Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            b.BrandName.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            b.BrandShortForm.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase)

        ).ToList();

        BillItems[index].showBrandSuggestions = filteredBrands.Any();

        StateHasChanged();
    }


    private void CheckStock(BillItem item,ChangeEventArgs e)
    {
        if (item.isItemSelected && item.ItemType == "PRODUCT")
        {
            string value = e.Value.ToString();
            int quantity = 0;
            if (!string.IsNullOrEmpty(value) && !string.IsNullOrWhiteSpace(value) && int.TryParse(value, out quantity))
            {
                // quantity is already parsed safely
            }

            item.itemOutOfStock = quantity > item.AvailableQuantity;
            Debug.WriteLine($"Item Quantity = {quantity}");
            Debug.WriteLine($"Available Quantity = {item.AvailableQuantity}");
            StateHasChanged();
        }
    }

    public void HandleCustomerKey(KeyboardEventArgs e)
    {
        customerListRef?.HandleKeyDown(e);
    }

    public void HandleVehicleKey(KeyboardEventArgs e)
    {
        vehicleListRef?.HandleKeyDown(e);
    }

    public void HandleProductKey(KeyboardEventArgs e)
    {
        productListRef?.HandleKeyDown(e);
    }

    public async void OnProductsSearch(ChangeEventArgs e)
    {
        string temp = e.Value.ToString() ?? "";
        filteredProducts = products.Where(p => p.ProductID.Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            p.Pattern.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            p.Size.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            p.Brand.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase) ||
            p.BrandID.ToLower().Contains(temp, StringComparison.OrdinalIgnoreCase)
        ).ToList();

        showProductsSuggestion = filteredProducts.Any();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        loaderText = isUpdating ? "Updating Bill" : (isViewing ? "Viewing Bill" : "Adding Bill");
        isAdmin = await MyLocalStorageService.GetItemAsync("IsAdmin") == "true" ? true : false;
        if(isUpdating)
        {
            bill = updateData.Bill;
            BillItems = updateData.BillItems;
            billPayment = updateData.BillPayment;
            CardAmount = updateData.BillPayment.CardAmount;
            CashAmount = updateData.BillPayment.CashAmount;
            BankAmount = updateData.BillPayment.BankAmount;
            UPIAmount = updateData.BillPayment.UPIAmount;

            CustomerSearch = updateData.Bill.CustomerID;
            SelectCustomer(updateData.customer);
            VehicleSearch = updateData.Bill.VehicleNo;
            SelectVehicle(updateData.Bill.Vehicle);
            SelectedBranch = updateData.Bill.Branch;
            StateHasChanged();
        }
        if(!isAdmin)
        {
            string branch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";
            bill.Branch = branch;
            SelectedBranch = branch;
            Debug.WriteLine(branch);
        }

        if(isViewing)
        {
            bill = updateData.Bill;
            BillItems = updateData.BillItems;
            billPayment = updateData.BillPayment;
            CardAmount = updateData.BillPayment.CardAmount;
            CashAmount = updateData.BillPayment.CashAmount;
            BankAmount = updateData.BillPayment.BankAmount;
            UPIAmount = updateData.BillPayment.UPIAmount;

            CustomerSearch = updateData.Bill.CustomerID;
            SelectCustomer(updateData.customer);
            VehicleSearch = updateData.Bill.VehicleNo;
            SelectVehicle(updateData.Bill.Vehicle);
            SelectedBranch = updateData.Bill.Branch;
            StateHasChanged();
        }
        await NecessaryData();
        loaderText = "";
        isProcessing = false;
    }
    public async Task SubmitFormVehicle(VehicleType vehicle)
    {
        await NecessaryData();
        VehicleSearch = $"{vehicle.VehicleNo}";
        bill.VehicleNo = vehicle.VehicleNo;
        ShowVehicleSuggestion = false;
        showVehicleForm = false;

    }
    public async Task SubmitForm(UserModal customer)
    {
        Debug.WriteLine("Triggered");
        await NecessaryData();
        CustomerSearch = $"{customer.CustomerId}";
        SelectedCustomer = $"{customer.Name}-{customer.Contact}";
        bill.Customer = customer;
        bill.CustomerID = customer.CustomerId;
        showCustomerForm = false;
        StateHasChanged();
    }
    public void manageCredit()
    {
        Debug.WriteLine("changed");
        decimal temp = CashAmount + UPIAmount + CardAmount;
        if(temp < TotalAmount)
        {
            BankAmount = TotalAmount - temp;
        }
        else
        {
            BankAmount = 0;
        }
        StateHasChanged();
    }
    public void setCashAmount()
    {
        CashAmount = TotalAmount;
        BankAmount = 0;
        UPIAmount = 0;
        CardAmount = 0;
        if(!isAdmin)
        {
            restrictCashBox = true;
        }
        StateHasChanged();
    }
    public async void HandleSubmit()
    {
        if(CanSubmitBill())
        {
            Debug.WriteLine(SelectedBranch);
            isProcessing = true;
            if (restrictCashBox)
            {
                CashAmount = TotalAmount;
            }
            manageCredit();
            billPayment.CardAmount = CardAmount;
            billPayment.CashAmount = CashAmount;
            billPayment.BankAmount = BankAmount;
            billPayment.UPIAmount = UPIAmount;

            bill.Branch = SelectedBranch;
            bill.BillingYear = DateTime.Now.Year;
            bill.Discount = Discount;
            bill.TotalAmount = TotalAmount;
            bill.GrandTotal = GrandTotal;
            string BillNo = (bill.Branch == "Sivakasi" ? "SFR" : "BPR") + bill.BillNo.ToString().PadLeft(4,'0');


            List<Ledger> ledgers = new List<Ledger>();
            Ledger salesLedger = new Ledger
                {
                    AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "SALES A/C")?.AcccountId ?? 0,
                //AccountType = LedgerAccountType.SALES,
                    CR_Amount = billPayment.UPIAmount + billPayment.CardAmount + billPayment.CashAmount + billPayment.BankAmount,
                    Particulars = $"To Sales Bill No: ",
                    TransactionType = TransactionType.BILL,
                    Date = bill.BillDate,
                    Balance = 0,
                    Branch = bill.Branch,
                    DR_Amount = 0,
                    ForWho = bill.Customer.CustomerId
                };

            ledgers.Add(salesLedger);
            if (billPayment.CashAmount > 0)
            {
                Ledger cashLedger = new Ledger
                    {
                        AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "CASH A/C")?.AcccountId ?? 0,
                    //AccountType = LedgerAccountType.CASH,
                        DR_Amount = billPayment.CashAmount,
                        Particulars = $"By Cash",
                        TransactionType = TransactionType.BILL,
                        Date = bill.BillDate,
                        Balance = 0,
                        Branch = bill.Branch,
                        CR_Amount = 0,
                        ForWho = bill.Customer.CustomerId

                    };
                ledgers.Add(cashLedger);
            }

            if (billPayment.UPIAmount > 0)
            {
                Ledger bankLedger = new Ledger
                    {
                        AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "BANK A/C")?.AcccountId ?? 0,
                    //AccountType = LedgerAccountType.BANK,
                        DR_Amount = billPayment.UPIAmount,
                        Particulars = $"By Bank",
                        TransactionType = TransactionType.BILL,
                        Date = bill.BillDate,
                        Balance = 0,
                        Branch = bill.Branch,
                        CR_Amount = 0,
                        ForWho = bill.Customer.CustomerId
                    };
                ledgers.Add(bankLedger);
            }
            if(billPayment.CardAmount > 0)
            {
                Ledger cardLedger = new Ledger
                    {
                        AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "CARD A/C")?.AcccountId ?? 0,
                    //AccountType = LedgerAccountType.BANK,
                        DR_Amount =billPayment.CardAmount,
                        Particulars = $"By Card",
                        TransactionType = TransactionType.BILL,
                        Date = bill.BillDate,
                        Balance = 0,
                        Branch = bill.Branch,
                        CR_Amount = 0,
                        ForWho = bill.Customer.CustomerId
                    };
                ledgers.Add(cardLedger);
            }

            if (billPayment.BankAmount > 0)
            {
                Ledger creditLedger = new Ledger
                    {
                        AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "CUSTOMER CREDIT A/C")?.AcccountId ?? 0,
                    //AccountType = LedgerAccountType.CREDIT,
                        CR_Amount = billPayment.BankAmount,
                        Particulars = $"By Credit",
                        TransactionType = TransactionType.BILL,
                        Date = bill.BillDate,
                        Balance = 0,
                        Branch = bill.Branch,
                        DR_Amount = 0,
                        ForWho = bill.Customer.CustomerId
                    };
                ledgers.Add(creditLedger);
            }

           
            BillDetails finalBill = new BillDetails
                {
                    Bill = bill,
                    BillItems = BillItems,
                    BillPayment = billPayment
                };
            try
            {
                if (isUpdating)
                {

                    int[] temp = await DatabaseHandler.InsertBillAsync(bill, BillItems, billPayment, true,ledgers);
                    ToastService.ShowToast("Bill Updated Successfully", ToastType.sucess);
                }
                else
                {


                    int[] data = await DatabaseHandler.InsertBillAsync(bill, BillItems, billPayment, false,ledgers);
                    bill.BillID = data[0];
                    finalBill.Bill.BillID = data[0];
                    bill.BillNo = data[1];
                    finalBill.Bill.BillNo = data[1];
                    ToastService.ShowToast("Bill Added Successfully", ToastType.sucess);
                }

                if (FormFactor.GetFormFactor() == "Web")
                {
                    await PDFGenerator.GeneratePdfAsync(finalBill, JS);
                }
                else
                {
                    await PDFGenerator.GeneratePdfAsync(finalBill, null);
                }
            }
            catch (Exception e)
            {
                ToastService.ShowToast(e.Message, ToastType.error);
            }

            isProcessing = false;
            bill = new Bill();
            BillItems = new List<BillItem>();
            CashAmount = 0;
            CardAmount = 0;
            BankAmount = 0;
            UPIAmount = 0;
            restrictCashBox = false;
            CustomerSearch = "";
            VehicleSearch = "";
            SelectedCustomer = "No Customer Selected";
            StateHasChanged();
        }
        else
        {
            ToastService.ShowToast("Invalid ProductID or Out of stock error", ToastType.error);
        }

    }
    public async Task NecessaryData()
    {

        string customerQuery = @"SELECT * FROM Customers";
        string vehicleQuery = @"SELECT * FROM Vehicle";
        string serviceQuery = @"SELECT * FROM Services";
        string productsQuery = @"SELECT s.*, p.* FROM Stock s JOIN Product p ON p.ProductID = s.ProductID";
        string brandsQuery = @"SELECT * FROM Brands";
        string accountQuery = @"SELECT * FROM LedgerAccounts";

        var res1 = await DatabaseHandler.ExecuteQueryAsync(customerQuery);
        var res2 = await DatabaseHandler.ExecuteQueryAsync(vehicleQuery);
        var res3 = await DatabaseHandler.ExecuteQueryAsync(serviceQuery);
        var res4 = await DatabaseHandler.ExecuteQueryAsync(productsQuery);
        var res5 = await DatabaseHandler.ExecuteQueryAsync(brandsQuery);
        var res6 = await DatabaseHandler.ExecuteQueryAsync(accountQuery);

        customers = new List<UserModal>();
        vehicles = new List<VehicleType>();
        services = new List<ServiceModal>();
        products = new List<ProductType>();
        brands = new List<BrandType>();
        AccountTypes = new List<LedgerAcccounts>();

        if(res1.Count>0)
        {
            foreach(var row in res1)
            {
                customers.Add(new UserModal
                {
                    CustomerId = row["CustomerID"].ToString() ?? "",
                    Name = row["Name"].ToString() ?? "",
                    Contact = row["Contact"].ToString() ?? "",
                });
            }
        }
        if(res2.Count>0)
        {
            foreach(var row in res2)
            {
                vehicles.Add(new VehicleType
                {
                    CustomerID = row["CustomerID"].ToString() ?? "",
                    VehicleNo = row["VehicleNo"].ToString() ?? "",  
                    ModelName = row["ModelName"].ToString() ?? "",
                    VehicleMake = row["VehicleMake"].ToString() ?? ""
                });
            }
        }
        if (res3.Count > 0)
        {
            foreach(var row in res3)
            {
                services.Add(new ServiceModal
                {
                    ServiceID = row["ServiceID"].ToString() ?? "",
                    HSNCode = row["HSNCode"].ToString() ?? "",
                    Service = row["Service"].ToString() ?? ""
                });
            }
        }
        if (res4.Count > 0)
        {
            foreach(var row in res4)
            {
                TaxRate taxRate;
                if (!Enum.TryParse(row["TaxRate"].ToString(), out taxRate))
                {
                    taxRate = TaxRate.TAX_28; // or any default value
                }

                products.Add(new ProductType
                {
                    ProductID = row["ProductID"].ToString() ?? "",
                    Brand = row["Brand"].ToString() ?? "",
                    Size = row["Size"].ToString() ?? "",
                    HSNCode = row["HSNCode"].ToString() ?? "",
                    Pattern = row["Pattern"].ToString() ?? "",
                    TubeOrTubeless = row["TubeOrTubeless"].ToString() ?? "",
                    Price = Double.Parse(row["Price"].ToString() ?? "0"),
                    AvailableQuantity = Int32.Parse(row["AvailableQuantity"].ToString() ?? "0"),
					Branch = row["Branch"].ToString() ?? "",
					TaxRate =taxRate,
                });
            }

            products = products.Where(p => string.Equals(p.Branch ,SelectedBranch,StringComparison.OrdinalIgnoreCase)).ToList();
        }
        if(res5.Count>0)
        {
            foreach(var row in res5)
            {
                brands.Add(new BrandType
				{
					BrandID = row["BrandID"].ToString() ?? "",
					BrandName = row["BrandName"].ToString() ?? "",
					BrandShortForm = row["BrandShortForm"].ToString() ?? "",
				});
            }
            brands = brands.DistinctBy(b => b.BrandName).ToList();
        }
        if(res6.Count > 0)
        {
            foreach (var row in res6)
            {
                LedgerAccountsType at;
                Enum.TryParse<LedgerAccountsType>(row["AccountType"].ToString(), out at);
                AccountTypes.Add(new LedgerAcccounts
                    {
                        AcccountId = Int32.Parse(row["AccountID"].ToString() ?? "0"),
                        AccountName = row["AccountName"].ToString(),
                        AccountType = at,
                        isActive = bool.Parse(row["IsActive"].ToString() ?? "true")
                    });


            }
        }
        Debug.WriteLine(res6.Count.ToString());
        foreach(var item in AccountTypes)
        {
            Debug.WriteLine($"Ledger Accounts ID = {item.AcccountId}, Account Name = {item.AccountName}");
        }
    }

    private void AddNewItem()
    {
        BillItems.Add(new BillItem());
    }

    private void RemoveItem(BillItem item)
    {
        BillItems.Remove(item);
    }

    public async Task OnVehicleSearch(ChangeEventArgs e)
    {
        VehicleSearch = e.Value.ToString() ?? "";

        // VehicleSearch.Replace(" ", "").Replace(".", "");
        SelectedVehicle = "No Vehicle Selected";
        if(string.IsNullOrWhiteSpace(VehicleSearch))
        {
            ShowVehicleSuggestion = false;
            showVehicleForm = false;
            filteredVehicles.Clear();
            return;
        }

        filteredVehicles = vehicles.Where(v => 
             v.CustomerID.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase) &&
             v.VehicleNo.Contains(VehicleSearch,StringComparison.OrdinalIgnoreCase)
         ).ToList();


        ShowVehicleSuggestion = filteredVehicles.Any();


        if(ShowVehicleSuggestion==false)
        {
            showCustomerForm = false;
            showVehicleForm = true;
        }
        else
        {
            showVehicleForm = false;

        }
    }

    public async void OnCustomerSearch(ChangeEventArgs e)
    {
        CustomerSearch = e.Value.ToString() ?? "";
        // CustomerSearch.Replace(" ", "").Replace(".", "");
        SelectedCustomer = "No Customer Selected";
        if(string.IsNullOrWhiteSpace(CustomerSearch))
        {
            ShowCustomerSuggestion = false;
            filteredCustomers.Clear();
            return;
        }

        filteredCustomers = customers
            .Where(c => c.CustomerId.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase) ||
                        c.Name.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase) ||
                        c.Contact.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if(VehicleSearch !="")
        {
            filteredVehicles = vehicles.Where(v =>
             v.CustomerID.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase) &&
             v.VehicleNo.Contains(VehicleSearch, StringComparison.OrdinalIgnoreCase)
                ).ToList();

            if(filteredVehicles.Any())
            {
                ShowVehicleSuggestion = true;
            }
            else
            {
                VehicleSearch = "";
                ShowVehicleSuggestion = false;
            }
        }
        ShowCustomerSuggestion = filteredCustomers.Any();
        if(ShowCustomerSuggestion==false)
        {
            showCustomerForm = true;
            showVehicleForm = false;
        }
        else
        {
            showCustomerForm = false;
        }
    }

    private void SelectCustomer(UserModal customer)
    {
        CustomerSearch = $"{customer.CustomerId}";
        SelectedCustomer = $"{customer.Name}-{customer.Contact}";
        bill.Customer = customer;
        bill.CustomerID = customer.CustomerId;
        ShowCustomerSuggestion = false;
        showCustomerForm = false;
        if(VehicleSearch == "")
        {
            filteredVehicles = vehicles.Where(v => v.CustomerID == customer.CustomerId).ToList();
            ShowVehicleSuggestion = filteredVehicles.Any();
        }

        StateHasChanged();

    }
    private void SelectVehicle(VehicleType vehicle)
    {
        VehicleSearch = $"{vehicle.VehicleNo}";
        SelectedVehicle = $"{vehicle.ModelName} - {vehicle.VehicleMake}";
        bill.VehicleNo = vehicle.VehicleNo;
        ShowVehicleSuggestion = false;
        showVehicleForm = false;
        if(CustomerSearch == "")
        {
            filteredCustomers = customers.Where(c => c.CustomerId == vehicle.CustomerID).ToList();
            ShowCustomerSuggestion = filteredCustomers.Any();
        }
        StateHasChanged();
    }
}
