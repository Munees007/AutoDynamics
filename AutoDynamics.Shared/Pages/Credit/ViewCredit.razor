@page "/credit/details"
@inject IDatabaseHandler DatabaseHandler
@inject ICurrentData CurrentData
@inject NavigationManager Navigation
@inject ITabService TabService
@inject IPDFGenerator PDFGenerator
@inject IExcelService ExcelService
@inject IJSRuntime JS
<div class="container mt-4">
    <DialoBox dialogBox="pdfDialog"></DialoBox>
    <DialoBox dialogBox="excelDialog"></DialoBox>

    <div class="d-flex justify-content-between align-items-center">
        <h2 class="text-center mb-4">Credit Record</h2> <!-- Title Added -->
        <div class="d-flex gap-2">
            <button class="btn btn-dark" @onclick="()=>{pdfDialog.showDialog = true;StateHasChanged();}">Download PDF</button>
            <button class="btn btn-dark" @onclick="()=>{excelDialog.showDialog = true;StateHasChanged();}">Download EXCEL</button>
        </div>
    </div>
    <div class="col-md-12 mb-4">
        <input type="text" @oninput="(e)=>{FilterRecord(e);}" class="form-control" placeholder="Search by Customer Id, Name, Contact" />
    </div>
    <!-- Sivakasi Branch Table -->
    @if (showSivakasi)
    {
        <div class="col-md-12 mb-4">
            <div class="card shadow-lg">
                <div class="d-flex justify-content-between align-items-center card-header bg-primary text-white">
                    <h5 class="mb-0">Sivakasi Branch</h5>
                    <h5>Total Amount = @sivakasiCreditTotal</h5>
                </div>
                <div class="card-body">
                    @if (filteredSivakasiRecords.Any())
                    {
                        int sno = 1;
                        <table class="table table-bordered table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>S. No.</th>

                                    <th>Branch</th>
                                    <th>Customer Name</th>
                                    <th>Customer Mobile</th>
                                    <th>Credit Amount</th>
                                    <th>Paid Amount</th>
                                    <th>Remaining Balance</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in filteredSivakasiRecords)
                                {
                                    <tr style="cursor:pointer" @onclick="()=> CreditSelect(record.Customer)">
                                        <td>@(sno++)</td>

                                        <td>@record.Branch</td>
                                        <td>@record.Customer.Name</td>
                                        <td>@record.Customer.Contact</td>
                                        <td>@record.CreditAmount</td>
                                        <td>@record.PaidAmount</td>
                                        <td>@record.RemainingBalance</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-muted text-center">No records for Sivakasi.</p>
                    }
                </div>
            </div>
        </div>
    }

    <!-- Bypass Branch Table -->
    @if (showByPass)
    {
        <div class="col-md-12 mb-4">
            <div class="card shadow-lg">
                <div class="d-flex justify-content-between align-items-center card-header bg-success text-white">
                    <h5 class="mb-0">Bypass Branch</h5>
                    <h5>Total Amount = @bypassCreditTotal</h5>
                </div>
                <div class="card-body">
                    @if (filteredBypassRecords.Any())
                    {
                        int sno = 1;
                        <table class="table table-bordered table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>S. No.</th>

                                    <th>Branch</th>
                                    <th>Customer Name</th>
                                    <th>Customer Mobile</th>
                                    <th>Credit Amount</th>
                                    <th>Paid Amount</th>
                                    <th>Remaining Balance</th>


                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in filteredBypassRecords)
                                {
                                    <tr style="cursor:pointer" @onclick="()=> CreditSelect(record.Customer)">
                                        <td>@(sno++)</td>

                                        <td>@record.Branch</td>
                                        <td>@record.Customer.Name</td>
                                        <td>@record.Customer.Contact</td>
                                        <td>@record.CreditAmount</td>
                                        <td>@record.PaidAmount</td>
                                        <td>@record.RemainingBalance</td>


                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-muted text-center">No records for Bypass.</p>
                    }
                </div>
            </div>
        </div>
    }
</div>
<Loader show="isLoading" customText="Fetching Credit Record"/>

@code {
    List<CreditRecord> records = new List<CreditRecord>();

    List<CreditRecord> sivakasiRecords = new List<CreditRecord>();
    List<CreditRecord> bypassRecords = new List<CreditRecord>();


    List<CreditRecord> filteredSivakasiRecords = new List<CreditRecord>();
    List<CreditRecord> filteredBypassRecords = new List<CreditRecord>();

    string pdfOption = "Both";
    string excelOption = "Both";

    CustomDialogBox pdfDialog = new CustomDialogBox();
    CustomDialogBox excelDialog = new CustomDialogBox();

    decimal sivakasiCreditTotal = 0m;
    decimal bypassCreditTotal = 0m;
    bool isLoading = false;
    bool showSivakasi = true;
    bool showByPass = true;
    void FilterRecord(ChangeEventArgs e)
    {
        sivakasiCreditTotal = 0m;
        bypassCreditTotal = 0m;
        string text = e.Value.ToString();

        filteredSivakasiRecords = sivakasiRecords.Where(r =>
    r.Customer.Contact.Contains(text, StringComparison.OrdinalIgnoreCase) ||
    r.Customer.CustomerId.Contains(text, StringComparison.OrdinalIgnoreCase) ||
    r.Customer.Name.Contains(text, StringComparison.OrdinalIgnoreCase)
    ).ToList();

        filteredBypassRecords = bypassRecords.Where(r =>
    r.Customer.Contact.Contains(text, StringComparison.OrdinalIgnoreCase) ||
    r.Customer.CustomerId.Contains(text, StringComparison.OrdinalIgnoreCase) ||
    r.Customer.Name.Contains(text, StringComparison.OrdinalIgnoreCase)
    ).ToList();

        filteredSivakasiRecords.ForEach(s => sivakasiCreditTotal += s.CreditAmount);
        filteredBypassRecords.ForEach(b => bypassCreditTotal += b.CreditAmount);
        StateHasChanged();
    }

    private async Task downloadPdf()
    {
        if(pdfOption == "Both")
        {
            await PDFGenerator.CreateCreditRecordPDF( JS, pdfOption,filteredSivakasiRecords,filteredBypassRecords);
        }
        else if(pdfOption == "Sivakasi")
        {
            await PDFGenerator.CreateCreditRecordPDF(JS,Branch:pdfOption,sivakasiCredit:filteredSivakasiRecords);
        }
        else
        {
            await PDFGenerator.CreateCreditRecordPDF(JS, Branch: pdfOption, bypassCredit: filteredBypassRecords);
        }
    }

    private async Task downloadExcek()
    {
        if (excelOption == "Both")
        {
            await ExcelService.CreateCreditExcel( pdfOption, filteredSivakasiRecords, filteredBypassRecords);
        }
        else if (excelOption == "Sivakasi")
        {
            await ExcelService.CreateCreditExcel(pdfOption, sivakasiCredit: filteredSivakasiRecords);
        }
        else
        {
            await ExcelService.CreateCreditExcel(pdfOption, bypassCredit: filteredBypassRecords);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        pdfDialog = new CustomDialogBox
            {
                Title = "Credit Record Pdf",
                body =@<div>
                <div class="input-group col-10">
			<label class="input-group-text" for="branchSelect">Select Branch</label>
            <select class="form-select" id="branchSelect" @bind="pdfOption">
                <option value="Both">Both</option>
                <option value="Sivakasi">Sivakasi</option>
                <option value="Bypass">Bypass</option>
            </select>
                </div>
            </div>
    ,
                footers = new List<FooterBtn>
            {
                new FooterBtn
                {
                    Button = @<button class="btn btn-danger" @onclick="()=>{pdfDialog.showDialog = false; StateHasChanged();}">CANCEL</button>
                },
                new FooterBtn
                {
                          Button = @<button class="btn btn-primary" @onclick="downloadPdf">OK</button>
	        	},
            },
                OnCloase = EventCallback.Factory.Create(this, async () =>
                {
                    pdfDialog.showDialog = false;


                    StateHasChanged();
                })
            };

         excelDialog = new CustomDialogBox
             {
                 Title = "Credit Record Excel",
                 body =@<div>
        <div class="input-group col-10">
            <label class="input-group-text" for="branchSelect">Select Branch</label>
            <select class="form-select" id="branchSelect" @bind="excelOption">
                <option value="Both">Both</option>
                <option value="Sivakasi">Sivakasi</option>
                <option value="Bypass">Bypass</option>
            </select>
        </div>
    </div>
    ,
                 footers = new List<FooterBtn>
            {
                new FooterBtn
                {
                    Button = @<button class="btn btn-danger" @onclick="()=>{excelDialog.showDialog = false; StateHasChanged();}">CANCEL</button>
                },
                new FooterBtn
                {
                          Button = @<button class="btn btn-primary" @onclick="downloadExcek">OK</button>
	        	},
            },
                 OnCloase = EventCallback.Factory.Create(this, async () =>
                 {
                     excelDialog.showDialog = false;


                     StateHasChanged();
                 })
             };
        await FetchData();
        StateHasChanged();
    }
    public void CreditSelect(UserModal data)
    {
        Dictionary<string, dynamic> parameters = new Dictionary<string, dynamic>
        {
            {"data",data}
        };
        TabService.OpenWithParameter($"Credit : {data.Name}",typeof(ViewCustomerDetails), parameters);

    }
    public async Task FetchData()
    {
        isLoading = true;
        sivakasiCreditTotal = 0m;
        bypassCreditTotal = 0m;
        string fetchQuery = "SELECT c.*,cu.*,b.* FROM CreditRecord c JOIN Customers cu ON c.CustomerID = cu.CustomerID LEFT JOIN Bills b ON c.BillID = b.BillID WHERE Status not in ('Paid')";

        var result = await DatabaseHandler.ExecuteQueryAsync(fetchQuery);
        if (result.Count > 0)
        {

            var groupedRecords = result
                .GroupBy(row => new
                {
                    CustomerID = row["CustomerID"].ToString(),
                    Branch = row["Branch"].ToString().ToLower()
                })  // Group by CustomerID
                .Select(group => new CreditRecord
                    {
                        CustomerID = group.Key.CustomerID,  // Group key is the CustomerID
                        BillNo = group.FirstOrDefault()?["BillNo"].ToString(),
                        Branch = group.FirstOrDefault()?["Branch"].ToString(),
                        CreditAmount = group.Sum(row => Convert.ToDecimal(row["CreditAmount"])),  // Sum of CreditAmount
                        PaidAmount = group.Sum(row => Convert.ToDecimal(row["PaidAmount"])),  // Sum of PaidAmount
                        RemainingBalance = group.Sum(row => Convert.ToDecimal(row["RemainingBalance"] ?? 0)),  // Sum of RemainingBalance
                        DueDate = group.FirstOrDefault()?["DueDate"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(group.FirstOrDefault()?["DueDate"]),
                        Status = group.FirstOrDefault()?["Status"].ToString(),
                        CreatedAt = group.FirstOrDefault()?["CreatedAt"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(group.FirstOrDefault()?["CreatedAt"]),
                        Customer = new UserModal
                        {
                            CustomerId = group.Key.CustomerID,
                            Name = group.FirstOrDefault()?["Name"].ToString() ?? "",
                            Contact = group.FirstOrDefault()?["Contact"].ToString() ?? "",
                            GSTIN = group.FirstOrDefault()?["GSTIN"].ToString() ?? "",
                            Address = group.FirstOrDefault()?["Address"].ToString() ?? "",
                            Area = group.FirstOrDefault()?["Area"].ToString() ?? "",
                            City = group.FirstOrDefault()?["City"].ToString() ?? "",
                            State = group.FirstOrDefault()?["State"].ToString() ?? "",
                            Country = group.FirstOrDefault()?["Country"].ToString() ?? "",
                            District = group.FirstOrDefault()?["District"].ToString() ?? "",
                            Nationality = group.FirstOrDefault()?["Nationality"].ToString() ?? "",
                            PinCode = group.FirstOrDefault()?["PinCode"].ToString() ?? "",
                            Website = group.FirstOrDefault()?["Website"].ToString() ?? "",
                            Email = group.FirstOrDefault()?["Email"].ToString() ?? "",
                        }
                    }).ToList(); // Convert grouped data to list

            records = groupedRecords;
        }
        sivakasiRecords = records.Where(r => r.Branch.ToLower() == "sivakasi").ToList();
        bypassRecords = records.Where(r => r.Branch.ToLower() == "bypass").ToList();
        filteredSivakasiRecords = sivakasiRecords;
        filteredBypassRecords = bypassRecords;

        filteredSivakasiRecords.ForEach(s => sivakasiCreditTotal += s.CreditAmount);
        filteredBypassRecords.ForEach(b => bypassCreditTotal += b.CreditAmount);

        isLoading = false;
    }


    
}