@page "/supplier/credit"
@inject IDatabaseHandler DatabaseHandler
@inject ICurrentData CurrentData
@inject NavigationManager Navigation
@inject ITabService TabService


<div class="container mt-4">
    <div class="d-flex justify-content-between">
        <h2 class="text-center mb-4">Supplier Credit Record</h2> <!-- Title Added -->
        <div class="d-flex gap-3">
            <button class="btn btn-success" @onclick="async ()=>{await CorrectedFetch();}">Refresh</button>
        </div>
    </div>
    <div class="col-md-12 mb-4">
        <input type="text" @oninput="(e)=>{FilterRecord(e);}" class="form-control" placeholder="Search by Customer Id, Name, Contact" />
    </div>
    <!-- Sivakasi Branch Table -->
    @if (showSivakasi)
    {
        <div class="col-md-12 mb-4">
            <div class="card shadow-lg">
                <div class="d-flex justify-content-between align-items-center card-header bg-primary text-white">
                    <h5 class="mb-0">Sivakasi Branch</h5>
                    <h5>Total Amount = @sivakasiCreditTotal.ToString("N2")</h5>
                </div>
                <div class="card-body">
                    @if (filteredSivakasiRecords.Any())
                    {
                        int sno = 1;
                        <table class="table table-bordered table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>S. No.</th>
                                    <th>SupplierID</th>
                                    <th>Supplier Name</th>
                                    <th>Supplier Mobile</th>
                                    <th>Credit Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in filteredSivakasiRecords)
                                {
                                    if (record.CreditAmount > 0)
                                    {
                                        <tr style="cursor:pointer" @onclick="()=> CreditSelect(record.Supplier)">
                                            <td>@(sno++)</td>
                                            <td>@record.Supplier.SupplierID</td>
                                            <td>@record.Supplier.Name</td>
                                            <td>@record.Supplier.Contact</td>
                                            <td>@record.CreditAmount.ToString("N2")</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-muted text-center">No records for Sivakasi.</p>
                    }
                </div>
            </div>
        </div>
    }

    <!-- Bypass Branch Table -->
    @if (showByPass)
    {
        <div class="col-md-12 mb-4">
            <div class="card shadow-lg">
                <div class="d-flex justify-content-between align-items-center card-header bg-success text-white">
                    <h5 class="mb-0">Bypass Branch</h5>
                    <h5>Total Amount = @bypassCreditTotal</h5>
                </div>
                <div class="card-body">
                    @if (filteredBypassRecords.Any())
                    {
                        int sno = 1;
                        <table class="table table-bordered table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>S. No.</th>
                                    <th>SupplierID</th>
                                    <th>Supplier Name</th>
                                    <th>Supplier Mobile</th>
                                    <th>Credit Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in filteredBypassRecords)
                                {
                                    if(record.CreditAmount > 0)
                                    {
                                        <tr style="cursor:pointer" @onclick="()=> CreditSelect(record.Supplier)">
                                            <td>@(sno++)</td>
                                            <td>@record.Supplier.SupplierID</td>
                                            <td>@record.Supplier.Name</td>
                                            <td>@record.Supplier.Contact</td>
                                            <td>@record.CreditAmount</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-muted text-center">No records for Bypass.</p>
                    }
                </div>
            </div>
        </div>
    }
</div>
<Loader show="isLoading" customText="Fetching Credit Record" />

@code {
    List<SupplierCreditRecord> records = new List<SupplierCreditRecord>();

    List<SupplierCreditRecord> sivakasiRecords = new List<SupplierCreditRecord>();
    List<SupplierCreditRecord> bypassRecords = new List<SupplierCreditRecord>();


    List<SupplierCreditRecord> filteredSivakasiRecords = new List<SupplierCreditRecord>();
    List<SupplierCreditRecord> filteredBypassRecords = new List<SupplierCreditRecord>();
    DateOnly filterDate = new DateOnly(2025,7,31);
    decimal sivakasiCreditTotal = 0m;
    decimal bypassCreditTotal = 0m;
    bool isLoading = false;
    bool showSivakasi = true;
    bool showByPass = true;
    void FilterRecord(ChangeEventArgs e)
    {
        sivakasiCreditTotal = 0m;
        bypassCreditTotal = 0m;
        string text = e.Value.ToString();

        filteredSivakasiRecords = sivakasiRecords.Where(r =>
    r.Supplier.Contact.Contains(text, StringComparison.OrdinalIgnoreCase) ||
    r.Supplier.SupplierID.Contains(text, StringComparison.OrdinalIgnoreCase) ||
    r.Supplier.Name.Contains(text, StringComparison.OrdinalIgnoreCase)
    ).ToList();

        filteredBypassRecords = bypassRecords.Where(r =>
    r.Supplier.Contact.Contains(text, StringComparison.OrdinalIgnoreCase) ||
    r.Supplier.SupplierID.Contains(text, StringComparison.OrdinalIgnoreCase) ||
    r.Supplier.Name.Contains(text, StringComparison.OrdinalIgnoreCase)
    ).ToList();

        filteredSivakasiRecords.ForEach(s => sivakasiCreditTotal += s.CreditAmount);
        filteredBypassRecords.ForEach(b => bypassCreditTotal += b.CreditAmount);
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await CorrectedFetch();
        StateHasChanged();
    }
    public void CreditSelect(Supplier data)
    {
        Dictionary<string, dynamic> parameters = new Dictionary<string, dynamic>
        {
            {"supplierData",data}
        };
        TabService.OpenWithParameter($"Credit : {data.Name}", typeof(SingleSupplierView), parameters);

    }

    public async Task InsertSupplierCreditRecord()
    {

        string create = @"SELECT * FROM PurchaseBills WHERE BillNo < 0";
        var result = await DatabaseHandler.ExecuteQueryAsync(create);
        List<PurchaseDetails> purchaseDetails = new List<PurchaseDetails>();
        if(result.Count > 0)
        {
            foreach(var row in result)
            {
                if(row["PaymentType"].ToString() == "CREDIT")
                {

                    string insertQuery = @"INSERT INTO SupplierCreditRecord (SupplierID,PurchaseBillID,CreditAmount,DueDate) VALUES(@SupplierID,@PurchaseBillID,@CreditAmount,@DueDate)";

                    var parameters = new Dictionary<string, object>
                    {
                    { "@SupplierID", row["SupplierID"].ToString() },
                    { "@PurchaseBillID", row["PurchaseBillID"] },
                    { "@CreditAmount", row["TotalAmount"] },
                    { "@DueDate", Convert.ToDateTime(row["PurchaseDate"]).AddDays(30)} // Assuming due date is 30 days from purchase date
                    };
                    await DatabaseHandler.ExecuteNonQueryAsync(insertQuery, parameters);



                }
            }
        }

    }
    public async Task CorrectedFetch()
    {
        isLoading = true;
        string fetchQuery = @"USE AutoDynamicsDB;

SELECT
    s.SupplierID,
    s.Name,
    s.Contact,

    COALESCE(p.PurchaseTotal, 0) AS PurchaseTotal,
    COALESCE(pa.PaymentAmount, 0) AS PaymentAmount,
    COALESCE(l.CrAmount, 0) AS CrAmount,
    COALESCE(l.DrAmount, 0) AS DrAmount,
    COALESCE(p.PurchaseTotal, 0) + COALESCE(l.DrAmount, 0) - COALESCE(pa.PaymentAmount, 0) - COALESCE(l.CrAmount, 0) AS Balance
FROM
    Suppliers s

-- Purchase Total per supplier (subtract CASH payments)
LEFT JOIN (
    SELECT
        SupplierID,
        SUM(TotalAmount)
        - COALESCE(SUM(CASE WHEN PaymentType = 'CASH' THEN TotalAmount ELSE 0 END), 0) AS PurchaseTotal
    FROM PurchaseBills
    WHERE Branch = @Branch
      AND DATE(PurchaseDate) <= @Date
    GROUP BY SupplierID
) p ON p.SupplierID = s.SupplierID

-- Payment Total per supplier
LEFT JOIN (
    SELECT SupplierID, SUM(TotalAmountPaid) AS PaymentAmount
    FROM Payments
    WHERE Branch = @Branch
      AND DATE(PaymentDate) <= @Date
    GROUP BY SupplierID
) pa ON pa.SupplierID = s.SupplierID

-- Ledger Credit/Debit per supplier
LEFT JOIN (
    SELECT
        ForWho AS SupplierID,
        SUM(CASE WHEN CrAmount IS NOT NULL THEN CrAmount ELSE 0 END) AS CrAmount,
        SUM(CASE WHEN DrAmount IS NOT NULL THEN DrAmount ELSE 0 END) AS DrAmount
    FROM CashBankLedger
    WHERE Branch = @Branch
      AND TransactionType IN ('OTHER', 'EXPENSE')
      AND AccountID IN (19)
      AND DATE(Date) <= @Date
    GROUP BY ForWho
) l ON l.SupplierID = s.SupplierID;


";

        var res = await DatabaseHandler.ExecuteQueryAsync(fetchQuery, new Dictionary<string, object>
        {
            {"@Date",filterDate.ToString("yyyy-MM-dd")},
            {"@Branch","Sivakasi"}
        });

        if(res.Count>0)
        {
            foreach(var row in res)
            {
                sivakasiRecords.Add(new SupplierCreditRecord
                {
						Supplier = new Supplier
						{
							SupplierID = row["SupplierID"].ToString(),
							Name = row["Name"].ToString(),
							Contact = row["Contact"].ToString()
						},
						CreditAmount = Convert.ToDecimal(row["Balance"]),
                });
            }
            filteredSivakasiRecords = sivakasiRecords;
        }

        isLoading = false;
    }
    public async Task FetchData()
    {
        isLoading = true;
        sivakasiCreditTotal = 0m;
        bypassCreditTotal = 0m;
        string fetchQuery = "SELECT c.*,cu.*,b.* FROM SupplierCreditRecord c JOIN Suppliers cu ON c.SupplierID = cu.SupplierID LEFT JOIN PurchaseBills b ON c.PurchaseBillID = b.PurchaseBillID WHERE Status not in ('Paid')";

        var result = await DatabaseHandler.ExecuteQueryAsync(fetchQuery);
        if (result.Count > 0)
        {

            var groupedRecords = result
                .GroupBy(row => new
                {
                    SupplierID = row["SupplierID"].ToString(),
                    Branch = row["Branch"].ToString().ToLower()
                })  // Group by CustomerID
                .Select(group => new SupplierCreditRecord
                    {
                        SupplierID = group.Key.SupplierID,  // Group key is the CustomerID
                        PurchaseBillID = ulong.Parse(group.FirstOrDefault()?["PurchaseBillID"].ToString() ?? "0"),
                        Invoice = group.FirstOrDefault()?["InvoiceNumber"].ToString(),
                        Branch = group.FirstOrDefault()?["Branch"].ToString(),
                        CreditAmount = group.Sum(row => Convert.ToDecimal(row["CreditAmount"])),  // Sum of CreditAmount
                        PaidAmount = group.Sum(row => Convert.ToDecimal(row["PaidAmount"])),  // Sum of PaidAmount
                        RemainingBalance = group.Sum(row => Convert.ToDecimal(row["RemainingBalance"] ?? 0)),  // Sum of RemainingBalance
                        DueDate = group.FirstOrDefault()?["DueDate"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(group.FirstOrDefault()?["DueDate"]),
                        Status = group.FirstOrDefault()?["Status"].ToString(),
                        CreatedAt = group.FirstOrDefault()?["CreatedAt"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(group.FirstOrDefault()?["CreatedAt"]),
                        Supplier = new Supplier
                        {
                            SupplierID = group.Key.SupplierID,
                            Name = group.FirstOrDefault()?["Name"].ToString() ?? "",
                            Contact = group.FirstOrDefault()?["Contact"].ToString() ?? "",
                            GSTIN = group.FirstOrDefault()?["GSTIN"].ToString() ?? "",
                            Address = group.FirstOrDefault()?["Address"].ToString() ?? "",
                            Area = group.FirstOrDefault()?["Area"].ToString() ?? "",
                            City = group.FirstOrDefault()?["City"].ToString() ?? "",
                            State = group.FirstOrDefault()?["State"].ToString() ?? "",
                            Country = group.FirstOrDefault()?["Country"].ToString() ?? "",
                            District = group.FirstOrDefault()?["District"].ToString() ?? "",
                            Nationality = group.FirstOrDefault()?["Nationality"].ToString() ?? "",
                            PinCode = group.FirstOrDefault()?["PinCode"].ToString() ?? "",
                            
                            Email = group.FirstOrDefault()?["Email"].ToString() ?? "",
                        }
                    }).ToList(); // Convert grouped data to list

            records = groupedRecords;
        }
        sivakasiRecords = records.Where(r => r.Branch.ToLower() == "sivakasi").ToList();
        bypassRecords = records.Where(r => r.Branch.ToLower() == "bypass").ToList();
        filteredSivakasiRecords = sivakasiRecords;
        filteredBypassRecords = bypassRecords;

        filteredSivakasiRecords.ForEach(s => sivakasiCreditTotal += s.CreditAmount);
        filteredBypassRecords.ForEach(b => bypassCreditTotal += b.CreditAmount);

        isLoading = false;
    }



}