@page "/ledger-entry"
@inject IDatabaseHandler DatabaseHandler
@inject IToastService ToastService
@inject IMyLocalStorageService MyLocalStorageService
<div class="container my-4">
	<div class="d-flex justify-content-between align-items-center mb-3">
		<h3 class="mb-0">Ledger Entry</h3>
		<div>
			<button class="btn btn-primary me-2" @onclick="addLedger">➕ Add Ledger</button>


			<button class="btn btn-outline-secondary" @onclick="() => { accountType.showDialog = true; StateHasChanged(); }">➕ Add Account</button>
		</div>
	</div>

	<div class="table-responsive">
		<table class="table table-bordered table-striped align-middle">
			<thead class="table-dark">
				<tr>
					<th style="min-width: 120px;">Date</th>
					<th style="min-width: 160px;">Account Type</th>
					<th style="min-width: 160px;">Transaction Type</th>
					<th style="min-width: 200px;">Particulars</th>
					<th style="min-width: 120px;">Dr Amount</th>
					<th style="min-width: 120px;">Cr Amount</th>
					<th style="min-width: 100px;">Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var ledger in ledgers)
				{
					<tr>
						<td>
							<input type="date" @bind="ledger.Date" class="form-control" />
						</td>
						<td>
							<select @bind="@ledger.AccountID" class="form-select">
								@foreach(var item in accountTypes)
								{
									<option value="@item.AcccountId">@item.AccountName</option>
								}
							</select>
						</td>
						<td>
							<select @bind="ledger.TransactionType" class="form-select">
								<option value="@TransactionType.EXPENSE">EXPENSE</option>
								<option value="@TransactionType.OTHER">OTHER</option>
							</select>
						</td>
						<td>
							<input type="text" @bind="ledger.Particulars" class="form-control" placeholder="Particulars" />
						</td>
						<td>
							<input type="number" @bind="ledger.DR_Amount" class="form-control" placeholder="Dr Amount" />
						</td>
						<td>
							<input type="number" @bind="ledger.CR_Amount" class="form-control" placeholder="Cr Amount" />
						</td>
						<td>
							<button class="btn btn-sm btn-danger" @onclick="() => removeLedger(ledger)">🗑️ Remove</button>
							<button class="btn btn-sm btn-info" @onclick="()=>createDoubleEntry(ledger)">��</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
	<button class="btn btn-success mt-3" @onclick="SaveLedgerEntries" disabled="@(ledgers.Count == 0 || !IsBalanced)">
		✅ Post Entries
	</button>
</div>
<div class="mt-3">
	<div class="d-flex justify-content-end gap-3">
		<div><strong>Total Dr:</strong> ₹@TotalDr</div>
		<div><strong>Total Cr:</strong> ₹@TotalCr</div>
		@if (!IsBalanced)
		{
			<div class="text-danger"><strong>Unbalanced: ₹@Difference</strong></div>
		}
		else
		{
			<div class="text-success"><strong>Balanced ✅</strong></div>
		}
	</div>
</div>

<DialoBox dialogBox="accountType"></DialoBox>
<Loader customText="@loaderText" show="isLoading"/>
@code{
	List<Ledger> ledgers = new List<Ledger>();
	decimal TotalDr => ledgers.Sum(x => x.DR_Amount);
	decimal TotalCr => ledgers.Sum(x => x.CR_Amount);
	decimal Difference => Math.Abs(TotalDr - TotalCr);
	bool IsBalanced => TotalDr == TotalCr;
	string branch = "";
	bool isLoading = false;
	string loaderText = "";
	List<LedgerAcccounts> accountTypes = new List<LedgerAcccounts>();

	LedgerAcccounts temp = new LedgerAcccounts();

	CustomDialogBox accountType = new CustomDialogBox();

	bool isDoubleEntryMode = true; // Default to double-entry mode
	void ToggleEntryMode()
	{
		isDoubleEntryMode = !isDoubleEntryMode;
	}

	void createDoubleEntry(Ledger ledger)
	{
		// Don't create if both DR and CR are 0
		if (ledger.DR_Amount == 0 && ledger.CR_Amount == 0)
		{
			ToastService.ShowToast("DR and CR cannot both be zero", ToastType.warning);
			return;
		}

		Ledger oppositeEntry = new Ledger
				{
					Date = ledger.Date,
					AccountID = ledger.AccountID,
					TransactionType = ledger.TransactionType,
					Particulars = ledger.Particulars + " (Opposite)",
					Branch = ledger.Branch,

			// Flip Dr and Cr
					DR_Amount = ledger.CR_Amount,
					CR_Amount = ledger.DR_Amount
				};

		ledgers.Add(oppositeEntry);
		ToastService.ShowToast("Opposite entry added", ToastType.sucess);
	}

	public async Task fetchAccountTypes()
	{
		isLoading = true;
		loaderText = "Fetching";
		accountTypes.Clear();
		string fetch = "SELECT * FROM LedgerAccounts";
		var result = await DatabaseHandler.ExecuteQueryAsync(fetch);
		if(result.Count > 0)
		{
			foreach(var row in result)
			{
				LedgerAccountsType at;
				Enum.TryParse<LedgerAccountsType>(row["AccountType"].ToString(), out at);
				accountTypes.Add(new LedgerAcccounts
				{
					AcccountId = Int32.Parse(row["AccountID"].ToString() ?? "0"),
					AccountName = row["AccountName"].ToString(),
					AccountType = at,
					isActive = bool.Parse(row["IsActive"].ToString() ?? "true")
				});
			}
		}

		isLoading = false;
		loaderText = "";
	}
	async Task SaveLedgerEntries()
	{
		try
		{
			if (!IsBalanced)
			{
				ToastService.ShowToast("Cannot save: Dr and Cr are not balanced!", ToastType.warning);
				return;
			}

			isLoading = true;
			loaderText = "Saving Ledger...";

			await DatabaseHandler.InsertOrUpdateMultipleLedger(ledgers);
			isLoading = false;
			loaderText = "";
			ToastService.ShowToast("Ledger saved successfully", ToastType.sucess);
			ledgers.Clear();
		}
		catch(Exception e)
		{
			ToastService.ShowToast(e.Message, ToastType.error);
		}

	}

	protected override void OnInitialized()
	{

		accountType = new CustomDialogBox
		{
			Title = "Add Account Type",
					body = @<div class="container p-3 border rounded shadow-sm bg-light" style="max-width: 500px;">
		<h5 class="mb-3">➕ Add Ledger Account</h5>

		<div class="mb-3">
			<label class="form-label">Account Name</label>
			<input type="text" @bind="temp.AccountName" @oninput="(e)=>temp.AccountName = e.Value?.ToString()?.ToUpper()" class="form-control" placeholder="Ex: Cash A/C" />
		</div>

		<div class="mb-3">
			<label class="form-label">Account Type</label>
			<select @bind="temp.AccountType" class="form-select">
				<option value="">-- Select Type --</option>
				<option value="@LedgerAccountsType.ASSET">ASSET</option>
				<option value="@LedgerAccountsType.LIABILITY">LIABILITY</option>
				<option value="@LedgerAccountsType.INCOME">INCOME</option>
				<option value="@LedgerAccountsType.EXPENSE">EXPENSE</option>
				<option value="@LedgerAccountsType.EQUITY">EQUITY</option>
			</select>
		</div>

		<div class="d-flex justify-content-end">
			<button class="btn btn-primary" @onclick="SubmitAccountType">Add</button>
		</div>
	</div>

	,
			OnCloase = EventCallback.Factory.Create(this, () =>
			{
				accountType.showDialog = false;
				StateHasChanged();
			}),
		};
	}

	async void SubmitAccountType()
	{
		try
		{
			isLoading = true;
			loaderText = "Adding";

			string checkQuery = @"
    SELECT AccountID
    FROM LedgerAccounts
    WHERE AccountName = @AccountName AND AccountType = @AccountType";

			var checkParams = new Dictionary<string, object>
{
	{ "@AccountName", temp.AccountName },
	{ "@AccountType", temp.AccountType.ToString() }
};

			var result = await DatabaseHandler.ExecuteQueryAsync(checkQuery, checkParams);

			if(result.Count == 0)
			{
				string insertQuery = "INSERT INTO LedgerAccounts (AccountName, AccountType,IsActive) VALUES (@AccountName, @AccountType,@IsActive)";

				var parameters = new Dictionary<string, object>
				{
					{ "@AccountName", temp.AccountName },
					{ "@AccountType", temp.AccountType.ToString() },
					{ "@IsActive", true }
				};
				await DatabaseHandler.ExecuteNonQueryAsync(insertQuery, parameters);
				ToastService.ShowToast("Added Successfully", ToastType.sucess);
			}
			else
			{
				ToastService.ShowToast("Account Already there", ToastType.error);
			}

			accountType.showDialog = false;
			isLoading = false;
			loaderText = "";
			
			await fetchAccountTypes();

			StateHasChanged();

		}
		catch(Exception e)
		{
			ToastService.ShowToast(e.Message, ToastType.error);
		}


	}

	protected override async Task OnInitializedAsync()
	{
		branch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";
		accountTypes.Clear();
		await fetchAccountTypes();
	}

	void addLedger()
	{
		ledgers.Add(new Ledger
		{
			Branch = branch
		});


	}
	void removeLedger(Ledger ledger)
	{
		ledgers.Remove(ledger);
	}
}