@page "/ledger-entry"
@inject IDatabaseHandler DatabaseHandler
@inject IToastService ToastService
@inject IMyLocalStorageService MyLocalStorageService
<div class="container my-4">
	<DialoBox dialogBox="getCSTDialpg"></DialoBox>
	<div class="d-flex flex-wrap justify-content-between align-items-start gap-3 mb-4">
		<!-- Title and Buttons -->
		<div class="flex-grow-1">
			<h3 class="mb-3">Ledger Entry</h3>
			<div class="d-flex gap-2 flex-wrap">
				<button class="btn btn-primary" disabled="@(isViewing)" @onclick="addLedger">
					➕ Add Ledger
				</button>
				<button class="btn btn-outline-secondary" disabled="@(isViewing)" @onclick="() => { accountType.showDialog = true; StateHasChanged(); }">
					➕ Add Account
				</button>
			</div>
		</div>

		<!-- Select Options -->
		<div class="d-flex flex-column flex-md-row gap-3">
			<div>
				<label class="form-label fw-semibold">Ledger Type</label>
				<select class="form-select" disabled="@(isViewing || isUpdating)" @bind="LedgerType">
					<option value="SE">Single Entry</option>
					<option value="DE">Double Entry</option>
				</select>
			</div>

			@if(LedgerType == "SE")
			{
				<div>
					<label class="form-label fw-semibold">Transaction Type</label>
					<select class="form-select" disabled="@(isViewing || isUpdating)" @bind="transactionType">
						<option value="@TransactionType.EXPENSE">EXPENSE</option>
						<option value="@TransactionType.OTHER">OTHER</option>
					</select>
				</div>
			}

			@if(LedgerType == "SE")
			{
				<div>
					<label class="form-label fw-semibold">Payment Type</label>
					<select class="form-select" disabled="@(isViewing || isUpdating)" @bind="paymentType">
						<option value="@PaymentTypes.CASH">CASH</option>
						<option value="@PaymentTypes.CARD">CARD</option>
						<option value="@PaymentTypes.BANK">BANK</option>

					</select>
				</div>
			}

		</div>
	</div>

	<div class="table-responsive">
		<table class="table table-bordered table-striped align-middle">
			<thead class="table-dark">
				<tr>
					<th style="min-width: 120px;">Date</th>
					<th style="min-width: 160px;">Account Type</th>
					@if(LedgerType == "DE")
					{
						<th style="min-width: 160px;">Transaction Type</th>
					}
					<th style="min-width: 300px;">For Who</th>
					<th style="min-width: 200px;">Particulars</th>
					<th style="min-width: 120px;">Dr Amount</th>
					<th style="min-width: 120px;">Cr Amount</th>
					@if(LedgerType == "DE")
					{
						<th style="min-width:100px">Payment Type</th>
					}

					<th style="min-width: 100px;">Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var ledger in ledgers)
				{
					<tr>
						<td>
							<input type="date" disabled="@(isViewing)" @bind="ledger.Date" class="form-control" />
						</td>
						<td>
							<select @bind="@ledger.AccountID" disabled="@(isViewing || isUpdating)" class="form-select">
								@foreach(var item in accountTypes)
								{
									<option value="@item.AcccountId">@item.AccountName</option>
								}
							</select>
						</td>
						@if(LedgerType == "DE")
						{
							<td>
								<select @bind="ledger.TransactionType" disabled="@(isViewing || isUpdating)" class="form-select">
									<option value="@TransactionType.EXPENSE">EXPENSE</option>
									<option value="@TransactionType.OTHER">OTHER</option>
								</select>
							</td>
						}
						<td>
							<div class="d-flex gap-3">
								<button type="button" disabled="@isViewing" class="btn btn-outline-secondary" @onclick="()=>{currentLedger = ledger;getCSTDialpg.showDialog = true;StateHasChanged();}">+ </button>
								<p>@ledger.ForWhoName</p>
							</div>
						</td>
						<td>
							<input type="text" disabled="@isViewing" @bind="ledger.Particulars" class="form-control" placeholder="Particulars" />
						</td>
						<td>
							<input type="number" disabled="@isViewing" @bind="ledger.DR_Amount" class="form-control" placeholder="Dr Amount" />
						</td>
						<td>
							<input type="number"  disabled="@isViewing" @bind="ledger.CR_Amount" class="form-control" placeholder="Cr Amount" />
						</td>
						@if (LedgerType == "DE")
						{
							<td>
								<select disabled="@(isViewing || isUpdating)" @bind="ledger.PaymentMode" class="form-select">
									<option value="@PaymentTypes.NONE">NONE</option>
									<option value="@PaymentTypes.CASH">CASH</option>
									<option value="@PaymentTypes.CARD">CARD</option>
									<option value="@PaymentTypes.BANK">BANK</option>

								</select>
							</td>
						}
						<td>
							<button disabled="@(isViewing || isUpdating)" class="btn btn-sm btn-danger" @onclick="() => removeLedger(ledger)">🗑️ Remove</button>
							@if(isUpdating)
							{
								<div class="form-check form-switch mb-2">
									<input class="form-check-input"
									type="checkbox"
									id="statusToggle_@ledger.LedgerID"
									@bind="ledger.isActive" />

									<label class="form-check-label fw-bold ms-2 @(ledger.isActive ? "text-success" : "text-danger")"
									for="statusToggle_@ledger.LedgerID">
										@(ledger.isActive ? "Active" : "Inactive")
									</label>
								</div>
							}
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	@if(LedgerType == "SE" && !isViewing)
	{
		<button class="btn btn-success mt-3 "  @onclick="()=>{ledgers = createSingleEntry(false);}" disabled="@(ledgers.Count == 0 || isUpdating)">
			✅ Check Single Entry
		</button>
	}
	@if(LedgerType == "DE" &&!isViewing)
	{
		<button class="btn btn-success mt-3 " @onclick="()=>{ledgers = createSingleEntry(true);}" disabled="@(ledgers.Count == 0 || isUpdating)">
			✅ Check Double Entry
		</button>
	}

	<button class="btn btn-success mt-3" style="margin-left:10px" @onclick="SaveLedgerEntries" disabled="@(ledgers.Count == 0 || !IsBalanced || isViewing || isUpdating)">
		✅ Post Entries
	</button>
	@if(isUpdating)
	{
		<button class="btn btn-success mt-3" style="margin-left:10px" @onclick="UpdateLedger" disabled="@(ledgers.Count == 0 || !IsBalanced || isViewing)">
			✅ Post Entries
		</button>
	}

</div>
<div class="mt-3">
	<div class="d-flex justify-content-end gap-3">
		<div><strong>Total Dr:</strong> ₹@TotalDr</div>
		@* <div><strong>Total Cr:</strong> ₹@TotalCr</div> *@
		@if (!IsBalanced)
		{
			<div class="text-danger"><strong>Unbalanced: ₹@Difference</strong></div>
		}
		else
		{
			<div class="text-success"><strong>Balanced ✅</strong></div>
		}
	</div>
</div>

<DialoBox dialogBox="accountType"></DialoBox>
<Loader customText="@loaderText" show="isLoading"/>
@code{

	[Parameter] public List<Ledger> ledgers { get; set; } = new List<Ledger>();
	[Parameter] public bool isViewing { get; set; } = false;
	[Parameter] public bool isUpdating { get; set; } = false;
	decimal TotalDr => ledgers.Sum(x => x.DR_Amount);
	decimal TotalCr => ledgers.Sum(x => x.CR_Amount);
	decimal Difference => Math.Abs(TotalDr - TotalCr);
	bool IsBalanced => TotalDr == TotalCr;
	string branch = "";
	bool isLoading = false;
	string loaderText = "";

	Ledger currentLedger;


	CustomDialogBox getCSTDialpg = new();

	string LedgerType = "SE";
	TransactionType transactionType = TransactionType.EXPENSE;
	PaymentTypes paymentType = PaymentTypes.CASH;
	List<LedgerAcccounts> accountTypes = new List<LedgerAcccounts>();

	LedgerAcccounts temp = new LedgerAcccounts();

	CustomDialogBox accountType = new CustomDialogBox();

	private string SelectedCST = "No Customer Selected";
	private string CST_Search = "";

	List<UserModal> customers = new List<UserModal>();
	List<Supplier> suppliers = new List<Supplier>();

	List<CommonCSType> commonCSTs = new List<CommonCSType>();
	List<CommonCSType> filteredCommonCSTs = new List<CommonCSType>();
	private SearchSelect<CommonCSType> commonSCTList;
	private bool ShowCSTSuggestion = false;

	public async Task UpdateLedger()
	{
		try
		{
			
			await DatabaseHandler.InsertOrUpdateMultipleLedger(ledgers);
			
			ToastService.ShowToast("Ledger updated successfully", ToastType.sucess);
		}
		catch(Exception e)
		{
			Debug.WriteLine(e.Message);
			ToastService.ShowToast(e.Message, ToastType.sucess);
		}

	}

	public void HandleSCT_Key(KeyboardEventArgs e)
	{
		commonSCTList?.HandleKeyDown(e);
	}

	public async void OnCST_Search(ChangeEventArgs e)
	{
		CST_Search = e.Value.ToString() ?? "";
		// CustomerSearch.Replace(" ", "").Replace(".", "");
		SelectedCST = "No Customer Selected";
		if (string.IsNullOrWhiteSpace(CST_Search))
		{
			ShowCSTSuggestion = false;
			filteredCommonCSTs.Clear();
			return;
		}

		filteredCommonCSTs = commonCSTs
		.Where(c => c.ID.Contains(CST_Search, StringComparison.OrdinalIgnoreCase) ||
					c.Name.Contains(CST_Search, StringComparison.OrdinalIgnoreCase) ||
					c.Contact.Contains(CST_Search, StringComparison.OrdinalIgnoreCase))
		.ToList();


		ShowCSTSuggestion = filteredCommonCSTs.Any();

	}

	private void SelectCST(Ledger ledger, CommonCSType commonCS)
	{
		CST_Search = $"{commonCS.ID}";
		SelectedCST = $"{commonCS.Name}-{commonCS.Contact}";
		ledger.ForWho = commonCS.ID;
		ledger.ForWhoName = commonCS.Name;
		ShowCSTSuggestion = false;
		StateHasChanged();

	}

	bool isDoubleEntryMode = true; // Default to double-entry mode
	void ToggleEntryMode()
	{
		isDoubleEntryMode = !isDoubleEntryMode;
	}

	void createDoubleEntry(Ledger ledger)
	{
		// Don't create if both DR and CR are 0
		if (ledger.DR_Amount == 0 && ledger.CR_Amount == 0)
		{
			ToastService.ShowToast("DR and CR cannot both be zero", ToastType.warning);
			return;
		}

		Ledger oppositeEntry = new Ledger
				{
					Date = ledger.Date,
					AccountID = ledger.AccountID,
					TransactionType = ledger.TransactionType,
					Particulars = ledger.Particulars + " (Opposite)",
					Branch = ledger.Branch,

			// Flip Dr and Cr
					DR_Amount = ledger.CR_Amount,
					CR_Amount = ledger.DR_Amount
				};

		ledgers.Add(oppositeEntry);
		ToastService.ShowToast("Opposite entry added", ToastType.sucess);
	}

	public async Task fetchAccountTypes()
	{
		isLoading = true;
		loaderText = "Fetching";
		accountTypes.Clear();
		string fetch = "SELECT * FROM LedgerAccounts";
		var result = await DatabaseHandler.ExecuteQueryAsync(fetch);
		if(result.Count > 0)
		{
			foreach(var row in result)
			{
				LedgerAccountsType at;
				Enum.TryParse<LedgerAccountsType>(row["AccountType"].ToString(), out at);
				accountTypes.Add(new LedgerAcccounts
				{
					AcccountId = Int32.Parse(row["AccountID"].ToString() ?? "0"),
					AccountName = row["AccountName"].ToString(),
					AccountType = at,
					isActive = bool.Parse(row["IsActive"].ToString() ?? "true")
				});
			}
		}

		isLoading = false;
		loaderText = "";
	}

	List<Ledger> createSingleEntry(bool isDouble)
	{
		List<Ledger> newLedgers = new();

		foreach(var ledger in ledgers)
		{
			if(isDouble)
			{
				transactionType = ledger.TransactionType;
				paymentType = ledger.PaymentMode;
			}
			ledger.TransactionType = transactionType;
			ledger.PaymentMode = paymentType;
			newLedgers.Add(ledger);
			if (isDouble && paymentType == PaymentTypes.NONE) continue;

			if (ledger.DR_Amount > 0 || ledger.CR_Amount > 0)
			{
				// Create opposite entry for single entry mode
				Ledger oppositeEntry = new Ledger
						{
							Date = ledger.Date,
							AccountID = accountTypes.FirstOrDefault((a) => a.AccountName.ToString() == $"{paymentType.ToString().ToUpper()} A/C")?.AcccountId ?? 0,
							TransactionType = transactionType,
							Particulars = $"{ledger.AccountType.AccountName} paid by {paymentType}",
							Branch = ledger.Branch,
							PaymentMode = paymentType,
							ForWho = ledger.ForWho,
							DR_Amount = ledger.CR_Amount,
							CR_Amount = ledger.DR_Amount
						};
				newLedgers.Add(oppositeEntry);
			}
		}
		return newLedgers;
	}
	async Task SaveLedgerEntries()
	{
		try
		{

			if (!IsBalanced)
			{
				ToastService.ShowToast("Cannot save: Dr and Cr are not balanced!", ToastType.warning);
				return;
			}

			isLoading = true;
			loaderText = "Saving Ledger...";

			

			await DatabaseHandler.InsertOrUpdateMultipleLedger(ledgers);
			isLoading = false;
			loaderText = "";
			ToastService.ShowToast("Ledger saved successfully", ToastType.sucess);
			ledgers.Clear();
		}
		catch(Exception e)
		{
			ToastService.ShowToast(e.Message, ToastType.error);
		}

	}

	protected override void OnInitialized()
	{

		accountType = new CustomDialogBox
		{
			Title = "Add Account Type",
					body = @<div class="container p-3 border rounded shadow-sm bg-light" style="max-width: 500px;">
		<h5 class="mb-3">➕ Add Ledger Account</h5>

		<div class="mb-3">
			<label class="form-label">Account Name</label>
			<input type="text" @bind="temp.AccountName" @oninput="(e)=>temp.AccountName = e.Value?.ToString()?.ToUpper()" class="form-control" placeholder="Ex: Cash A/C" />
		</div>

		<div class="mb-3">
			<label class="form-label">Account Type</label>
			<select @bind="temp.AccountType" class="form-select">
				<option value="">-- Select Type --</option>
				<option value="@LedgerAccountsType.ASSET">ASSET</option>
				<option value="@LedgerAccountsType.LIABILITY">LIABILITY</option>
				<option value="@LedgerAccountsType.INCOME">INCOME</option>
				<option value="@LedgerAccountsType.EXPENSE">EXPENSE</option>
				<option value="@LedgerAccountsType.EQUITY">EQUITY</option>
			</select>
		</div>

		<div class="d-flex justify-content-end">
			<button class="btn btn-primary" @onclick="SubmitAccountType">Add</button>
		</div>
	</div>

	,
			OnCloase = EventCallback.Factory.Create(this, () =>
			{
				accountType.showDialog = false;
				StateHasChanged();
			}),
		};

		getCSTDialpg = new CustomDialogBox
		{
				Title = "Select Customer/Supplier",
				body = @<div class="container p-3 border rounded shadow-sm bg-light" style="max-width: 500px;">
		<div class="input-group">
			<input @onkeydown="HandleSCT_Key" autocomplete="off" type="text" id="Customer" @bind="CST_Search" @oninput="OnCST_Search" class="form-control" placeholder="Search by ID, Name, or Contact" required>

		</div>
		<SearchSelect @ref="commonSCTList" Items="filteredCommonCSTs" OnSelect="@(c=> SelectCST(currentLedger,c))" T="CommonCSType" showSuggestions="ShowCSTSuggestion" ShowSuggestionsChanged="@((bool val) => ShowCSTSuggestion = val)">
			<ItemTemplate Context="cust">
				<div>@cust.role - @cust.Name - @cust.Contact</div>
			</ItemTemplate>
		</SearchSelect>

		<p>@SelectedCST</p>
				</div>,
			footers = new List<FooterBtn>
			{
				new FooterBtn
				{
					Button = @<button class="btn btn-danger" @onclick="()=>{getCSTDialpg.showDialog = false;  StateHasChanged();}">OK</button>
                },
				
			},
			OnCloase = EventCallback.Factory.Create(this, async () =>
			{
				getCSTDialpg.showDialog = false;
				StateHasChanged();
			}),
		};
	}

	void HandleClick()
	{
		
	}

	async void SubmitAccountType()
	{
		try
		{
			isLoading = true;
			loaderText = "Adding";

			string checkQuery = @"
    SELECT AccountID
    FROM LedgerAccounts
    WHERE AccountName = @AccountName AND AccountType = @AccountType";

			var checkParams = new Dictionary<string, object>
{
	{ "@AccountName", temp.AccountName },
	{ "@AccountType", temp.AccountType.ToString() }
};

			var result = await DatabaseHandler.ExecuteQueryAsync(checkQuery, checkParams);

			if(result.Count == 0)
			{
				string insertQuery = "INSERT INTO LedgerAccounts (AccountName, AccountType,IsActive) VALUES (@AccountName, @AccountType,@IsActive)";

				var parameters = new Dictionary<string, object>
				{
					{ "@AccountName", temp.AccountName },
					{ "@AccountType", temp.AccountType.ToString() },
					{ "@IsActive", true }
				};
				await DatabaseHandler.ExecuteNonQueryAsync(insertQuery, parameters);
				ToastService.ShowToast("Added Successfully", ToastType.sucess);
			}
			else
			{
				ToastService.ShowToast("Account Already there", ToastType.error);
			}

			accountType.showDialog = false;
			isLoading = false;
			loaderText = "";

			await fetchAccountTypes();

			StateHasChanged();

		}
		catch(Exception e)
		{
			ToastService.ShowToast(e.Message, ToastType.error);
		}


	}
	protected async Task FetchCST()
	{
		var fetchCustomer = @"SELECT * FROM Customers";
		var fetchSupplier = @"SELECT * FROM Suppliers";

		var res2 = await DatabaseHandler.ExecuteQueryAsync(fetchCustomer);
		var res3 = await DatabaseHandler.ExecuteQueryAsync(fetchSupplier);

		if (res2.Count > 0)
		{
			foreach (var row in res2)
			{
				// customers.Add(new UserModal
				//     {
				//         CustomerId = row["CustomerID"].ToString() ?? "",
				//         Name = row["Name"].ToString() ?? "",
				//         Contact = row["Contact"].ToString() ?? "",
				//     });
				commonCSTs.Add(new CommonCSType
					{
						ID = row["CustomerID"].ToString() ?? "",
						Name = row["Name"].ToString() ?? "",
						Contact = row["Contact"].ToString() ?? "",
						role = "Customer"
					});
			}
		}

		if (res3.Count > 0)
		{
			foreach (var row in res3)
			{
				// suppliers.Add(new Supplier
				//     {
				//         SupplierID = row["SupplierID"].ToString() ?? "",
				//         Name = row["Name"].ToString() ?? "",
				//         Contact = row["Contact"].ToString() ?? "",
				//     });
				commonCSTs.Add(new CommonCSType
					{
						ID = row["SupplierID"].ToString() ?? "",
						Name = row["Name"].ToString() ?? "",
						Contact = row["Contact"].ToString() ?? "",
						role = "Supplier"
					});
			}
		}
	}
	protected override async Task OnInitializedAsync()
	{
		branch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";
		accountTypes.Clear();
		await FetchCST();
		await fetchAccountTypes();
	}

	void addLedger()
	{
		ledgers.Add(new Ledger
		{
			Branch = branch,
			PaymentMode = PaymentTypes.NONE
		});


	}
	void removeLedger(Ledger ledger)
	{
		ledgers.Remove(ledger);
	}
}