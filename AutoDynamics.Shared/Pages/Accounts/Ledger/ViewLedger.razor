@page "/ledger"
@inject IDatabaseHandler DatabaseHandler
@inject ITabService TabService
@inject IToastService ToastService

<h3 class="mb-3">Ledger Entries</h3>

<div class="mb-3">
    <label>Branch: </label>
    <select @bind="selectedBranch"  class="form-select w-25 mb-3">
        <option value="Sivakasi">Sivakasi</option>
        <option value="ByPass">ByPass</option>

    </select>
</div>

<div class="mb-3">
    <label>Filter By: </label>
    <select @bind="filterType"  class="form-select w-25 mb-3">
        <option value="all">All</option>
        <option value="CASH A/C">CASH A/C</option>
        <option value="BANK A/C">BANK A/C</option>
        <option value="CARD A/C">CARD A/C</option>
        <option value="cr">CREDIT A/C</option>
        <option value="ac">A/C</option>
    </select>
</div>

<div class="mb-3">
    <label>Sort By: </label>
    <select @bind="selectedSortingOption" class="form-control">
        <option value="yesterday">Yesterday</option>
        <option value="date">Today</option>
        <option value="month">Month to Date</option>
        <option value="year">Year to Date</option>
        <option value="range">Custom</option>
    </select>

    @if (selectedSortingOption == "range")
    {
        <input type="date" @bind="startDate" class="form-control mt-2" />
        <input type="date" @bind="endDate" class="form-control mt-2" />
    }
</div>
<div class="w-100 d-flex justify-content-between align-items-md-center">
    <button class="btn btn-primary mb-3" @onclick="ApplyFilters">Apply Filters</button>
</div>
@if(filterType == "ac")
{
    <div style="overflow-x:auto;">
        <table class="table table-bordered table-hover text-center align-middle ledger-table">
            <thead class="table-secondary">
                <tr>
                    <th>Account Type</th>
                    <th>Account Names</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var account in AccountTypes)
                {
                    if (!account.isActive) continue;
                    if (account.AccountName == "CASH A/C" || account.AccountName == "BANK A/C" || account.AccountName == "CARD A/C"
                    || account.AccountName == "CUSTOMER A/C" || account.AccountName == "CUSTOMER CREDIT A/C" || account.AccountName == "SUPPLIER A/C") continue;
                    <tr>
                        <td>@account.AccountType.ToString()</td>
                        <td>@account.AccountName</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="()=>{ViewAccount(account);}">VIEW</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div style="overflow-x:auto;">
        <table class="table table-bordered table-hover text-center align-middle ledger-table">
            <thead class="table-secondary">
                <tr>
                    <th>Date</th>
                    <th>Account Type</th>
                    <th>Transaction Type</th>
                    <th>Bill No</th>
                    <th>ForWho</th>
                    <th>Particulars</th>
                    <th>Narations</th>
                    <th>Dr (₹)</th>
                    <th>Cr (₹)</th>
                    <th>Balance</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ledger in ledgers)
                {
                    <tr>
                        <td>@ledger.Date.ToString("dd-MM-yyyy")</td>
                        <td>@ledger.AccountType?.AccountName</td>
                        <td>@ledger.TransactionType</td>
                        <td>@ledger.RefNo</td>
                        <td>@ledger.ForWhoName</td>
                        <td>@ledger.Particulars</td>
                        <td>@ledger.naration</td>
                        
                        <td class="text-end">@ledger.DR_Amount.ToString("N2")</td>
                        <td class="text-end">@ledger.CR_Amount.ToString("N2")</td>
                        <td class="text-end">@GetFormattedBalance(ledger.Balance)</td>
                        <td class="d-flex flex-column gap-2">
                            @if(ledger.TransactionType == TransactionType.EXPENSE || ledger.TransactionType == TransactionType.OTHER)
                            {
                                <button class="btn btn-warning btn-sm" @onclick="()=>{ViewLedgerFun(ledger);}">VIEW</button>
                                <button class="btn btn-warning btn-sm" @onclick="()=>{UpdateLedger(ledger);}">UPDATE</button>
                            }
                        </td>
                    </tr>
                }
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>Closing Balance</td>
                    <td class="text-end"></td>
                    <td class="text-end"></td>
                    <td class="text-end">@GetFormattedBalance(closingBalance)</td>
                    <td class="d-flex flex-column gap-2">

                    </td>
                </tr>
            </tbody>
        </table>
        <div class="d-flex justify-content-end mb-3">
            <div class="card text-end p-3 shadow-sm border border-primary" style="min-width: 250px;">
                <h5 class="card-title mb-3">Total</h5>
                <p class="mb-1"><strong>Incomes:</strong> @ledgers.Sum(a => a.DR_Amount)</p>
                <p class="mb-0"><strong>Expenses:</strong> @ledgers.Sum(a => a.CR_Amount)</p>
            </div>
        </div>
    </div>
}


<Loader show="@isLoading" customText="Fetching Data..."></Loader>
@code {
    List<Ledger> ledgers = new();
    List<Ledger> sortedLedgers = new();
    List<LedgerAcccounts> AccountTypes = new();
    string currentSortColumn = nameof(Ledger.Date);
    bool sortAscending = true;
    string selectedAccountType = "";
    string selectedBranch = "Sivakasi";
    string filterType = "all";
    string selectedSortingOption = "date";
    DateTime? startDate, endDate;
    bool isLoading = false;
    decimal closingBalance = 0.0m;


    async Task UpdateLedger(Ledger ledger)
    {
        List<Ledger> ledgers = await getLedgers(ledger.EntryID);
        if (ledgers.Count > 0)
        {
            Dictionary<string, dynamic> parameter = new Dictionary<string, dynamic>
            {
                {"ledgers",ledgers},
                {"isUpdating",true}
            };
            TabService.OpenWithParameter(ledger.AccountType?.AccountName ?? "Ledger", typeof(AddLedger), parameter);
        }
        else
        {
            ToastService.ShowToast("No ledger entries found for this account.", ToastType.warning);
        }
    }

    async Task ViewLedgerFun(Ledger ledger)
    {
        List<Ledger> ledgers = await getLedgers(ledger.EntryID);
        if (ledgers.Count > 0)
        {
            Dictionary<string, dynamic> parameter = new Dictionary<string, dynamic>
			{
                {"ledgers",ledgers},
				{"isViewing",true}
			};
            TabService.OpenWithParameter(ledger.AccountType?.AccountName ?? "Ledger", typeof(AddLedger), parameter);
        }
        else
        {
            ToastService.ShowToast("No ledger entries found for this account.",ToastType.warning);
        }
    }

    async Task<List<Ledger>> getLedgers(int entryID)
    {
        string query = $@"SELECT *
                   FROM CashBankLedger WHERE EntryID = {entryID}";
        var res = await DatabaseHandler.ExecuteQueryAsync(query);

        List<Ledger> ledgers = new();
        if(res.Count > 0)
        {
            foreach(var row in res)
            {
                bool active = row["isActive"].ToString() == "1" ? true : false;
                if (!active) continue;
                Ledger temp = new Ledger
                    {
                        LedgerID = Convert.ToInt32(row["LedgerID"]),
                        Date = Convert.ToDateTime(row["Date"]),
                        AccountID = Convert.ToInt32(row["AccountID"]),
                        AccountType = AccountTypes.FirstOrDefault((b) => b.AcccountId == Convert.ToInt32(row["AccountID"] ?? "0")),
                        Branch = row["Branch"]?.ToString() ?? "",
                        TransactionType = Enum.TryParse<TransactionType>(row["TransactionType"].ToString(), out var tran) ? tran : TransactionType.OTHER,
                        ReferenceID = row["ReferenceID"] != DBNull.Value ? Convert.ToInt32(row["ReferenceID"]) : 0,
                        Particulars = row["Particulars"]?.ToString() ?? "",
                        ForWho = row["ForWho"]?.ToString() ?? "",
                        EntryID = row["EntryID"] != DBNull.Value ? Convert.ToInt32(row["EntryID"]) : 0,
                        CR_Amount = Convert.ToDecimal(row["CrAmount"]),
                        DR_Amount = Convert.ToDecimal(row["DrAmount"]),
                        Balance = Convert.ToDecimal(row["Balance"]),
                        isActive = active
                    };
                ledgers.Add(temp);
            }
        }
        return ledgers;
    }

    void ViewAccount(LedgerAcccounts ledgerAccount)
    {
        Dictionary<string, dynamic> parameter = new Dictionary<string, dynamic>
        {
            {"LedgerAccount",ledgerAccount}
        };
        TabService.OpenWithParameter(ledgerAccount.AccountName, typeof(ViewSingleAccountLedger), parameter);
    }

    async Task ApplyFilters()
    {
        isLoading = true;
        ledgers.Clear();
        sortedLedgers.Clear();
        DateTime today = DateTime.Today;
        decimal openingBalance = 0;

        DateTime openingDateBoundary = selectedSortingOption switch
        {
            "date" => today,
            "yesterday" => today.AddDays(-1),
            "month" => new DateTime(today.Year, today.Month, 1),
            "year" => new DateTime(today.Year, 1, 1),
            "range" => startDate.HasValue ? startDate.Value : DateTime.MinValue,
            _ => DateTime.MinValue
        };

        // Build a WHERE clause for opening balance (same filter by AccountID if needed)
        string openingWhereClause = $"WHERE Date < '{openingDateBoundary:yyyy-MM-dd HH:mm:ss}' AND isActive = 1 AND Branch = '{selectedBranch}'";

        if (filterType == "cr")
        {
            int supplierCreditAccountID = getAccountID("SUPPLIER A/C");
            int customerCreditAccountID = getAccountID("CUSTOMER CREDIT A/C");
            Debug.WriteLine($"Supplier Credit Account ID: {supplierCreditAccountID}, Customer Credit Account ID: {customerCreditAccountID}");
            openingWhereClause += $"AND AccountID in ({supplierCreditAccountID},{customerCreditAccountID}) AND LOWER(Particulars) like '%by%credit%'";
        }
        else if (filterType != "all" && filterType != "ac")
        {
            openingWhereClause += $" AND AccountID = {getAccountID(filterType)}";
        }

        // Query for opening balance
        var openingBalanceQuery = $@"SELECT SUM(DrAmount - CrAmount) as OpeningBalance FROM CashBankLedger {openingWhereClause}";
        var result = await DatabaseHandler.ExecuteQueryAsync(openingBalanceQuery);
        if (result.Count > 0 && result[0]["OpeningBalance"] != DBNull.Value)
        {
            openingBalance = Convert.ToDecimal(result[0]["OpeningBalance"]);
        }

        string whereClause = "";

        switch(selectedSortingOption)
        {
            case "date":
                whereClause += $"WHERE DATE(Date) = '{today:yyyy-MM-dd}' AND Branch = '{selectedBranch}'";
                break;
            case "yesterday":
                whereClause += $"WHERE DATE(Date) = '{today.AddDays(-1):yyyy-MM-dd}' AND Branch = '{selectedBranch}'";
                break;
            case "month":
                whereClause += $"WHERE MONTH(Date) = {today.Month} AND YEAR(Date) = {today.Year} AND Branch = '{selectedBranch}'";
                break;
            case "year":
                whereClause += $"WHERE YEAR(Date) = {today.Year} AND Branch = '{selectedBranch}'";
                break;
            case "range":
                whereClause += $"WHERE DATE(Date) BETWEEN '{startDate.Value:yyyy-MM-dd HH:mm:ss}' AND '{endDate.Value:yyyy-MM-dd HH:mm:ss}' AND Branch = '{selectedBranch}'";
                break;
            default:
                break;
        }
        if(filterType == "cr")
        {
            int supplierCreditAccountID = getAccountID("SUPPLIER A/C");
            int customerCreditAccountID = getAccountID("CUSTOMER CREDIT A/C");
            if(whereClause == "")
            {
                whereClause += $"WHERE AccountID in ({supplierCreditAccountID},{customerCreditAccountID}) AND Branch = '{selectedBranch}' AND LOWER(Particulars) like '%by%credit%'";
            }
            else
            {
                whereClause += $"AND AccountID in ({supplierCreditAccountID},{customerCreditAccountID}) AND Branch = '{selectedBranch}' AND LOWER(Particulars) like '%by%credit%'";
            }
        }
        else if(filterType != "all" && filterType != "ac")
        {
            if(whereClause == "")
            {
                whereClause += $"WHERE AccountID = {getAccountID(filterType)} AND Branch = '{selectedBranch}'";
            }
            else
            {
                whereClause += $" AND AccountID = {getAccountID(filterType)} AND Branch = '{selectedBranch}'";
            }
        }
        var query = $@"SELECT LedgerID, Date, AccountID, Branch, TransactionType,ForWho,EntryID, ReferenceID, Particulars, CrAmount, DrAmount, Balance,isActive
                      FROM CashBankLedger {whereClause} Order By Date";
        Debug.WriteLine(query);
        var res = await DatabaseHandler.ExecuteQueryAsync(query);

        if (res.Count > 0)
        {
            ledgers.Add(new Ledger
                {
                    Branch = selectedBranch,
                    Date = openingDateBoundary,
                    Particulars = "Opening Balance",
                    DR_Amount = 0.0m,
                    CR_Amount = 0.0m,
                    Balance = openingBalance
                });
            foreach (var row in res)
            {
                bool active = row["isActive"].ToString() == "1" ? true : false;
                if (!active) continue;
                Ledger temp = new Ledger
                    {
                        LedgerID = Convert.ToInt32(row["LedgerID"]),
                        Date = Convert.ToDateTime(row["Date"]),
                        AccountID = Convert.ToInt32(row["AccountID"]),
                        AccountType = AccountTypes.FirstOrDefault((b) => b.AcccountId == Convert.ToInt32(row["AccountID"] ?? "0")),
                        Branch = row["Branch"]?.ToString() ?? "",
                        TransactionType = Enum.TryParse<TransactionType>(row["TransactionType"].ToString(), out var tran) ? tran : TransactionType.OTHER,
                        ReferenceID = row["ReferenceID"] != DBNull.Value ? Convert.ToInt32(row["ReferenceID"]) : 0,
                        Particulars = row["Particulars"]?.ToString() ?? "",
                        ForWho = row["ForWho"]?.ToString() ?? "",
                        EntryID = row["EntryID"] != DBNull.Value ? Convert.ToInt32(row["EntryID"]) : 0,
                        CR_Amount = Convert.ToDecimal(row["CrAmount"]),
                        DR_Amount = Convert.ToDecimal(row["DrAmount"]),
                        Balance = Convert.ToDecimal(row["Balance"]),
                        isActive = active
                    };
                if(temp.TransactionType == TransactionType.BILL)
                {
                    string getCustomerDetails = $"SELECT Name FROM Customers WHERE CustomerID = (SELECT CustomerID FROM Bills WHERE BillID = {temp.ReferenceID})";
                    var customerDetails = await DatabaseHandler.ExecuteQueryAsync(getCustomerDetails);
                    string billNo = $"SELECT BillNo,Branch FROM Bills WHERE BillID = {temp.ReferenceID}";
                    var billNoData = await DatabaseHandler.ExecuteQueryAsync(billNo);
                    if (customerDetails.Count > 0)
                    {
                        temp.ForWhoName = customerDetails[0]["Name"].ToString() ?? "";
                    }
                    if (billNoData.Count > 0)
                    {
                        temp.RefNo = (billNoData[0]["Branch"].ToString() == "Sivakasi" ? "SFR" : "BPR") + billNoData[0]["BillNo"].ToString()?.PadLeft(4,'0');
                    }
                }
                if (temp.TransactionType == TransactionType.RECEIPT)
                {
                    string getCustomerDetails = $"SELECT Name FROM Customers WHERE CustomerID = (SELECT CustomerID FROM Receipts WHERE ReceiptID = {temp.ReferenceID})";
                    var customerDetails = await DatabaseHandler.ExecuteQueryAsync(getCustomerDetails);
                    string getNaration = $"SELECT Narration FROM Receipts WHERE ReceiptID = {temp.ReferenceID}";
                    var narationData = await DatabaseHandler.ExecuteQueryAsync(getNaration);
                    string receiptNo = $"SELECT ReceiptNo,Branch FROM Receipts WHERE ReceiptID = {temp.ReferenceID}";
                    var receiptNoData = await DatabaseHandler.ExecuteQueryAsync(receiptNo);
                    if (customerDetails.Count > 0)
                    {
                        temp.ForWhoName = customerDetails[0]["Name"].ToString() ?? "";
                    }
                    if(narationData.Count > 0)
                    {
                        temp.naration = narationData[0]["Narration"].ToString() ?? "";
                    }
                    if(receiptNoData.Count > 0)
                    {
                        temp.RefNo = (receiptNoData[0]["Branch"].ToString() == "Sivakasi" ? "RC_SFR" : "RC_BPR") + receiptNoData[0]["ReceiptNo"].ToString()?.PadLeft(4, '0');
                    }
                }
                if (temp.TransactionType == TransactionType.PURCHASE)
                {
                    string getCustomerDetails = $"SELECT Name FROM Suppliers WHERE SupplierID = (SELECT SupplierID FROM PurchaseBills WHERE PurchaseBillID = {temp.ReferenceID})";
                    var customerDetails = await DatabaseHandler.ExecuteQueryAsync(getCustomerDetails);
                    string billNo = $"SELECT BillNo,Branch FROM PurchaseBills WHERE PurchaseBillID = {temp.ReferenceID}";
                    var billNoData = await DatabaseHandler.ExecuteQueryAsync(billNo);
                    if (customerDetails.Count > 0)
                    {
                        temp.ForWhoName = customerDetails[0]["Name"].ToString() ?? "";
                    }
                    if (billNoData.Count > 0)
                    {
                        temp.RefNo = (billNoData[0]["Branch"].ToString() == "Sivakasi" ? "SFRP" : "BPRP") + billNoData[0]["BillNo"].ToString()?.PadLeft(4, '0');
                    }
                }
                if (temp.TransactionType == TransactionType.PAYMENT)
                {
                    string getCustomerDetails = $"SELECT Name FROM Suppliers WHERE SupplierID = (SELECT SupplierID FROM Payments WHERE PaymentID = {temp.ReferenceID})";
                    var customerDetails = await DatabaseHandler.ExecuteQueryAsync(getCustomerDetails);
                    string getNaration = $"SELECT Narration FROM Payments WHERE PaymentID = {temp.ReferenceID}";
                    var narationData = await DatabaseHandler.ExecuteQueryAsync(getNaration);
                    string paymentNo = $"SELECT PaymentNo,Branch FROM Payments WHERE PaymentID = {temp.ReferenceID}";
                    var paymentNoData = await DatabaseHandler.ExecuteQueryAsync(paymentNo);
                    if (customerDetails.Count > 0)
                    {
                        temp.ForWhoName = customerDetails[0]["Name"].ToString() ?? "";
                    }
                    if (narationData.Count > 0)
                    {
                        temp.naration = narationData[0]["Narration"].ToString() ?? "";
                    }
                    if (paymentNoData.Count > 0)
                    {
						temp.RefNo = (paymentNoData[0]["Branch"].ToString() == "Sivakasi" ? "PY_SFR" : "PY_BPR") + paymentNoData[0]["PaymentNo"].ToString()?.PadLeft(4, '0');
                    }
                }

                ledgers.Add(temp);

            }

        }
        decimal runningBalance = openingBalance;
        foreach (var ledger in ledgers)
        {
            runningBalance += (ledger.DR_Amount - ledger.CR_Amount);
            ledger.Balance = runningBalance;
        }
        closingBalance = runningBalance;

        isLoading = false;
        StateHasChanged();

    }

    int getAccountID(string type)
    {
        return AccountTypes.FirstOrDefault((a) => a.AccountName.ToString() == type)?.AcccountId ?? 0;
    }
    string GetFormattedBalance(decimal balance)
    {
        if (balance == 0)
            return "0.00";

        var suffix = balance > 0 ? " Dr" : " Cr";
        return Math.Abs(balance).ToString("N2") + suffix;
    }
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var fetch = @"SELECT * FROM LedgerAccounts";

        var res1 = await DatabaseHandler.ExecuteQueryAsync(fetch);

        if (res1.Count > 0)
        {
            foreach (var row in res1)
            {
                LedgerAccountsType at;
                Enum.TryParse<LedgerAccountsType>(row["AccountType"].ToString(), out at);
                AccountTypes.Add(new LedgerAcccounts
                    {
                        AcccountId = Int32.Parse(row["AccountID"].ToString() ?? "0"),
                        AccountName = row["AccountName"].ToString(),
                        AccountType = at,
                        isActive = bool.Parse(row["IsActive"].ToString() ?? "true")
                    });
            }
        }
        isLoading = false;
        StateHasChanged();
    }
}
