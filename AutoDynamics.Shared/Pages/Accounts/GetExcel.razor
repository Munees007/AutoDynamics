@page "/read-excel"
@inject IExcelService ExcelService
@inject IDatabaseHandler DatabaseHandler
@inject IToastService ToastService
@using System.Globalization
<h3 class="text-center mt-4 mb-3 fw-bold text-primary">Read Excel File</h3>

<div class="container">
    <div class="mb-4">
        <InputFile OnChange="OnFileSelected" accept=".xlsx, .xls" class="form-control" />
    </div>

    <div class="mb-4">
        <button class="btn btn-lg bg-success" @onclick="ConvertData">Submit</button>
    </div>
    @if (excelData != null)
    {
        <div class="card shadow mb-5">
            <div class="card-header bg-primary text-white fw-semibold">Purchase Data</div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Purchase Date</th>
                                <th>Supplier ID</th>
                                <th>Total Amount</th>
                                <th>Invoice No</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in excelData)
                            {
                                <tr>
                                    @foreach (var cell in row)
                                    {
                                        <td>@cell</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    @if (excelData1 != null)
    {
        <div class="card shadow mb-5">
            <div class="card-header bg-success text-white fw-semibold">Payment Data</div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Supplier ID</th>
                                <th>Payment Date</th>
                                <th>Total Amount Paid</th>
                                <th>Payment Mode</th>
                                <th>Branch</th>
                                <th>Cheque Number</th>
                                <th>Narration</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in excelData1)
                            {
                                <tr>
                                    @foreach (var cell in row)
                                    {
                                        <td>@cell</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>
<Loader show="@showLoader" customText="@loaderText"></Loader>

@code {
    private List<List<string>> excelData = new();
    private List<List<string>> excelData1 = new();



    private List<PurchaseDetails> purchaseDetails = new();
    private List<PaymentReciptType> paymentRecipts = new();

    private bool showLoader = false;
    private string loaderText = "";

    private async void ConvertData()
    {
        showLoader = true;
        loaderText = "Inserting";
        try
        {
            var result = await DatabaseHandler.ExecuteQueryAsync(
    "SELECT IFNULL(MIN(BillNo), 1) AS MinBillNo FROM PurchaseBills WHERE Branch = @Branch AND BillingYear = @BillingYear",
    new Dictionary<string, dynamic>
            {
        { "@Branch", "Sivakasi" },
        { "@BillingYear", 2025 }
            }
    );

            // Extract the value manually
            int minBillNo = -1;

            if (result.Count > 0 && result[0]["MinBillNo"] != DBNull.Value)
            {
                int existingMin = Convert.ToInt32(result[0]["MinBillNo"]);

                // Ensure we continue going down
                minBillNo = existingMin < 0 ? existingMin - 1 : -1;
            }



            var result1 = await DatabaseHandler.ExecuteQueryAsync(
        "SELECT IFNULL(MAX(PaymentNo), 1) AS MaxBillNo FROM Payments WHERE Branch = @Branch AND BillingYear = @BillingYear",
        new Dictionary<string, dynamic>
                    {
        { "@Branch", "Sivakasi" },
        { "@BillingYear", 2025 }
                    }
        );

            // Extract the value manually
            int minBillNoPayment = 1;
            if (result1.Count > 0 && result1[0]["MaxBillNo"] != DBNull.Value)
            {
                minBillNoPayment = Convert.ToInt32(result1[0]["MaxBillNo"]) + 1;
            }

            string[] formats = {
    "d.M.yyyy", "dd.MM.yyyy", "d.MM.yyyy", "dd.M.yyyy","dd.M.yy",
    "yyyy-MM-dd", "MM/dd/yyyy", "d-M-yyyy", "dd-MM-yyyy"
};
            foreach (var row in excelData)
            {

                PurchaseDetails purchase = new PurchaseDetails
                    {
                        purchase = new Purchase
                        {
                            BillingYear = 2025,
                            BillNo = minBillNo,
                            Branch = "Sivakasi",
                            PurchaseDate = DateTime.ParseExact(row[0], formats, CultureInfo.InvariantCulture,DateTimeStyles.None),
                            InvoiceNumber = row[3],
                            SupplierID = row[1],
                            TotalAmount = decimal.Parse(row[2]),
                            type = PaymentType.CREDIT,
                            CreatedAt = DateTime.ParseExact(row[0], formats, CultureInfo.InvariantCulture,DateTimeStyles.None),
                            taxType = TaxType.EXCLUSIVE_TAX
                        }
                    };
                purchaseDetails.Add(purchase);
                minBillNo--;

            }

            foreach (var row in excelData1)
            {
                PaymentReciptType temp = new PaymentReciptType
                    {
                        BillingYear = 2025,
                        Branch = "Sivakasi",
                        supplier = new Supplier
                        {
                            SupplierID = row[0]
                        },
                        PaymentDate = DateTime.ParseExact(row[1], formats, CultureInfo.InvariantCulture,DateTimeStyles.None),
                        TotalAmountPaid = decimal.Parse(row[2]),
                        paymentType = (PaymentTypes)Enum.Parse(typeof(PaymentTypes), row[3]),
                        CheckNumber = row[4],
                        Narration = row[5],
                        
                        PaymentNo = minBillNoPayment
                    };
                paymentRecipts.Add(temp);
                minBillNoPayment++;
            }

            string insertIntoPurchase = @"INSERT INTO PurchaseBills (Branch,BillingYear,BillNo,PurchaseDate,InvoiceNumber,SupplierID,TotalAmount,PaymentType,
TaxType,CreatedAt) VALUES(@Branch,@BillingYear,@BillNo,@PurchaseDate,@InvoiceNumber,@SupplierID,@TotalAmount,@PaymentType,@TaxType,@CreatedAt)";

            foreach (var row in purchaseDetails)
            {
                Dictionary<string, dynamic> parameters = new Dictionary<string, dynamic>
            {
                {"@Branch",row.purchase.Branch},
                {"@BillingYear",row.purchase.BillingYear},
                {"@BillNo",row.purchase.BillNo},
                {"@PurchaseDate",row.purchase.PurchaseDate},
                {"@InvoiceNumber",row.purchase.InvoiceNumber},
                {"@SupplierID",row.purchase.SupplierID},
                {"@TotalAmount",row.purchase.TotalAmount},
                {"@PaymentType",row.purchase.type.ToString()},
                {"@TaxType",row.purchase.taxType.ToString()},
                {"@CreatedAt",row.purchase.CreatedAt},
            };

                await DatabaseHandler.ExecuteNonQueryAsync(insertIntoPurchase, parameters);
            }

            string insertPayment = @"INSERT INTO Payments (SupplierID,PaymentDate,TotalAmountPaid,PaymentMode,CreatedAt,Branch,CheckNumber,BillingYear,PaymentNo,Narration)
            VALUES (@SupplierID,@PaymentDate,@TotalAmountPaid,@PaymentMode,@CreatedAt,@Branch,@CheckNumber,@BillingYear,@PaymentNo,@Narration)";

            foreach (var row in paymentRecipts)
            {
                Dictionary<string, dynamic> parameters = new Dictionary<string, dynamic>
            {
                {"SupplierID",row.supplier.SupplierID},
                {"PaymentDate",row.PaymentDate},
                {"TotalAmountPaid",row.TotalAmountPaid},
                {"PaymentMode",row.paymentType.ToString()},
                {"CreatedAt",row.PaymentDate},
                {"Branch",row.Branch},
                {"CheckNumber",row.CheckNumber},
                {"BillingYear",row.BillingYear},
                {"PaymentNo",row.PaymentNo},
                {"Narration",row.Narration}
            };
                await DatabaseHandler.ExecuteNonQueryAsync(insertPayment, parameters);
            }
            ToastService.ShowToast("Inserting Successful", ToastType.sucess);
        }
        catch(Exception e)
        {
            Debug.Write(e.Message);
            ToastService.ShowToast(e.Message, ToastType.error);
        }
        

        showLoader = false;
        loaderText = "";
        StateHasChanged();

    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        showLoader = true;
        loaderText = "Reading File";
        var file = e.File as IBrowserFile;
        if (file != null)
        {


            // ClosedXML Excel reading
            excelData = await ExcelService.readData(file,1,4);
            excelData1 = await ExcelService.readData(file, 2,3);

            Console.WriteLine($"Read {excelData.Count} rows from Excel.");
        }
        else
        {
            Console.WriteLine("File is null.");
        }
        showLoader = false;
        loaderText = "";
        StateHasChanged();
    }
}
