@page "/payment-entry"
@inject IDatabaseHandler DatabaseHandler
@inject IMyLocalStorageService MyLocalStorageService
@inject IToastService ToastService
<div class="container p-3">
    <h3 class="mb-4 fw-bold ">Enter Supplier Payment</h3>

    <!-- Date and Customer Search -->
    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <label for="paymentDate" class="form-label fw-bold">Date</label>
            <input type="date" id="paymentDate" class="form-control" @bind="@supplierCredits.PaymentDate" />
        </div>



        <div class="col-md-8">
            <label for="Customer" class="form-label fw-bold">Supplier</label>
            <div class="input-group">
                <input @onkeydown="HandleSupplierKey" autocomplete="off" type="text" id="Customer"
                @bind="SupplierSearch" @oninput="OnSupplierSearch"
                class="form-control" placeholder="Search by ID, Name, or Contact" required>

            </div>
            <SearchSelect @ref="supplierListRef" Items="filteredSuppliers"
            OnSelect="@(c=> SelectSupplier(c))" T="Supplier"
            showSuggestions="ShowCustomerSuggestion"
            ShowSuggestionsChanged="@((bool val) => ShowCustomerSuggestion = val)">
                <ItemTemplate Context="cust">
                    <div>@cust.SupplierID - @cust.Name - @cust.Contact</div>
                </ItemTemplate>
            </SearchSelect>
        </div>
    </div>

    <div class="col-md-10 input-group mb-3">
        <label class="input-group-text fw-bold">CheckNumber</label>
        <input type="text" class="form-control" @bind="supplierCredits.CheckNumber" />
    </div>

    <div class="col-md-10 input-group mb-3">
        <label class="input-group-text fw-bold">Narration</label>
        <input type="text" class="form-control" @bind="supplierCredits.Narration" />
    </div>

    <!-- Credit Bills Section -->
    <h5 class="fw-semibold mb-3 fw-bold">Credit Bills</h5>

    <div class="input-group mb-3">
        <span class="input-group-text fw-bold">Amount</span>
        <input type="number" id="amount" class="form-control" @bind="@splitAmount" placeholder="Enter amount" />
        <button class="btn btn-primary" type="button" @onclick="HandleSplitAmount">Apply</button>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered align-middle text-center">
            <thead class="table-light">
                <tr>
                    <th>Select</th>
                    <th>Bill No</th>
                    <th>Bill Date</th>
                    <th>Due Amount</th>
                    <th>Already Paid</th>
                    <th>Need to Pay</th>
                    <th>Amount Paid</th>
                    <th>Payment Type</th>

                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < supplierCredits.paymentBills.Count; i++)
                {
                    var item = supplierCredits.paymentBills[i];
                    item.index = i;
                    <tr>
                        <td>
                            <input type="checkbox" @oninput="(e)=>{triggerCheckBox(e,item);}" @bind="item.isSelected" class="form-check-input" style="width:25px;height:25px;cursor:pointer" />
                        </td>
                        <td>
                            @((item.branch == "Sivakasi" ? "SFR" : "BPR") + item.purchaseBillID.ToString().PadLeft(4, '0'))
                        </td>
                        <td>@item.purchaseDate.ToString("MMM-dd-yyyy")</td>

                        <td>@item.dueAmount</td>
                        <td>@item.paidAmount</td>
                        <td>@item.remainingBalance</td>
                        <td>
                            <input autocomplete="off" type="number" class="form-control text-end" @bind="item.amountPayed" min="1">
                        </td>
                        <td>
                            <select @bind="item.paymentType" class="form-select">
                                <option value="@PaymentTypes.CASH">CASH</option>
                                <option value="@PaymentTypes.CARD">CARD</option>
                                <option value="@PaymentTypes.BANK">BANK</option>
                                <option value="@PaymentTypes.UPI">UPI</option>
                            </select>
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Submit Button -->
    <div class="d-flex justify-content-end mt-4">
        <button class="btn btn-primary px-4" @onclick="HandleSubmit">Submit</button>
    </div>
</div>

<Loader show="isLoading" customText="@loaderText" />
@code {
    PaymentReciptType supplierCredits = new();
    List<Supplier> suppliers = new();

    private string SupplierSearch = "";
    private List<Supplier> filteredSuppliers { set; get; } = new List<Supplier>();
    private SearchSelect<Supplier> supplierListRef;
    bool ShowCustomerSuggestion = false;
    decimal splitAmount = 0;
    List<LedgerAcccounts> AccountTypes = new List<LedgerAcccounts>();

    private string billSearch = "";
    private List<PaymentBill> paymentBills { get; set; } = new();
    private List<PaymentBill> filteredPaymentBills { get; set; } = new List<PaymentBill>();
    private SearchSelect<CreditBill> creditBillRef;
    bool showCreditSuggestion = false;

    bool isLoading = false;
    string loaderText = "";

    string currentBranch = "";

    public void triggerCheckBox(ChangeEventArgs change, PaymentBill item)
    {
        item.isSelected = (bool)change.Value!;
        HandleSplitAmount();

    }
    public void HandleSplitAmount()
    {
        decimal SA = splitAmount;
        Debug.WriteLine("Triggered");
        if (SA <= 0)
        {
            ToastService.ShowToast("Split amount cannot be negative or zero", ToastType.error);
            return;
        }

        if (SA > 0)
        {
            //Reset all amounts to 0
            supplierCredits.paymentBills.ForEach(bill => bill.amountPayed = 0);
            foreach (var bill in supplierCredits.paymentBills)
            {
                if (SA == 0)
                {
                    break;
                }
                if (bill.remainingBalance > 0 && bill.remainingBalance <= SA && bill.isSelected)
                {
                    bill.amountPayed = bill.remainingBalance;
                    SA -= bill.remainingBalance;
                }
                else if (bill.remainingBalance > 0 && bill.remainingBalance >= SA && bill.isSelected)
                {
                    bill.amountPayed = SA;
                    SA -= SA;

                }
            }
        }
        StateHasChanged();
    }

    public void AddNewItem()
    {
        supplierCredits.paymentBills.Add(new PaymentBill());
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loaderText = "Fetching Data";
            isLoading = true;
            currentBranch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";
            await NecessaryData();
            isLoading = false;
            loaderText = "";
            StateHasChanged();
            ToastService.ShowToast("Fetch Successful", ToastType.sucess);
        }
        catch (Exception e)
        {
            ToastService.ShowToast(e.Message, ToastType.sucess);
        }

    }

    async Task NecessaryData()
    {
        string customerSelect = "SELECT * FROM Suppliers";
        string fetch = "SELECT * FROM LedgerAccounts";



        var res1 = await DatabaseHandler.ExecuteQueryAsync(customerSelect);
        var res2 = await DatabaseHandler.ExecuteQueryAsync(fetch);
        if (res1.Count > 0)
        {
            foreach (var row in res1)
            {
                suppliers.Add(new Supplier
                    {
                        SupplierID = row["SupplierID"].ToString() ?? "",
                        Name = row["Name"].ToString() ?? "",
                        Contact = row["Contact"].ToString() ?? "",
                    });
            }
        }

        if (res2.Count > 0)
        {
            foreach (var row in res2)
            {
                LedgerAccountsType at;
                Enum.TryParse<LedgerAccountsType>(row["AccountType"].ToString(), out at);
                AccountTypes.Add(new LedgerAcccounts
                    {
                        AcccountId = Int32.Parse(row["AccountID"].ToString() ?? "0"),
                        AccountName = row["AccountName"].ToString(),
                        AccountType = at,
                        isActive = bool.Parse(row["IsActive"].ToString() ?? "true")
                    });
            }
        }
    }
    public async void OnSupplierSearch(ChangeEventArgs e)
    {
        SupplierSearch = e.Value.ToString() ?? "";
        // CustomerSearch.Replace(" ", "").Replace(".", "");

        if (string.IsNullOrWhiteSpace(SupplierSearch))
        {
            ShowCustomerSuggestion = false;
            filteredSuppliers.Clear();
            return;
        }

        filteredSuppliers = suppliers
            .Where(c => c.SupplierID.Contains(SupplierSearch, StringComparison.OrdinalIgnoreCase) ||
                        c.Name.Contains(SupplierSearch, StringComparison.OrdinalIgnoreCase) ||
                        c.Contact.Contains(SupplierSearch, StringComparison.OrdinalIgnoreCase))
            .ToList();

        ShowCustomerSuggestion = filteredSuppliers.Any();
        StateHasChanged();
    }

    public bool validateData(out string error)
    {

        if (supplierCredits.Narration == string.Empty)
        {
            error = "Narration should not be empty";
            return false;
        }

        if (SupplierSearch == string.Empty)
        {
            error = "Customer must be selected";
            return false;
        }

        error = "";
        return true;
    }

    public async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            loaderText = "Adding Payment";
            string errorText = "";
            if (!validateData(out errorText))
            {
                throw new Exception(errorText);
            }
            List<PaymentBill> selectedBills = supplierCredits.paymentBills

                .Where(b => b.isSelected && b.amountPayed > 0)
                .ToList();
            for (int i = 0; i < selectedBills.Count; i++)
            {
                decimal diff = selectedBills[i].remainingBalance - selectedBills[i].amountPayed;
                selectedBills[i].CreditStatus = (Math.Abs(diff) < 0.01m) ? CreditStatus.Paid : CreditStatus.Partial;
            }
            if (selectedBills.Count == 0)
            {
                isLoading = false;
                loaderText = "";
                throw new Exception("No Bills Selected");
            }
            supplierCredits.paymentBills = selectedBills;
            Ledger cashLedger = new Ledger
                {
                    CR_Amount = selectedBills.Where((b) => b.paymentType == PaymentTypes.CASH).Sum(b => b.amountPayed),
                    DR_Amount = 0,
                    Branch = currentBranch,
                    TransactionType = TransactionType.PAYMENT,
                    AccountID = AccountTypes.FirstOrDefault((a) => a.AccountName.ToString() == "CASH A/C")?.AcccountId ?? 0,
                //AccountType = LedgerAccountType.CASH,
                    Balance = 0,
                    Particulars = $"By Cash",
                    Date = supplierCredits.PaymentDate,
                    ForWho = supplierCredits.supplier.SupplierID
                };
            Ledger bankLedger = new Ledger
                {
                    CR_Amount = selectedBills.Where((b) => b.paymentType != PaymentTypes.CASH && b.paymentType != PaymentTypes.CARD).Sum(b => b.amountPayed),
                    DR_Amount = 0,
                    Branch = currentBranch,
                    TransactionType = TransactionType.PAYMENT,
                    AccountID = AccountTypes.FirstOrDefault((a) => a.AccountName.ToString() == "BANK A/C")?.AcccountId ?? 0,
                //AccountType = LedgerAccountType.BANK,
                    Balance = 0,
                    Particulars = $"By Bank",
                    Date = supplierCredits.PaymentDate,
                    ForWho = supplierCredits.supplier.SupplierID
                };
            Ledger cardLedger = new Ledger
            {
                     CR_Amount= selectedBills.Where((b) => b.paymentType == PaymentTypes.CARD).Sum(b => b.amountPayed),
                    DR_Amount = 0,
                    Branch = currentBranch,
                    TransactionType = TransactionType.PAYMENT,
                    AccountID = AccountTypes.FirstOrDefault((a) => a.AccountName.ToString() == "CARD A/C")?.AcccountId ?? 0,
                //AccountType = LedgerAccountType.BANK,
                    Balance = 0,
                    Particulars = $"By Card",
                    Date = supplierCredits.PaymentDate,
                    ForWho = supplierCredits.supplier.SupplierID
            };
            // Credit: Customer (they paid, so reduce what they owe)
            Ledger customerCreditLedger = new Ledger
                {
                    CR_Amount = 0,
                    DR_Amount = selectedBills.Sum(b => b.amountPayed),
                    Branch = currentBranch,
                    TransactionType = TransactionType.PAYMENT,
                    AccountID = AccountTypes.FirstOrDefault((a) => a.AccountName.ToString() == "SUPPLIER A/C")?.AcccountId ?? 0,
                    Balance = 0,
                    Particulars = $"Payment Paid to {supplierCredits.supplier.Name}", // optional
                    Date = supplierCredits.PaymentDate,
                    ForWho = supplierCredits.supplier.SupplierID
                };


            List<Ledger> ledgers = new List<Ledger>();
            
            if (cashLedger.DR_Amount > 0)
            {
                ledgers.Add(cashLedger);
            }
            if (bankLedger.DR_Amount > 0)
            {
                ledgers.Add(bankLedger);
            }
            if(cardLedger.DR_Amount > 0)
            {
                ledgers.Add(cardLedger);
            }
            ledgers.Add(customerCreditLedger);
            



            supplierCredits.Branch = currentBranch;
            await DatabaseHandler.InsertPayment(supplierCredits, false, ledgers);
            foreach (var item in supplierCredits.paymentBills)
            {
                Debug.WriteLine($"Status: {item.CreditStatus}");
            }
            ToastService.ShowToast("Receipt Added Successfully", ToastType.sucess);
            isLoading = false;
            loaderText = "";
        }
        catch (Exception e)
        {
            Debug.WriteLine(e.Message);
            ToastService.ShowToast(e.Message, ToastType.error);
        }
    }

    private async Task SelectSupplier(Supplier supplier)
    {
        try
        {
            loaderText = "Collecting Bills";
            isLoading = true;
            SupplierSearch = supplier.SupplierID;
            supplierCredits.supplier = supplier;
            string fetchCreditQuery = "SELECT * FROM SupplierCreditRecord cr JOIN PurchaseBills b ON b.PurchaseBillID = cr.PurchaseBillID WHERE cr.SupplierID = @SupplierID";

            var bills = await DatabaseHandler.ExecuteQueryAsync(fetchCreditQuery, new Dictionary<string, object>
            {
                { "@SupplierID", supplier.SupplierID }
            });

            Debug.WriteLine(bills.Count);
            Debug.WriteLine(currentBranch);
            if (bills.Count > 0)
            {
                List<PaymentBill> credits = new List<PaymentBill>();
                foreach (var bill in bills)
                {

                    if (currentBranch == bill["Branch"].ToString() && bill["Status"].ToString() != "Paid")
                    {
                        PaymentBill temp = new PaymentBill
                            {
                                paymentId = Int32.Parse(bill["SupplierCreditID"].ToString() ?? "0"),
                                purchaseBillID = Int32.Parse(bill["PurchaseBillID"].ToString() ?? "0"),
                                invoice = bill["InvoiceNumber"].ToString(),
                                branch = bill["Branch"].ToString() ?? "",
                                purchaseDate = DateTime.Parse(bill["PurchaseDate"].ToString()),
                                amountPayed = 0,
                                dueAmount = decimal.Parse(bill["CreditAmount"].ToString() ?? "0"),
                                paidAmount = decimal.Parse(bill["PaidAmount"].ToString() ?? "0"),
                                remainingBalance = decimal.Parse(bill["RemainingBalance"].ToString() ?? "0"),
                                paymentType = Modals.PaymentTypes.CASH
                            };
                        credits.Add(temp);
                    }

                }
                supplierCredits.paymentBills = credits;
            }
            ShowCustomerSuggestion = false;
            isLoading = false;
            loaderText = "";
            ToastService.ShowToast("Payment Bill Count = " + supplierCredits.paymentBills.Count.ToString(), ToastType.sucess);
            StateHasChanged();
        }
        catch (Exception e)
        {
            ToastService.ShowToast(e.Message, ToastType.error);
        }


    }
    public void HandleSupplierKey(KeyboardEventArgs e)
    {
        supplierListRef?.HandleKeyDown(e);
    }

    public void OnPaymentBillSearch(ChangeEventArgs e, int index)
    {
        billSearch = e.Value.ToString() ?? "";

        filteredPaymentBills = paymentBills.Where((c) => createBillString(c).Contains(billSearch, StringComparison.OrdinalIgnoreCase)).ToList();

        supplierCredits.paymentBills[index].showSuggestion = filteredPaymentBills.Any();
        StateHasChanged();
    }
    public string createBillString(PaymentBill credit)
    {
        return ((credit.branch == "Sivakasi" ? "SFRP" : "BPRP") + credit.purchaseBillID.ToString().PadLeft(4, '0'));
    }
    public void HandleCreditKey(KeyboardEventArgs e, int index)
    {
        supplierCredits.paymentBills[index].creditListRef?.HandleKeyDown(e);
    }
}