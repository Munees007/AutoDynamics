@page "/receipt-entry"
@inject IDatabaseHandler DatabaseHandler
@inject IMyLocalStorageService MyLocalStorageService
@inject IToastService ToastService
<div class="container p-3">
    @if (!IsUpdating) {<h3 class="mb-4 fw-bold">Enter Receipt</h3>
    }


    <!-- Date and Customer Search -->
    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <label for="paymentDate" class="form-label fw-bold">Date</label>
            <input type="date"  id="paymentDate" class="form-control" @bind="@creditReciptTypes.ReciptDate" />
        </div>

        <div class="col-md-10 input-group">
            <label class="input-group-text">Cheque Number</label>
            <input type="text" class="form-control" @bind="creditReciptTypes.CheckNumber"/>
        </div>

        <div class="col-md-10 input-group">
            <label class="input-group-text">Narration</label>
            <input type="text" class="form-control" @bind="creditReciptTypes.narration" />
        </div>

        <div class="col-md-10">
            <div class="input-group">
                <span class="input-group-text">Is Advance Payment</span>
                <div class="input-group-text">
                    <input type="checkbox"  class="form-check-input mt-0" @bind="isAdvance" />
                </div>
            </div>
        </div>


        <div class="col-md-8">

            <label for="Customer" class="form-label fw-bold">Customer: @(creditReciptTypes.customer.CustomerId != null ? creditReciptTypes.customer.Name : "")</label>

            <div class="input-group">
                <input @onkeydown="HandleCustomerKey"  autocomplete="off" type="text" id="Customer"
                @bind="CustomerSearch" @oninput="OnCustomerSearch"
                class="form-control" placeholder="Search by ID, Name, or Contact" required>

            </div>
            <SearchSelect @ref="customerListRef" Items="filteredCustomers"
            OnSelect="@(c=> SelectCustomer(c))" T="UserModal"
            showSuggestions="ShowCustomerSuggestion"
            ShowSuggestionsChanged="@((bool val) => ShowCustomerSuggestion = val)">
                <ItemTemplate Context="cust">
                    <div>@cust.CustomerId - @cust.Name - @cust.Contact</div>
                </ItemTemplate>
            </SearchSelect>
        </div>
    </div>
    <div class="input-group mb-3">
        <select  @bind="creditReciptTypes.paymentType" class="form-select">
            <option value="@PaymentTypes.CASH">CASH</option>
            <option value="@PaymentTypes.CARD">CARD</option>
            <option value="@PaymentTypes.BANK">BANK</option>
            <option value="@PaymentTypes.UPI">UPI</option>
        </select>
    </div>
    @if(isAdvance)
    {
        <div class="input-group mb-3">
            <span class="input-group-text fw-bold">Amount</span>
            <input type="number" id="amount" class="form-control" @bind="@splitAmount" placeholder="Enter amount" />
        </div>
    }
    else
    {
        <!-- Credit Bills Section -->
        <h5 class="fw-semibold mb-3 fw-bold">Credit Bills</h5>

        <div class="input-group mb-3">
            <span class="input-group-text fw-bold">Amount</span>
            <input type="number" id="amount" class="form-control" @bind="@splitAmount" placeholder="Enter amount" />
            <button class="btn btn-primary" type="button" @onclick="HandleSplitAmount">Apply</button>
        </div>


        <div class="table-responsive">
            <table class="table table-bordered align-middle text-center">
                <thead class="table-light">
                    <tr>
                        <th>Select</th>
                        <th>Bill No</th>
                        <th>Bill Date</th>
                        <th>Due Amount</th>
                        <th>Already Paid</th>
                        <th>Need to Pay</th>
                        <th>Amount Paid</th>


                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < creditReciptTypes.creditBills.Count; i++)
                    {
                        var item = creditReciptTypes.creditBills[i];
                        item.index = i;
                        <tr>
                            <td>
                                <input type="checkbox" @oninput="(e)=>{triggerCheckBox(e,item);}" @bind="item.isSelected" class="form-check-input" style="width:25px;height:25px;cursor:pointer" />
                            </td>
                            <td>
                                @((item.branch == "Sivakasi" ? "SFR" : "BPR") + item.billNo.ToString().PadLeft(4, '0'))
                            </td>
                            <td>@item.BillDate.ToString("MMM-dd-yyyy")</td>

                            <td>@item.dueAmount</td>
                            <td>@item.paidAmount</td>
                            <td>@item.remainingBalance</td>
                            <td>
                                <input autocomplete="off" type="number" class="form-control text-end" @bind="item.amountPayed" min="1">
                            </td>


                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }


    <!-- Submit Button -->
    <div class="d-flex justify-content-end mt-4">
        <button class="btn btn-primary px-4" @onclick="HandleSubmit">Submit</button>
    </div>
</div>

<Loader show="isLoading" customText="@loaderText"/>
@code{
    [Parameter] public bool IsUpdating { get; set; } = false;
    [Parameter] public CreditReciptType creditReciptTypes { get; set; } = new();
    List<UserModal> customers = new();

    public bool isAdvance { get; set; } = false;

    private string CustomerSearch = "";
    private List<UserModal> filteredCustomers { set; get; } = new List<UserModal>();
    private SearchSelect<UserModal> customerListRef;
    bool ShowCustomerSuggestion = false;
    decimal splitAmount = 0;
    List<LedgerAcccounts> AccountTypes = new List<LedgerAcccounts>();

    private string billSearch = "";
    private List<CreditBill> creditBills { get; set; } = new();
    private List<CreditBill> filteredCreditBills { get; set; } = new List<CreditBill>();
    private SearchSelect<CreditBill> creditBillRef;
    bool showCreditSuggestion = false;

    string SelectedCustomer = "No Customer Selected";

    bool isLoading = false;
    string loaderText = "";

    string currentBranch = "";

    public void triggerCheckBox(ChangeEventArgs change, CreditBill item)
    {
        item.isSelected = (bool)change.Value!;
        HandleSplitAmount();

    }
    public void HandleSplitAmount()
    {
        decimal SA = splitAmount;
        Debug.WriteLine("Triggered");
        if (SA <= 0)
        {
            ToastService.ShowToast("Split amount cannot be negative or zero", ToastType.error);
            return;
        }

        if(SA > 0)
        {
            //Reset all amounts to 0
            creditReciptTypes.creditBills.ForEach(bill => bill.amountPayed = 0);
            foreach (var bill in creditReciptTypes.creditBills)
            {
                if(SA == 0)
                {
                    break;
                }
                if (bill.remainingBalance > 0 && bill.remainingBalance <=SA && bill.isSelected)
                {
                    bill.amountPayed = bill.remainingBalance;
                    SA -= bill.remainingBalance;
                }
                else if (bill.remainingBalance > 0 && bill.remainingBalance >= SA && bill.isSelected)
                {
                    bill.amountPayed = SA;
                    SA -= SA;

                }
            }
        }
        StateHasChanged();
    }

    public void AddNewItem()
    {
        creditReciptTypes.creditBills.Add(new CreditBill());
    }

    protected override async Task OnInitializedAsync()
    {
        loaderText = "Fetching Data";
        isLoading = true;
        try
        {

            currentBranch = await MyLocalStorageService.GetItemAsync("Branch") ?? "";

            await NecessaryData();
            if (IsUpdating)
            {

                filteredCreditBills = creditReciptTypes.creditBills;
                creditBills = creditReciptTypes.creditBills;
                CustomerSearch = creditReciptTypes.customer.CustomerId;
                currentBranch = creditReciptTypes.Branch;
            }
            ToastService.ShowToast("Fetch Successful", ToastType.sucess);
        }
        catch(Exception e)
        {
            ToastService.ShowToast(e.Message, ToastType.sucess);
        }
        isLoading = false;
        loaderText = "";

        StateHasChanged();

    }

    async Task NecessaryData()
    {
        string customerSelect = "SELECT * FROM Customers";
        string fetch = "SELECT * FROM LedgerAccounts";
        string fetchCreditQuery = "SELECT * FROM CreditRecord cr JOIN Bills b ON b.BillID = cr.BillID WHERE cr.CustomerID = @CustomerID AND cr.BillID = @BillID";

        if(IsUpdating)
        {
            foreach(var creditBill in creditReciptTypes.creditBills)
            {
                Dictionary<string, object> parameter = new Dictionary<string, object>
                {
                    {"CustomerID",creditReciptTypes.customer.CustomerId},
                    {"@BillID",creditBill.billId}
                };
                var res = await DatabaseHandler.ExecuteQueryAsync(fetchCreditQuery, parameter);
                var row = res[0];
                int id = int.Parse(res[0]["CreditID"].ToString() ?? "0");


                creditBill.creditId = Int32.Parse(row["CreditID"].ToString() ?? "0");
                creditBill.billId = Int32.Parse(row["BillID"].ToString() ?? "0");
                creditBill.billNo = Int32.Parse(row["BillNo"].ToString() ?? "0");
                creditBill.branch = row["Branch"].ToString() ?? "";
                creditBill.BillDate = DateTime.Parse(row["BillDate"].ToString());

                creditBill.dueAmount = decimal.Parse(row["CreditAmount"].ToString() ?? "0");
                creditBill.paidAmount = decimal.Parse(row["PaidAmount"].ToString() ?? "0");
                creditBill.remainingBalance = decimal.Parse(row["RemainingBalance"].ToString() ?? "0");
                creditBill.paymentType = Modals.PaymentTypes.CASH;


            }

            await SelectCustomer(creditReciptTypes.customer);
        }



        var res1 = await DatabaseHandler.ExecuteQueryAsync(customerSelect);
        var res2 = await DatabaseHandler.ExecuteQueryAsync(fetch);
        if (res1.Count > 0)
        {
            foreach (var row in res1)
            {
                customers.Add(new UserModal
                    {
                        CustomerId = row["CustomerID"].ToString() ?? "",
                        Name = row["Name"].ToString() ?? "",
                        Contact = row["Contact"].ToString() ?? "",
                    });
            }
        }

        if (res2.Count > 0)
        {
            foreach (var row in res2)
            {
                LedgerAccountsType at;
                Enum.TryParse<LedgerAccountsType>(row["AccountType"].ToString(), out at);
                AccountTypes.Add(new LedgerAcccounts
                    {
                        AcccountId = Int32.Parse(row["AccountID"].ToString() ?? "0"),
                        AccountName = row["AccountName"].ToString(),
                        AccountType = at,
                        isActive = bool.Parse(row["IsActive"].ToString() ?? "true")
                    });
            }
        }
    }
    public async void OnCustomerSearch(ChangeEventArgs e)
    {
        CustomerSearch = e.Value.ToString() ?? "";
        // CustomerSearch.Replace(" ", "").Replace(".", "");

        if (string.IsNullOrWhiteSpace(CustomerSearch))
        {
            ShowCustomerSuggestion = false;
            filteredCustomers.Clear();
            return;
        }

        filteredCustomers = customers
            .Where(c => c.CustomerId.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase) ||
                        c.Name.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase) ||
                        c.Contact.Contains(CustomerSearch, StringComparison.OrdinalIgnoreCase))
            .ToList();

        ShowCustomerSuggestion = filteredCustomers.Any();
        StateHasChanged();
    }

    public bool validateData(out string error)
    {

        if(creditReciptTypes.narration == string.Empty)
        {
            error = "Narration should not be empty";
            return false;
        }

        if(CustomerSearch == string.Empty)
        {
            error = "Customer must be selected";
            return false;
        }
        List<CreditBill> selectedBills = creditReciptTypes.creditBills
                .Where(b => b.isSelected && b.amountPayed > 0)
                .ToList();
        if(splitAmount > 0 && splitAmount != selectedBills.Sum((b)=> b.amountPayed))
        {
            error = "Amount not matched";
            return false;
        }

        error = "";
        return true;
    }
    public async Task HandleSubmit()
    {
        isLoading = true;
        loaderText = "Adding Receipt";
        try
        {

            string errorText = "";
            if(!validateData(out errorText))
            {
                throw new Exception(errorText);
            }
            if(isAdvance)
            {
                creditReciptTypes.TotalAmountPaid = splitAmount;
            }
            List<CreditBill> selectedBills = creditReciptTypes.creditBills
                .Where(b => b.isSelected && b.amountPayed > 0)
                .ToList();
            for (int i = 0; i < selectedBills.Count; i++)
            {
                decimal diff = selectedBills[i].remainingBalance - selectedBills[i].amountPayed;
                selectedBills[i].CreditStatus = (Math.Abs(diff) < 0.01m) ? CreditStatus.Paid : CreditStatus.Partial;
            }
            if(selectedBills.Count ==0)
            {
                isLoading = false;
                loaderText = "";
                throw new Exception("No Bills Selected");
            }
            creditReciptTypes.creditBills = selectedBills;
            Ledger cashLedger = new(), bankLedger = new(), CardLedger = new();
            if (creditReciptTypes.paymentType == PaymentTypes.CASH)
            {
                cashLedger = new Ledger
                    {
                        DR_Amount = selectedBills.Sum(b => b.amountPayed),
                        CR_Amount = 0,
                        Branch = currentBranch,
                        TransactionType = TransactionType.RECEIPT,
                        AccountID = AccountTypes.FirstOrDefault((a) => a.AccountName.ToString() == "CASH A/C")?.AcccountId ?? 0,
                    //AccountType = LedgerAccountType.CASH,
                        Balance = 0,
                        Particulars = $"By Cash",
                        Date = creditReciptTypes.ReciptDate,
                        ForWho = creditReciptTypes.customer.CustomerId
                    };
            }
            if (creditReciptTypes.paymentType == PaymentTypes.BANK || creditReciptTypes.paymentType == PaymentTypes.UPI)
            {
                bankLedger = new Ledger
                    {
                        DR_Amount = selectedBills.Sum(b => b.amountPayed),
                        CR_Amount = 0,
                        Branch = currentBranch,
                        TransactionType = TransactionType.RECEIPT,
                        AccountID = AccountTypes.FirstOrDefault((a) => a.AccountName.ToString() == "BANK A/C")?.AcccountId ?? 0,
                    //AccountType = LedgerAccountType.BANK,
                        Balance = 0,
                        Particulars = $"By Bank",
                        Date = creditReciptTypes.ReciptDate,
                        ForWho = creditReciptTypes.customer.CustomerId
                    };
            }
            if (creditReciptTypes.paymentType == PaymentTypes.CARD)
            {
                CardLedger = new Ledger
                    {
                        AccountID = AccountTypes.FirstOrDefault((b) => b.AccountName.ToString() == "CARD A/C")?.AcccountId ?? 0,
                    //AccountType = LedgerAccountType.BANK,
                        DR_Amount = selectedBills.Sum(b => b.amountPayed),
                        Particulars = $"By Card",
                        TransactionType = TransactionType.RECEIPT,
                        Date = creditReciptTypes.ReciptDate,
                        Balance = 0,
                        Branch = currentBranch,
                        CR_Amount = 0,
                        ForWho = creditReciptTypes.customer.CustomerId
                    };
            }
            // Credit: Customer (they paid, so reduce what they owe)
            Ledger customerCreditLedger = new Ledger
                {
                    DR_Amount = 0,
                    CR_Amount = selectedBills.Sum(b => b.amountPayed),
                    Branch = currentBranch,
                    TransactionType = TransactionType.RECEIPT,
                    AccountID = AccountTypes.FirstOrDefault((a) => a.AccountName.ToString() == "CUSTOMER A/C")?.AcccountId ?? 0,
                    Balance = 0,
                    Particulars = "To Receipt for Receipt: ", // optional
                    Date = creditReciptTypes.ReciptDate,
                    ForWho = creditReciptTypes.customer.CustomerId
                };


            List<Ledger> ledgers = new List<Ledger>();

            if(cashLedger.DR_Amount > 0)
            {
                ledgers.Add(cashLedger);
            }
            if(bankLedger.DR_Amount > 0)
            {
                ledgers.Add(bankLedger);
            }
            if(CardLedger.DR_Amount > 0)
            {
                ledgers.Add(CardLedger);
            }
            ledgers.Add(customerCreditLedger);



            creditReciptTypes.Branch = currentBranch;
            await DatabaseHandler.InsertReceipt(creditReciptTypes, IsUpdating, ledgers);
            foreach(var item in creditReciptTypes.creditBills)
            {
                Debug.WriteLine($"Status: {item.CreditStatus}");
            }
            creditReciptTypes = new CreditReciptType();
            splitAmount = 0;
            CustomerSearch = "";
            ToastService.ShowToast("Receipt Added Successfully", ToastType.sucess);

        }
        catch(Exception e)
        {
            Debug.WriteLine(e.Message);
            ToastService.ShowToast(e.Message,ToastType.error);
        }
        isLoading = false;
        loaderText = "";
        StateHasChanged();
    }

    private async Task SelectCustomer(UserModal customer)
    {
        try
        {
            loaderText = "Collecting Bills";
            isLoading = true;
            CustomerSearch = customer.CustomerId;
            creditReciptTypes.customer = customer;
            SelectedCustomer = $"{customer.Name} - {customer.Contact}";
            string fetchCreditQuery = "SELECT * FROM CreditRecord cr JOIN Bills b ON b.BillID = cr.BillID WHERE cr.CustomerID = @CustomerID";

            var bills = await DatabaseHandler.ExecuteQueryAsync(fetchCreditQuery, new Dictionary<string, object>
			{
				{ "@CustomerID", customer.CustomerId }
			});

            Debug.WriteLine(bills.Count);
            Debug.WriteLine(currentBranch);
            if (bills.Count > 0)
            {
                List<CreditBill> credits = new List<CreditBill>();
                foreach (var bill in bills)
                {

                    if (currentBranch == bill["Branch"].ToString() && bill["Status"].ToString() != "Paid")
                    {

                        CreditBill temp = new CreditBill
                            {
                                creditId = Int32.Parse(bill["CreditID"].ToString() ?? "0"),
                                billId = Int32.Parse(bill["BillID"].ToString() ?? "0"),
                                billNo = Int32.Parse(bill["BillNo"].ToString() ?? "0"),
                                branch = bill["Branch"].ToString() ?? "",
                                BillDate = DateTime.Parse(bill["BillDate"].ToString()),
                                amountPayed = 0,
                                dueAmount = decimal.Parse(bill["CreditAmount"].ToString() ?? "0"),
								paidAmount = decimal.Parse(bill["PaidAmount"].ToString() ?? "0"),
								remainingBalance = decimal.Parse(bill["RemainingBalance"].ToString() ?? "0"),
                                paymentType = Modals.PaymentTypes.CASH
                            };
                        if (IsUpdating && creditReciptTypes.ReciptDate <= temp.BillDate)
                        {
                            temp.isSelected = false;
                            creditReciptTypes.creditBills.Add(temp);
                            continue;
                        }
                        credits.Add(temp);
                    }

                }
                if(!IsUpdating)
                {
                    creditReciptTypes.creditBills = credits;
                }
                
            }
            ShowCustomerSuggestion = false;
            isLoading = false;
            loaderText = "";
            ToastService.ShowToast("Credi Bill Count = " + creditReciptTypes.creditBills.Count.ToString(), ToastType.sucess);
            StateHasChanged();
        }
        catch(Exception e)
        {
            ToastService.ShowToast(e.Message, ToastType.error);   
        }
        

    }
    public void HandleCustomerKey(KeyboardEventArgs e)
    {
        customerListRef?.HandleKeyDown(e);
    }

    public void OnCreditBillSearch(ChangeEventArgs e,int index)
    {
        billSearch = e.Value.ToString() ?? "";

        filteredCreditBills = creditBills.Where((c) =>createBillString(c).Contains(billSearch,StringComparison.OrdinalIgnoreCase) ).ToList();

        creditReciptTypes.creditBills[index].showSuggestion = filteredCreditBills.Any();
        StateHasChanged();
    }
    public string createBillString(CreditBill credit)
    {
        return ((credit.branch == "Sivakasi" ? "SFR" : "BPR") + credit.billNo.ToString().PadLeft(4,'0'));
    }
    public void HandleCreditKey(KeyboardEventArgs e,int index)
    {
        creditReciptTypes.creditBills[index].creditListRef?.HandleKeyDown(e);
    }
}