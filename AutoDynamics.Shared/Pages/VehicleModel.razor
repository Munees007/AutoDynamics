@page "/vehicleModel"
@using AutoDynamics.Shared.Modals
@using AutoDynamics.Shared.Services
@inject IDatabaseHandler DatabaseHandler
@inject ICurrentData CurrentData

<h1>Vehicle Models</h1>

<h3>This page is used to manage Vehicle Models</h3>

<EditForm Model="@vehicleModel" OnValidSubmit="HandleSubmit">
    <h2 class="text-center mt-3">Create Vehicle Model</h2>

    <!-- Dropdown for Vehicle Make -->
    <div class="mb-3">
        <label for="VehicleMakeID" class="form-label">Vehicle Make:</label>
        <select id="VehicleMakeID" @bind="vehicleModel.VehicleMakeID" class="form-control" required>
            <option value="">-- Select Vehicle Make --</option>
            @foreach (var make in vehicleMakes)
            {
                <option value="@make.VehicleMakeID">@make.Vehicle_Make</option>
            }
        </select>
    </div>

    <!-- Input for Vehicle Model -->
    <div class="mb-3">
        <label for="VehicleModel" class="form-label">Vehicle Model:</label>
        <input autocomplete="new-password" type="text" id="VehicleModel" @bind="vehicleModel.VehicelModel" class="form-control" maxlength="255" required>
    </div>

    <button type="submit" class="btn btn-primary w-100">@(isUpdating ? "Updating" : "Submit")</button>
</EditForm>

@if (isProcessing)
{
    <Loader></Loader>
}

<h2 class="mt-4">Vehicle Models Available</h2>

<div class="container mt-4">
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Vehicle Model ID</th>
                    <th>Vehicle Make</th>
                    <th>Vehicle Model</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (vehicleModels.Count == 0)
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted">No models found.</td>
                    </tr>
                }
                else
                {
                    @foreach (var model in vehicleModels)
                    {
                        <tr>
                            <td>@model.VehicleModelID</td>
                            <td>@(vehicleMakes.FirstOrDefault(m => m.VehicleMakeID == model.VehicleMakeID)?.Vehicle_Make ?? "Unknown")</td>
                            <td>@model.VehicelModel</td>
                            <td>
                                <button class="btn btn-warning btn-sm" @onclick="() => UpdateService(model)">Update</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteService(model.VehicleModelID)">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code
{
    private VehicleModelType vehicleModel { get; set; } = new VehicleModelType();
    private List<VehicleModelType> vehicleModels { get; set; } = new List<VehicleModelType>();
    private List<VehicleMakeType> vehicleMakes { get; set; } = new List<VehicleMakeType>();
    private bool isUpdating = false;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchMakes();
        await FetchModels();
    }

    public void UpdateService(VehicleModelType currentVehicleModel)
    {
        isUpdating = true;
        vehicleModel = currentVehicleModel;
        StateHasChanged();
    }

    public void setProcessing(bool state)
    {
        isProcessing = state;
        StateHasChanged();
    }

    // Fetch Vehicle Makes for dropdown
    public async Task FetchMakes()
    {
        string query = @"SELECT * FROM VehicleMakes";
        var result = await DatabaseHandler.ExecuteQueryAsync(query);
        vehicleMakes.Clear();
        if (result.Count > 0)
        {
            foreach (var row in result)
            {
                vehicleMakes.Add(
                    new VehicleMakeType
                        {
                            VehicleMakeID = row["VehicleMakeID"].ToString() ?? "",
                            Vehicle_Make = row["VehicleMake"].ToString() ?? ""
                        }
                );
            }
        }
    }

    // Fetch Vehicle Models
    public async Task FetchModels()
    {
        setProcessing(true);
        vehicleModels.Clear();
        string query = @"SELECT * FROM VehicleModels";

        var result = await DatabaseHandler.ExecuteQueryAsync(query);
        if (result.Count > 0)
        {
            foreach (var row in result)
            {
                vehicleModels.Add(
                    new VehicleModelType
                        {
                            VehicleModelID = row["VehicleModelID"].ToString() ?? "",
                            VehicleMakeID = row["VehicleMakeID"].ToString() ?? "",
                            VehicelModel = row["VehicleModel"].ToString() ?? ""
                        }
                );
            }
        }
        setProcessing(false);
    }

    public async Task<bool> ManageService(VehicleModelType data)
    {
        setProcessing(true);
        string query = "";
        var parameter = new Dictionary<string, object>();

        if (isUpdating)
        {
            query = @"UPDATE VehicleModels SET VehicleMakeID = @vehicleMakeID, VehicleModel = @vehicleModel WHERE VehicleModelID = @vehicleModelID";
            parameter = new Dictionary<string, object>
            {
                {"VehicleModelID", data.VehicleModelID},
                {"VehicleMakeID", data.VehicleMakeID},
                {"VehicleModel", data.VehicelModel},
            };

            int result = await DatabaseHandler.ExecuteNonQueryAsync(query, parameter);
            isUpdating = false;
            StateHasChanged();
            return result > 0;
        }
        else
        {
            string id = await DatabaseHandler.GenerateID("MO", 6, "VehicleModels", "VehicleModelID");
            query = @"INSERT INTO VehicleModels (VehicleModelID, VehicleMakeID, VehicleModel) VALUES (@vehicleModelID, @vehicleMakeID, @vehicleModel)";

            parameter = new Dictionary<string, object>
            {
                {"@vehicleModelID" ,id},
                {"@vehicleMakeID" ,data.VehicleMakeID},
                {"@vehicleModel", data.VehicelModel},
            };

            int rowsAffected = await DatabaseHandler.ExecuteNonQueryAsync(query, parameter);
            setProcessing(false);
            return rowsAffected > 0;
        }
    }

    public async void HandleSubmit()
    {
        await ManageService(vehicleModel);
        vehicleModel.VehicleModelID = "";
        vehicleModel.VehicleMakeID = "";
        vehicleModel.VehicelModel = "";
        await FetchModels();
        StateHasChanged();
    }

    public async Task DeleteService(string id)
    {
        string query = $"DELETE FROM VehicleModels WHERE VehicleModelID = '{id}'";
        await DatabaseHandler.ExecuteQueryAsync(query);
        await FetchModels();
        StateHasChanged();
    }
}
