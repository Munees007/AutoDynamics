@page "/vehicleMake"
@inject IDatabaseHandler DatabaseHandler
@inject ICurrentData CurrentData
<h1>Vehicle Makes</h1>

<h3>This page is used to manage Vehicle Makes</h3>

<DialoBox dialogBox="vehicleMakeCustomBox"></DialoBox>

<div class="row justify-content-end">
    <div class="col-auto">
        <button class="btn btn-primary"
                @onclick="()=>{ vehicleMakeCustomBox.showDialog = true; StateHasChanged(); }">
            Add
        </button>
    </div>
</div>

<Loader show="isProcessing" customText="@loaderText"></Loader>

<h2 class="mt-4">Vehicle Makes Available</h2>


<div class="d-flex col-12">
    <input type="text" class="form-control" @bind="searchQuery" @oninput="FilterMake" placeholder="Search Vehicle Make" />
</div>
<div class="container mt-4">
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Vehicle Make ID</th>
                    <th>Vehicle Make</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (vehicleMakes.Count == 0)
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted">No customers found.</td>
                    </tr>
                }
                else
                {
                    @foreach (var vehicleMakeData in filteredVehicleMakes)
                    {
                        <tr>
                            <td>@vehicleMakeData.VehicleMakeID</td>
                            <td>@vehicleMakeData.Vehicle_Make</td>
                            <td>
                                <button class="btn btn-warning btn-sm" @onclick="() => UpdateService(vehicleMakeData)">Update</button>
                                @* <button class="btn btn-danger btn-sm" @onclick="() => DeleteService(vehicleMakeData.VehicleMakeID)">Delete</button> *@
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code
{
    private VehicleMakeType vehicleMake { set; get; } = new VehicleMakeType();
    private List<VehicleMakeType> vehicleMakes { set; get; } = new List<VehicleMakeType>();
    private List<VehicleMakeType> filteredVehicleMakes { get; set; } = new List<VehicleMakeType>();
    private bool isUpdating = false;
    private bool isProcessing = false;
    private string loaderText = "";
    string searchQuery = "";

    CustomDialogBox vehicleMakeCustomBox;
    protected override async Task OnInitializedAsync()
    {
        vehicleMakeCustomBox = new CustomDialogBox
        {
                    body = @<EditForm Model="@vehicleMake" OnValidSubmit="HandleSubmit">
        <h2 class="text-center mt-3">Create Vehicle Make</h2>
        <div class="mb-3">
            <label for="VehicleMake" class="form-label">Vehicle Make:</label>
            <input type="text" id="VehicleMake" @bind="vehicleMake.Vehicle_Make" class="form-control" maxlength="255" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">@(isUpdating ? "Updating" : "Submit")</button>
    </EditForm>,
            Title = isUpdating ? "Updating Vehicle Make" : "Create Vehicle Make",
			OnCloase = EventCallback.Factory.Create(this, async () =>
			{
				vehicleMake.VehicleMakeID = "";
				vehicleMake.Vehicle_Make = "";
				isUpdating = false;
				vehicleMakeCustomBox.showDialog = false;
				StateHasChanged();
			}),
        };
        await FetchServices();
    }
    public void FilterMake(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString() ?? "";

        filteredVehicleMakes = vehicleMakes
            .Where(m => m.Vehicle_Make.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    public void UpdateService(VehicleMakeType currentVehicleMake)
    {
        isUpdating = true;
        vehicleMake = currentVehicleMake;
		vehicleMakeCustomBox.showDialog = true;
        StateHasChanged();
    }
    public void setProcessing(bool state)
    {
        isProcessing = state;
        StateHasChanged();
    }
    public async Task FetchServices()
    {
        loaderText = "Fetching Vehicle Makes";
        setProcessing(true);
        vehicleMakes.Clear();
        filteredVehicleMakes.Clear();
        string query = @"SELECT * FROM VehicleMakes";

        var result = await DatabaseHandler.ExecuteQueryAsync(query);
        if (result.Count > 0)
        {
            foreach (var row in result)
            {
                vehicleMakes.Add(
                    new VehicleMakeType
                        {
                            VehicleMakeID = row["VehicleMakeID"].ToString() ?? "",
                            Vehicle_Make = row["VehicleMake"].ToString() ?? ""
                        }
                );
            }
        }
        filteredVehicleMakes = vehicleMakes;
        setProcessing(false);
        loaderText = "";
    }
    public async Task<bool> ManageService(VehicleMakeType data)
    {
        loaderText = isUpdating ? "Updating Vehicle Make" : "Creating Vehicle Make";
        setProcessing(true);
        string query = "";
        var parameter = new Dictionary<string, object>();
        if (isUpdating)
        {
            query = @"UPDATE VehicleMakes SET VehicleMake = @vehicleMake WHERE VehicleMakeID = @vehicleMakeID";
            parameter = new Dictionary<string, object>
            {
                {"VehicleMakeID",data.VehicleMakeID},
                {"VehicleMake",data.Vehicle_Make},
            };

            int result = await DatabaseHandler.ExecuteNonQueryAsync(query, parameter);
            isUpdating = false;
            StateHasChanged();
            return result > 0;
        }
        else
        {
            string id = await DatabaseHandler.GenerateID("VM", 6, "VehicleMakes", "VehicleMakeID");
            query = @"INSERT INTO VehicleMakes (VehicleMakeID,VehicleMake) VALUES (@vehicleMakeID,@vehicleMake)";

            parameter = new Dictionary<string, object>
            {
                {"@vehicleMakeID" ,id},
                {"@vehicleMake",data.Vehicle_Make},
            };

            int rowsAffected = await DatabaseHandler.ExecuteNonQueryAsync(query, parameter);
            setProcessing(false);
            return rowsAffected > 0;
        }
        loaderText = "";
    }
    public async void HandleSubmit()
    {
        await ManageService(vehicleMake);
        vehicleMake.VehicleMakeID = "";
        vehicleMake.Vehicle_Make = "";
        await FetchServices();
        StateHasChanged();
    }

    public async Task DeleteService(string id)
    {
        string query = $"DELETE FROM VehicleMakes WHERE VehicleMakeID = '{id}'";
        await DatabaseHandler.ExecuteQueryAsync(query);
        await FetchServices();
        StateHasChanged();
    }

}