@inject IDatabaseHandler DatabaseHandler
@inject IToastService ToastService
@inject ITabService TabService

<h3 class="mb-3">@LedgerAccount.AccountName</h3>

<div class="mb-3">
    <label>Branch: </label>
    <select @bind="selectedBranch" class="form-select w-25 mb-3">
        <option value="Sivakasi">Sivakasi</option>
        <option value="ByPass">ByPass</option>

    </select>
</div>


<div class="mb-3">
    <label>Sort By: </label>
    <select @bind="selectedSortingOption" class="form-control">
        <option value="yesterday">Yesterday</option>
        <option value="date">Today</option>
        <option value="month">Month to Date</option>
        <option value="year">Year to Date</option>
        <option value="range">Custom</option>
    </select>

    @if (selectedSortingOption == "range")
    {
        <input type="date" @bind="startDate" class="form-control mt-2" />
        <input type="date" @bind="endDate" class="form-control mt-2" />
    }
</div>
<div class="w-100 d-flex justify-content-between align-items-md-center">
    <button class="btn btn-primary mb-3" @onclick="ApplyFilters">Apply Filters</button>
</div>

<div style="overflow-x:auto;">
    <table class="table table-bordered table-hover text-center align-middle ledger-table">
        <thead class="table-secondary">
            <tr>
                <th>Date</th>
                <th>Account Type</th>
                <th>Transaction Type</th>
                <th>ForWho</th>
                <th>Particulars</th>
                <th>Dr (₹)</th>
                <th>Cr (₹)</th>
                <th>Balance</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ledger in ledgers)
            {
                <tr>
                    <td>@ledger.Date.ToString("dd-MM-yyyy")</td>
                    <td>@ledger.AccountType?.AccountName</td>
                    <td>@ledger.TransactionType</td>
                    <td>@ledger.ForWhoName</td>
                    <td>@ledger.Particulars</td>
                    <td class="text-end">@ledger.DR_Amount.ToString("N2")</td>
                    <td class="text-end">@ledger.CR_Amount.ToString("N2")</td>
                    <td class="text-end">@GetFormattedBalance(ledger.Balance)</td>
                    <td class="d-flex flex-column gap-2 h-100">
                        @if (ledger.TransactionType == TransactionType.EXPENSE || ledger.TransactionType == TransactionType.OTHER)
                        {
                            <button class="btn btn-warning btn-sm" @onclick="()=>{ViewLedgerFun(ledger);}">VIEW</button>
                            <button class="btn btn-warning btn-sm" @onclick="()=>{UpdateLedger(ledger);}">UPDATE</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@code{
    [Parameter] public LedgerAcccounts LedgerAccount { get; set; } = new();
    List<Ledger> ledgers = new();
    List<Ledger> sortedLedgers = new();
    List<LedgerAcccounts> AccountTypes = new();
    string selectedBranch = "Sivakasi";
    string selectedSortingOption = "date";

    DateTime? startDate, endDate;

    async Task UpdateLedger(Ledger ledger)
    {
        List<Ledger> ledgers = await getLedgers(ledger.EntryID);
        if (ledgers.Count > 0)
        {
            Dictionary<string, dynamic> parameter = new Dictionary<string, dynamic>
            {
                {"ledgers",ledgers},
                {"isUpdating",true}
            };
            TabService.OpenWithParameter(ledger.AccountType?.AccountName ?? "Ledger", typeof(AddLedger), parameter);
        }
        else
        {
            ToastService.ShowToast("No ledger entries found for this account.", ToastType.warning);
        }
    }

    async Task ViewLedgerFun(Ledger ledger)
    {
        List<Ledger> ledgers = await getLedgers(ledger.EntryID);
        if (ledgers.Count > 0)
        {
            Dictionary<string, dynamic> parameter = new Dictionary<string, dynamic>
            {
                {"ledgers",ledgers},
                {"isViewing",true}
            };
            TabService.OpenWithParameter(ledger.AccountType?.AccountName ?? "Ledger", typeof(AddLedger), parameter);
        }
        else
        {
            ToastService.ShowToast("No ledger entries found for this account.", ToastType.warning);
        }
    }

    async Task<List<Ledger>> getLedgers(int entryID)
    {
        string query = $@"SELECT *
                   FROM CashBankLedger WHERE EntryID = {entryID}";
        var res = await DatabaseHandler.ExecuteQueryAsync(query);

        List<Ledger> ledgers = new();
        if (res.Count > 0)
        {
            foreach (var row in res)
            {
                bool active = row["isActive"].ToString() == "1" ? true : false;
                if (!active) continue;
                Ledger temp = new Ledger
                    {
                        LedgerID = Convert.ToInt32(row["LedgerID"]),
                        Date = Convert.ToDateTime(row["Date"]),
                        AccountID = Convert.ToInt32(row["AccountID"]),
                        AccountType = AccountTypes.FirstOrDefault((b) => b.AcccountId == Convert.ToInt32(row["AccountID"] ?? "0")),
                        Branch = row["Branch"]?.ToString() ?? "",
                        TransactionType = Enum.TryParse<TransactionType>(row["TransactionType"].ToString(), out var tran) ? tran : TransactionType.OTHER,
                        ReferenceID = row["ReferenceID"] != DBNull.Value ? Convert.ToInt32(row["ReferenceID"]) : 0,
                        Particulars = row["Particulars"]?.ToString() ?? "",
                        ForWho = row["ForWho"]?.ToString() ?? "",
                        EntryID = row["EntryID"] != DBNull.Value ? Convert.ToInt32(row["EntryID"]) : 0,
                        CR_Amount = Convert.ToDecimal(row["CrAmount"]),
                        DR_Amount = Convert.ToDecimal(row["DrAmount"]),
                        Balance = Convert.ToDecimal(row["Balance"]),
                        isActive = active
                    };
                ledgers.Add(temp);
            }
        }
        return ledgers;
    }


    async Task ApplyFilters()
    {
        ledgers.Clear();
        sortedLedgers.Clear();
        AccountTypes.Clear();
        var fetch = @"SELECT * FROM LedgerAccounts";

        var res1 = await DatabaseHandler.ExecuteQueryAsync(fetch);

        if (res1.Count > 0)
        {
            foreach (var row in res1)
            {
                LedgerAccountsType at;
                Enum.TryParse<LedgerAccountsType>(row["AccountType"].ToString(), out at);
                AccountTypes.Add(new LedgerAcccounts
                    {
                        AcccountId = Int32.Parse(row["AccountID"].ToString() ?? "0"),
                        AccountName = row["AccountName"].ToString(),
                        AccountType = at,
                        isActive = bool.Parse(row["IsActive"].ToString() ?? "true")
                    });
            }
        }
        DateTime today = DateTime.Today;
        decimal openingBalance = 0;

        DateTime openingDateBoundary = selectedSortingOption switch
        {
            "date" => today,
            "yesterday" => today.AddDays(-1),
            "month" => new DateTime(today.Year, today.Month, 1),
            "year" => new DateTime(today.Year, 1, 1),
            "range" => startDate.HasValue ? startDate.Value : DateTime.MinValue,
            _ => DateTime.MinValue
        };

        // Build a WHERE clause for opening balance (same filter by AccountID if needed)
        string openingWhereClause = $"WHERE Date < '{openingDateBoundary:yyyy-MM-dd HH:mm:ss}' AND isActive = 1 AND Branch = '{selectedBranch}'";



        openingWhereClause += $" AND AccountID = {LedgerAccount.AcccountId}";


        // Query for opening balance
        var openingBalanceQuery = $@"SELECT SUM(DrAmount - CrAmount) as OpeningBalance FROM CashBankLedger {openingWhereClause}";
        var result = await DatabaseHandler.ExecuteQueryAsync(openingBalanceQuery);
        if (result.Count > 0 && result[0]["OpeningBalance"] != DBNull.Value)
        {
            openingBalance = Convert.ToDecimal(result[0]["OpeningBalance"]);
        }

        string whereClause = "";

        switch (selectedSortingOption)
        {
            case "date":
                whereClause += $"WHERE DATE(Date) = '{today:yyyy-MM-dd}' AND Branch = '{selectedBranch}'";
                break;
            case "yesterday":
                whereClause += $"WHERE DATE(Date) = '{today.AddDays(-1):yyyy-MM-dd}' AND Branch = '{selectedBranch}'";
                break;
            case "month":
                whereClause += $"WHERE MONTH(Date) = {today.Month} AND YEAR(Date) = {today.Year} AND Branch = '{selectedBranch}'";
                break;
            case "year":
                whereClause += $"WHERE YEAR(Date) = {today.Year} AND Branch = '{selectedBranch}'";
                break;
            case "range":
                whereClause += $"WHERE DATE(Date) BETWEEN '{startDate.Value:yyyy-MM-dd HH:mm:ss}' AND '{endDate.Value:yyyy-MM-dd HH:mm:ss}' AND Branch = '{selectedBranch}'";
                break;
            default:
                break;
        }

        if (whereClause == "")
        {
            whereClause += $"WHERE AccountID = {LedgerAccount.AcccountId} AND Branch = '{selectedBranch}'";
        }
        else
        {
            whereClause += $" AND AccountID = {LedgerAccount.AcccountId} AND Branch = '{selectedBranch}'";
        }

        var query = $@"SELECT LedgerID, Date, AccountID, Branch, TransactionType,ForWho, ReferenceID, Particulars, CrAmount, DrAmount, Balance,isActive
                      FROM CashBankLedger {whereClause} Order By Date";
        Debug.WriteLine(query);
        var res = await DatabaseHandler.ExecuteQueryAsync(query);

        if (res.Count > 0)
        {
            ledgers.Add(new Ledger
            {
                Branch = selectedBranch,
				Date = openingDateBoundary,
			    Particulars = "Opening Balance",
				DR_Amount = 0.0m,
				CR_Amount = 0.0m,
                Balance = openingBalance
            });
            foreach (var row in res)
            {
                bool active = row["isActive"].ToString() == "1" ? true : false;
                if (!active) continue;
                Ledger temp = new Ledger
                    {
                        LedgerID = Convert.ToInt32(row["LedgerID"]),
                        Date = Convert.ToDateTime(row["Date"]),
                        AccountID = Convert.ToInt32(row["AccountID"]),
                        AccountType = LedgerAccount,
                        Branch = row["Branch"]?.ToString() ?? "",
                        TransactionType = Enum.TryParse<TransactionType>(row["TransactionType"].ToString(), out var tran) ? tran : TransactionType.OTHER,
                        ReferenceID = row["ReferenceID"] != DBNull.Value ? Convert.ToInt32(row["ReferenceID"]) : 0,
                        Particulars = row["Particulars"]?.ToString() ?? "",
                        ForWho = row["ForWho"]?.ToString() ?? "",
                        CR_Amount = Convert.ToDecimal(row["CrAmount"]),
                        DR_Amount = Convert.ToDecimal(row["DrAmount"]),
                        Balance = Convert.ToDecimal(row["Balance"]),
                        isActive = active
                    };
                if (temp.TransactionType == TransactionType.BILL || temp.TransactionType == TransactionType.RECEIPT)
                {
                    string getCustomerDetails = $"SELECT Name FROM Customers WHERE CustomerID = '{temp.ForWho}'";
                    var customerDetails = await DatabaseHandler.ExecuteQueryAsync(getCustomerDetails);
                    if (customerDetails.Count > 0)
                    {
                        temp.ForWhoName = customerDetails[0]["Name"].ToString() ?? "";
                    }
                }
                if (temp.TransactionType == TransactionType.PURCHASE || temp.TransactionType == TransactionType.PAYMENT)
                {
                    string getCustomerDetails = $"SELECT Name FROM Suppliers WHERE SupplierID = '{temp.ForWho}'";
                    var customerDetails = await DatabaseHandler.ExecuteQueryAsync(getCustomerDetails);
                    if (customerDetails.Count > 0)
                    {
                        temp.ForWhoName = customerDetails[0]["Name"].ToString() ?? "";
                    }
                }

                ledgers.Add(temp);

            }

        }
        decimal runningBalance = openingBalance;
        foreach (var ledger in ledgers)
        {
            runningBalance += (ledger.DR_Amount - ledger.CR_Amount);
            ledger.Balance = runningBalance;
        }

    }

    
    string GetFormattedBalance(decimal balance)
    {
        if (balance == 0)
            return "0.00";

        var suffix = balance > 0 ? " Dr" : " Cr";
        return Math.Abs(balance).ToString("N2") + suffix;
    }

	protected async override Task OnInitializedAsync()
	{
		
	}
}